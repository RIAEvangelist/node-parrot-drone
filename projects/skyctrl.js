'use strict';
/*************************************************\
generated from arsdk-xml/xml/*.xml
generated by utils/convertSDK.js
generated on : 2/19/2017, 11:34:14 AM
\**************************************************/
const projects={
  "skyctrl": {
    "info": {
      "tagType": "project",
      "name": "skyctrl",
      "id": 4
    },
    "details": "All SkyController_only commands",
    "WifiState": {
      "info": {
        "tagType": "class",
        "name": "WifiState",
        "id": 0
      },
      "details": "Wifi state",
      "WifiList": {
        "info": {
          "tagType": "cmd",
          "name": "WifiList",
          "id": 0,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Visible wifi networks",
            "desc": "List of visible wifi networks.\\n The application must clear the list before sending the [RequestWifiList](#4_1_0) command.",
            "support": "0903",
            "triggered": "by a [RequestWifiList](#4_1_0) command."
          }
        },
        "bssid": {
          "info": {
            "tagType": "arg",
            "name": "bssid",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Wifi bssid",
          "lookup": {},
          "value": null
        },
        "ssid": {
          "info": {
            "tagType": "arg",
            "name": "ssid",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Wifi ssid",
          "lookup": {},
          "value": null
        },
        "secured": {
          "info": {
            "tagType": "arg",
            "name": "secured",
            "type": "u8",
            "id": 2,
            "bytes": 1
          },
          "details": "Is wifi secured by passphrase",
          "lookup": {},
          "value": null
        },
        "saved": {
          "info": {
            "tagType": "arg",
            "name": "saved",
            "type": "u8",
            "id": 3,
            "bytes": 1
          },
          "details": "Is wifi saved in terminal",
          "lookup": {},
          "value": null
        },
        "rssi": {
          "info": {
            "tagType": "arg",
            "name": "rssi",
            "type": "i32",
            "id": 4,
            "bytes": 4
          },
          "details": "Wifi rssi",
          "lookup": {},
          "value": null
        },
        "frequency": {
          "info": {
            "tagType": "arg",
            "name": "frequency",
            "type": "i32",
            "id": 5,
            "bytes": 4
          },
          "details": "Wifi frequency",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "bssid",
          "1": "ssid",
          "2": "secured",
          "3": "saved",
          "4": "rssi",
          "5": "frequency"
        }
      },
      "ConnexionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ConnexionChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Wifi connection status",
            "desc": "Describes the current wifi connection status of the SkyController.\\n The connection to a wifi network does not guarantee a connection to a drone. To get the drone connection state, use the [device ConnectionChanged](#4_3_1) event.",
            "support": "0903",
            "triggered": "when the wifi connection status changes, or after a [RequestCurrentWifi](#4_1_1) command."
          }
        },
        "ssid": {
          "info": {
            "tagType": "arg",
            "name": "ssid",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Wifi ssid",
          "lookup": {},
          "value": null
        },
        "status": {
          "info": {
            "tagType": "arg",
            "name": "status",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "Wifi status",
          "connected": {
            "info": {
              "tagType": "enum",
              "name": "connected"
            },
            "details": "Connected"
          },
          "error": {
            "info": {
              "tagType": "enum",
              "name": "error"
            },
            "details": "Error"
          },
          "disconnected": {
            "info": {
              "tagType": "enum",
              "name": "disconnected"
            },
            "details": "Disconnected"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "ssid",
          "1": "status"
        }
      },
      "WifiAuthChannelListChanged": {
        "info": {
          "tagType": "cmd",
          "name": "WifiAuthChannelListChanged",
          "id": 2,
          "type": "LIST_ITEM"
        },
        "comment": {
          "info": {
            "title": "Authorized channel list",
            "desc": "Each element represent an authorized wifi channel for the current country regulatory domain.\\n Note that some channels might be only authorized for indoor or outdoor use.\\n The list is complete when the [AllWifiAuthChannelChanged](#4_0_3) event is recieved.",
            "support": "0903",
            "triggered": "by a [WifiAuthChannel](#4_1_4) command."
          }
        },
        "band": {
          "info": {
            "tagType": "arg",
            "name": "band",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The band of this channel : 2.4 GHz or 5 GHz",
          "_2_4ghz": {
            "info": {
              "tagType": "enum",
              "name": "_2_4ghz"
            },
            "details": "2.4 GHz band"
          },
          "_5ghz": {
            "info": {
              "tagType": "enum",
              "name": "_5ghz"
            },
            "details": "5 GHz band"
          },
          "lookup": {},
          "value": null
        },
        "channel": {
          "info": {
            "tagType": "arg",
            "name": "channel",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "The authorized channel",
          "lookup": {},
          "value": null
        },
        "in_or_out": {
          "info": {
            "tagType": "arg",
            "name": "in_or_out",
            "type": "u8",
            "id": 2,
            "bytes": 1
          },
          "details": "Bit 0 is 1 if channel is authorized outside (0 otherwise) Bit 1 is 1 if channel is authorized inside (0 otherwise)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "band",
          "1": "channel",
          "2": "in_or_out"
        }
      },
      "AllWifiAuthChannelChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AllWifiAuthChannelChanged",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Authorized channel list complete",
            "desc": "This event closes the [WifiAuthChannel](#4_1_4) command response. No more [WifiAuthChannelListChanged](#4_0_2) event will be sent after this event.",
            "support": "0903",
            "triggered": "by a [WifiAuthChannel](#4_1_4) command."
          }
        },
        "lookup": {}
      },
      "WifiSignalChanged": {
        "info": {
          "tagType": "cmd",
          "name": "WifiSignalChanged",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Strength of the wifi signal",
            "desc": "This event describes the signal strength for the long range wifi.\\n A zero value is used when the SkyController is not connected to a wifi network.",
            "support": "0903",
            "triggered": "each time the wifi signal changes"
          }
        },
        "level": {
          "info": {
            "tagType": "arg",
            "name": "level",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Level of the signal. Levels are from 0 to 5. 0 is an unknown value. 1 is a weak wifi signal, 5 is the best.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "level"
        }
      },
      "lookup": {
        "0": "WifiList",
        "1": "ConnexionChanged",
        "2": "WifiAuthChannelListChanged",
        "3": "AllWifiAuthChannelChanged",
        "4": "WifiSignalChanged"
      }
    },
    "Wifi": {
      "info": {
        "tagType": "class",
        "name": "Wifi",
        "id": 1
      },
      "details": "Wifi",
      "RequestWifiList": {
        "info": {
          "tagType": "cmd",
          "name": "RequestWifiList",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Request visible wifi list",
            "desc": "After recieving this command, the SkyController will do a network scan to get the wifi list.\\n Communication with the drone is stopped during the network scan, so the controller should avoid sending this command during flight.\\n The controller should clear the local wifi list before sending this command.",
            "support": "0903",
            "result": "Event [WifiList](#4_0_0) is triggered for each visible wifi networks."
          }
        },
        "lookup": {}
      },
      "RequestCurrentWifi": {
        "info": {
          "tagType": "cmd",
          "name": "RequestCurrentWifi",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Request current wifi informations",
            "desc": "This is a synchronization command. The SkyController will automatically send its current wifi info when any data changes, so this command should only be used when connecting, in order to get an initial state.",
            "support": "0903",
            "result": "Event [wifi ConnectionChanged](#4_0_1) is triggered."
          }
        },
        "details": "Request current connected wifi",
        "lookup": {}
      },
      "ConnectToWifi": {
        "info": {
          "tagType": "cmd",
          "name": "ConnectToWifi",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Connect the SkyController to a wifi network",
            "desc": "The network should be a visible network retrieved from the [WifiList](#4_0_0) event.\\n If the network is secured, then the passphrase must be set. For non_secure network, the passphrase argument is ignored.",
            "support": "0903",
            "result": "The SkyController should connect to the network.\\n A [wifi ConnectionChanged](#4_0_1) event is triggered."
          }
        },
        "bssid": {
          "info": {
            "tagType": "arg",
            "name": "bssid",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Wifi bssid",
          "lookup": {},
          "value": null
        },
        "ssid": {
          "info": {
            "tagType": "arg",
            "name": "ssid",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Wifi ssid",
          "lookup": {},
          "value": null
        },
        "passphrase": {
          "info": {
            "tagType": "arg",
            "name": "passphrase",
            "type": "string",
            "id": 2,
            "bytes": 1
          },
          "details": "Wifi passphrase",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "bssid",
          "1": "ssid",
          "2": "passphrase"
        }
      },
      "ForgetWifi": {
        "info": {
          "tagType": "cmd",
          "name": "ForgetWifi",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Forget a wifi network",
            "desc": "Removes the network from the saved network list.\\n If the network is the current network, then the SkyController will be disconnected first.",
            "support": "0903",
            "result": "The next [WifiList](#4_0_0) event will report this network as not saved.\\n If the SkyController is connected to this network, a [wifi ConnectionChanged](#4_0_1) event is triggered"
          }
        },
        "ssid": {
          "info": {
            "tagType": "arg",
            "name": "ssid",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Wifi ssid",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "ssid"
        }
      },
      "WifiAuthChannel": {
        "info": {
          "tagType": "cmd",
          "name": "WifiAuthChannel",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Request the list of authorized channels",
            "desc": "Requests the list of authorized wifi channels for the current country/regulatory domain.\\n These channels are valid for the [AccessPointChannel](#4_9_1) command.",
            "support": "0903",
            "result": "A list of [WifiAuthChannelListChanged](#4_0_2) events will be sent, followed by an [AllWifiAuthChannelChanged](#4_0_3) event."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "RequestWifiList",
        "1": "RequestCurrentWifi",
        "2": "ConnectToWifi",
        "3": "ForgetWifi",
        "4": "WifiAuthChannel"
      }
    },
    "Device": {
      "info": {
        "tagType": "class",
        "name": "Device",
        "id": 2
      },
      "details": "Device Connection commands",
      "RequestDeviceList": {
        "info": {
          "tagType": "cmd",
          "name": "RequestDeviceList",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Request the list of visible devices",
            "desc": "This command is deprecated (The SkyController can only see one device at a time, so a device list is not required), and should not be used.",
            "support": "none",
            "result": "This command is not implemented."
          }
        },
        "lookup": {}
      },
      "RequestCurrentDevice": {
        "info": {
          "tagType": "cmd",
          "name": "RequestCurrentDevice",
          "id": 1,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Request current device informations",
            "desc": "This command is deprecated and should not be used.",
            "support": "none",
            "result": "This command is not implemented"
          }
        },
        "lookup": {}
      },
      "ConnectToDevice": {
        "info": {
          "tagType": "cmd",
          "name": "ConnectToDevice",
          "id": 2,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Connect the SkyController to a given device",
            "desc": "This command is deprecated and should not be used.\\n The SkyController will automatically connect to the first visible device on the current wifi network.",
            "support": "none",
            "result": "This command is not implemented."
          }
        },
        "deviceName": {
          "info": {
            "tagType": "arg",
            "name": "deviceName",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Device name",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "deviceName"
        }
      },
      "lookup": {
        "0": "RequestDeviceList",
        "1": "RequestCurrentDevice",
        "2": "ConnectToDevice"
      }
    },
    "DeviceState": {
      "info": {
        "tagType": "class",
        "name": "DeviceState",
        "id": 3
      },
      "details": "Device state",
      "DeviceList": {
        "info": {
          "tagType": "cmd",
          "name": "DeviceList",
          "id": 0,
          "type": "LIST_ITEM",
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Visible device",
            "desc": "List of visible ARDiscoveryDevices.\\n This event is deprecated and will never be sent by a SkyController",
            "support": "none"
          }
        },
        "name": {
          "info": {
            "tagType": "arg",
            "name": "name",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Device name",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "name"
        }
      },
      "ConnexionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ConnexionChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Connection status",
            "desc": "Status of the connection to a drone.",
            "support": "0903;090f",
            "triggered": "when the connection state to a drone has changed."
          }
        },
        "status": {
          "info": {
            "tagType": "arg",
            "name": "status",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Connection status",
          "notConnected": {
            "info": {
              "tagType": "enum",
              "name": "notConnected"
            },
            "details": "Not Connected"
          },
          "connecting": {
            "info": {
              "tagType": "enum",
              "name": "connecting"
            },
            "details": "Connecting to Drone"
          },
          "connected": {
            "info": {
              "tagType": "enum",
              "name": "connected"
            },
            "details": "Connected to Drone"
          },
          "disconnecting": {
            "info": {
              "tagType": "enum",
              "name": "disconnecting"
            },
            "details": "Disconnecting from Drone"
          },
          "lookup": {},
          "value": null
        },
        "deviceName": {
          "info": {
            "tagType": "arg",
            "name": "deviceName",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Drone name",
          "lookup": {},
          "value": null
        },
        "deviceProductID": {
          "info": {
            "tagType": "arg",
            "name": "deviceProductID",
            "type": "u16",
            "id": 2,
            "bytes": 2
          },
          "details": "Drone product IDentifier",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "status",
          "1": "deviceName",
          "2": "deviceProductID"
        }
      },
      "lookup": {
        "0": "DeviceList",
        "1": "ConnexionChanged"
      }
    },
    "Settings": {
      "info": {
        "tagType": "class",
        "name": "Settings",
        "id": 4
      },
      "details": "Settings commands",
      "AllSettings": {
        "info": {
          "tagType": "cmd",
          "name": "AllSettings",
          "id": 0,
          "timeout": "RETRY"
        },
        "comment": {
          "info": {
            "title": "Ask for all controller's settings",
            "desc": "Request the controller to send all its settings.",
            "support": "0903;090f",
            "result": "The controller will trigger all settings events and will finally trigger [AllSettingsChanged](#4_5_0)."
          }
        },
        "lookup": {}
      },
      "Reset": {
        "info": {
          "tagType": "cmd",
          "name": "Reset",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Reset all settings",
            "desc": "This command is not implemented.",
            "support": "none",
            "result": "All settings are reset, then a [ResetChanged](#4_5_1) event is fired."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "AllSettings",
        "1": "Reset"
      }
    },
    "SettingsState": {
      "info": {
        "tagType": "class",
        "name": "SettingsState",
        "id": 5
      },
      "details": "Settings state from the controller",
      "AllSettingsChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AllSettingsChanged",
          "id": 0,
          "timeout": "RETRY"
        },
        "comment": {
          "info": {
            "title": "AllSettings changed",
            "desc": "All settings have been sent by the controller.",
            "support": "0903;090f",
            "triggered": "when all settings that have been requested by [AllSettings](#4_4_0) are sent."
          }
        },
        "lookup": {}
      },
      "ResetChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ResetChanged",
          "id": 1,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Settings were reset",
            "desc": "This command is not implemented.",
            "support": "none",
            "triggered": "by a [Reset](#4_4_1) command."
          }
        },
        "lookup": {}
      },
      "ProductSerialChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ProductSerialChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Product serial",
            "desc": "The product serial of the controller.",
            "support": "0903;090f",
            "triggered": "during the [AllSettings](#4_4_0) phase."
          }
        },
        "serialNumber": {
          "info": {
            "tagType": "arg",
            "name": "serialNumber",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Serial number (hexadecimal value)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "serialNumber"
        }
      },
      "ProductVariantChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ProductVariantChanged",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Variant of the SkyController",
            "desc": "This event allow differentiation between original (red/blue/yellow) SkyControllers, and the Black Edition SkyControllers.",
            "support": "0903",
            "triggered": "during the [AllSettings](#4_4_0) phase."
          }
        },
        "variant": {
          "info": {
            "tagType": "arg",
            "name": "variant",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Variant of the product",
          "bebop": {
            "info": {
              "tagType": "enum",
              "name": "bebop"
            },
            "details": "SkyController of the bebop generation. (Bebop battery, original key layout, red/blue/yellow)"
          },
          "bebop2": {
            "info": {
              "tagType": "enum",
              "name": "bebop2"
            },
            "details": "SkyController of the bebop2 generation. (Bebop2 battery, updated key layout, black)"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "variant"
        }
      },
      "ProductVersionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ProductVersionChanged",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Product versions",
            "desc": "Software and hardware versions of the controller.",
            "support": "090f",
            "triggered": "during the [AllSettings](#4_4_0) phase."
          }
        },
        "software": {
          "info": {
            "tagType": "arg",
            "name": "software",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Product software version",
          "lookup": {},
          "value": null
        },
        "hardware": {
          "info": {
            "tagType": "arg",
            "name": "hardware",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Product hardware version",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "software",
          "1": "hardware"
        }
      },
      "lookup": {
        "0": "AllSettingsChanged",
        "1": "ResetChanged",
        "2": "ProductSerialChanged",
        "3": "ProductVariantChanged",
        "4": "ProductVersionChanged"
      }
    },
    "Common": {
      "info": {
        "tagType": "class",
        "name": "Common",
        "id": 6
      },
      "details": "Common commands",
      "AllStates": {
        "info": {
          "tagType": "cmd",
          "name": "AllStates",
          "id": 0,
          "timeout": "RETRY"
        },
        "comment": {
          "info": {
            "title": "Ask for all controller's states.",
            "desc": "Request the controller to send all its states.",
            "support": "0903;090f",
            "result": "The controller will trigger all states events and will finally trigger [AllStatesChanged](#4_7_0)."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "AllStates"
      }
    },
    "CommonState": {
      "info": {
        "tagType": "class",
        "name": "CommonState",
        "id": 7
      },
      "details": "Common state from product",
      "AllStatesChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AllStatesChanged",
          "id": 0,
          "timeout": "RETRY"
        },
        "details": "State sent when all product states has been sent",
        "comment": {
          "info": {
            "title": "AllStates changed",
            "desc": "All states have been sent by the controller.",
            "support": "0903;090f",
            "triggered": "when all states that have been requested by [AllStates](#4_6_0) are sent."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "AllStatesChanged"
      }
    },
    "SkyControllerState": {
      "info": {
        "tagType": "class",
        "name": "SkyControllerState",
        "id": 8
      },
      "details": "Sky Controller states",
      "BatteryChanged": {
        "info": {
          "tagType": "cmd",
          "name": "BatteryChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Battery state changed",
            "desc": "The battery percentage has changed.",
            "support": "0903;090f",
            "triggered": "when the battery level changes."
          }
        },
        "percent": {
          "info": {
            "tagType": "arg",
            "name": "percent",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Controller battery: from 0 (empty) to 100 (full charge). Value of 255 when charging.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "percent"
        }
      },
      "GpsFixChanged": {
        "info": {
          "tagType": "cmd",
          "name": "GpsFixChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "GPS Fix gained/lost",
            "desc": "The SkyController GPS has gained or lost the fix. If the fix is lost, thent the [GpsPositionChanged](#4_8_2) event will contain invalid values for the position.",
            "support": "0903",
            "triggered": "when the GPS accuracy goes under/over a certain level."
          }
        },
        "fixed": {
          "info": {
            "tagType": "arg",
            "name": "fixed",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "SkyController fixed",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "fixed"
        }
      },
      "GpsPositionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "GpsPositionChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "SkyController position/heading changed",
            "desc": "The SkyController position or heading values changed.\\n Some of the values can be invalid and should be ignored.",
            "support": "0903",
            "triggered": "each time the position or heading of the SkyController is updated, or when a data becomes (un)available."
          }
        },
        "latitude": {
          "info": {
            "tagType": "arg",
            "name": "latitude",
            "type": "double",
            "id": 0,
            "bytes": 1
          },
          "details": "SkyController latitude (500. if not available)",
          "lookup": {},
          "value": null
        },
        "longitude": {
          "info": {
            "tagType": "arg",
            "name": "longitude",
            "type": "double",
            "id": 1,
            "bytes": 1
          },
          "details": "SkyController longiture (500. if not available)",
          "lookup": {},
          "value": null
        },
        "altitude": {
          "info": {
            "tagType": "arg",
            "name": "altitude",
            "type": "double",
            "id": 2,
            "bytes": 1
          },
          "details": "Altitude (in meters) above sea level. Only meaningful if latitude and longiture are available",
          "lookup": {},
          "value": null
        },
        "heading": {
          "info": {
            "tagType": "arg",
            "name": "heading",
            "type": "float",
            "id": 3,
            "bytes": 4
          },
          "details": "SkyController heading relative to magnetic north (500.f if not available)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "latitude",
          "1": "longitude",
          "2": "altitude",
          "3": "heading"
        }
      },
      "BatteryState": {
        "info": {
          "tagType": "cmd",
          "name": "BatteryState",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Battery state",
            "desc": "The state of the controller battery",
            "support": "090f",
            "triggered": "when the controller battery state has changed."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Current battery state",
          "charging": {
            "info": {
              "tagType": "enum",
              "name": "charging"
            },
            "details": "Battery is charging"
          },
          "charged": {
            "info": {
              "tagType": "enum",
              "name": "charged"
            },
            "details": "Battery is fully charged"
          },
          "discharging": {
            "info": {
              "tagType": "enum",
              "name": "discharging"
            },
            "details": "Battery is discharging (normal case when on and unplugged)"
          },
          "discharging_low": {
            "info": {
              "tagType": "enum",
              "name": "discharging_low"
            },
            "details": "Battery is low (Can still work for a few minutes)"
          },
          "discharging_critical": {
            "info": {
              "tagType": "enum",
              "name": "discharging_critical"
            },
            "details": "Battery is critically low (the product will automatically shut down if not plugged)"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state"
        }
      },
      "AttitudeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AttitudeChanged",
          "id": 4,
          "buffer": "NON_ACK"
        },
        "comment": {
          "info": {
            "title": "Attitude",
            "desc": "SkyController Attitude in north_east_down (NED) coordinate system.\\n Attitude is provided as a quaternion.",
            "support": "090f",
            "triggered": "when the SkyController attitude changes."
          }
        },
        "q0": {
          "info": {
            "tagType": "arg",
            "name": "q0",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "SkyController Attitude q0 (quaternion scalar part)",
          "lookup": {},
          "value": null
        },
        "q1": {
          "info": {
            "tagType": "arg",
            "name": "q1",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "SkyController Attitude q1 (quaternion vector part)",
          "lookup": {},
          "value": null
        },
        "q2": {
          "info": {
            "tagType": "arg",
            "name": "q2",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "SkyController Attitude q2 (quaternion vector part)",
          "lookup": {},
          "value": null
        },
        "q3": {
          "info": {
            "tagType": "arg",
            "name": "q3",
            "type": "float",
            "id": 3,
            "bytes": 4
          },
          "details": "SkyController Attitude q3 (quaternion vector part)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "q0",
          "1": "q1",
          "2": "q2",
          "3": "q3"
        }
      },
      "lookup": {
        "0": "BatteryChanged",
        "1": "GpsFixChanged",
        "2": "GpsPositionChanged",
        "3": "BatteryState",
        "4": "AttitudeChanged"
      }
    },
    "AccessPointSettings": {
      "info": {
        "tagType": "class",
        "name": "AccessPointSettings",
        "id": 9
      },
      "details": "AccessPoint settings commands",
      "AccessPointSSID": {
        "info": {
          "tagType": "cmd",
          "name": "AccessPointSSID",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Set access point SSID",
            "desc": "Set the SkyController access point SSID.\\n The name will be checked, and can be modified before application. Use the [AccessPointSSIDChanged](#4_10_0) event to get the applied network name.",
            "support": "0903",
            "result": "The network name will change (which will likely disconnect the controller), then an [AccessPointSSIDChanged](#4_10_0) event will be sent"
          }
        },
        "ssid": {
          "info": {
            "tagType": "arg",
            "name": "ssid",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "AccessPoint SSID",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "ssid"
        }
      },
      "AccessPointChannel": {
        "info": {
          "tagType": "cmd",
          "name": "AccessPointChannel",
          "id": 1,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Set access point channel",
            "desc": "Set the SkyController access point channel.\\n The channel will be checked, and can be modified before application. Use the [AccessPointChannelChanged](#4_10_1) event to get the applied channel.\\n The list of authorized channels for the current country can be retrived with the [WifiAuthChannel](#4_1_4) command.\\n This command is deprecated. Use the [WifiSelection](#4_9_2) command instead.",
            "support": "0903",
            "result": "The network channel will change (which will likely disconnect the controller), then an [AccessPointChannelChanged](#4_10_1) event will be sent"
          }
        },
        "channel": {
          "info": {
            "tagType": "arg",
            "name": "channel",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "AccessPoint Channel",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "channel"
        }
      },
      "WifiSelection": {
        "info": {
          "tagType": "cmd",
          "name": "WifiSelection",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Set access point band/channel",
            "desc": "Set the SkyController access point channel.\\n The channel will be checked, and can be modified before application. Use the [WifiSelectionChanged](#4_10_2) event to get the applied channel/band.\\n The list of authorized channels for the current country can be retrived with the [WifiAuthChannel](#4_1_4) command.\\n This command is deprecated. Use the [WifiSelection](#4_9_2) command instead.",
            "support": "0903",
            "result": "The network channel will change (which will likely disconnect the controller), then a [WifiSelectionChanged](#4_10_2) event will be sent"
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of wifi selection (only manual at the moment)",
          "manual": {
            "info": {
              "tagType": "enum",
              "name": "manual"
            },
            "details": "Manual selection"
          },
          "lookup": {},
          "value": null
        },
        "band": {
          "info": {
            "tagType": "arg",
            "name": "band",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "The allowed band : 2.4 Ghz or 5 Ghz",
          "_2_4ghz": {
            "info": {
              "tagType": "enum",
              "name": "_2_4ghz"
            },
            "details": "2.4 GHz band"
          },
          "_5ghz": {
            "info": {
              "tagType": "enum",
              "name": "_5ghz"
            },
            "details": "5 GHz band"
          },
          "lookup": {},
          "value": null
        },
        "channel": {
          "info": {
            "tagType": "arg",
            "name": "channel",
            "type": "u8",
            "id": 2,
            "bytes": 1
          },
          "details": "The channel",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type",
          "1": "band",
          "2": "channel"
        }
      },
      "lookup": {
        "0": "AccessPointSSID",
        "1": "AccessPointChannel",
        "2": "WifiSelection"
      }
    },
    "AccessPointSettingsState": {
      "info": {
        "tagType": "class",
        "name": "AccessPointSettingsState",
        "id": 10
      },
      "details": "AccessPoint settings state from product",
      "AccessPointSSIDChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AccessPointSSIDChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "The access point SSID was changed",
            "desc": "Changing the SSID will often (if not always) trigger a disconnection of the controller, so this event will only be recieved during the initial connexion phase.",
            "support": "0903",
            "triggered": "by an [AccessPointSSID](#4_9_0) command."
          }
        },
        "ssid": {
          "info": {
            "tagType": "arg",
            "name": "ssid",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "AccessPoint SSID",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "ssid"
        }
      },
      "AccessPointChannelChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AccessPointChannelChanged",
          "id": 1,
          "deprecated": "true"
        },
        "details": "State sent when AccessPoint channel has been sent",
        "comment": {
          "info": {
            "title": "The access point channel was changed",
            "desc": "This command is deprecated, as the returned channel number does not contain information about the wifi band (2.4GHz or 5GHz). Use the [WifiSelectionChanged](#4_10_2) event instead",
            "support": "0903",
            "triggered": "by an [AccessPointChannel](#4_9_1) command"
          }
        },
        "channel": {
          "info": {
            "tagType": "arg",
            "name": "channel",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "AccessPoint Channel",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "channel"
        }
      },
      "WifiSelectionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "WifiSelectionChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "The access point channel/band was changed",
            "desc": "Changing the channel will often (if not always) trigger a disconnection of the controller, so this event will only be recieved during the initial connexion phase.",
            "support": "0903",
            "triggered": "by an [WifiSelection](#4_9_2) command"
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of wifi selection (only manual at the moment)",
          "manual": {
            "info": {
              "tagType": "enum",
              "name": "manual"
            },
            "details": "Manual selection"
          },
          "lookup": {},
          "value": null
        },
        "band": {
          "info": {
            "tagType": "arg",
            "name": "band",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "The allowed band : 2.4 Ghz or 5 Ghz",
          "_2_4ghz": {
            "info": {
              "tagType": "enum",
              "name": "_2_4ghz"
            },
            "details": "2.4 GHz band"
          },
          "_5ghz": {
            "info": {
              "tagType": "enum",
              "name": "_5ghz"
            },
            "details": "5 GHz band"
          },
          "lookup": {},
          "value": null
        },
        "channel": {
          "info": {
            "tagType": "arg",
            "name": "channel",
            "type": "u8",
            "id": 2,
            "bytes": 1
          },
          "details": "The channel",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type",
          "1": "band",
          "2": "channel"
        }
      },
      "lookup": {
        "0": "AccessPointSSIDChanged",
        "1": "AccessPointChannelChanged",
        "2": "WifiSelectionChanged"
      }
    },
    "Camera": {
      "info": {
        "tagType": "class",
        "name": "Camera",
        "id": 11
      },
      "details": "Ask the drone to move camera",
      "ResetOrientation": {
        "info": {
          "tagType": "cmd",
          "name": "ResetOrientation",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Reset the camera orientation",
            "desc": "This command is deprecated. The same effect can be achieved by sending a [CameraOrientation](#1_1_0) command with values retrieved from the [defaultCameraOrientation](#1_25_1) event.",
            "support": "0903",
            "result": "The drone will reset its camera orientation"
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "ResetOrientation"
      }
    },
    "GamepadInfos": {
      "info": {
        "tagType": "class",
        "name": "GamepadInfos",
        "id": 18
      },
      "details": "Request infos about the gamepad of the SkyController",
      "getGamepadControls": {
        "info": {
          "tagType": "cmd",
          "name": "getGamepadControls",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Get the SkyController buttons and axis list",
            "desc": "This commands allow the application to get a representation of all the mappable controls on the SkyController. Some physical controls might be absent from this list because their function can not be changed.",
            "support": "0903",
            "result": "The SkyController will send a list of [GamepadControl](#4_19_0) events, describing all available controls, followed by an [allGamepadControlsSent](#4_19_1) event."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "getGamepadControls"
      }
    },
    "GamepadInfosState": {
      "info": {
        "tagType": "class",
        "name": "GamepadInfosState",
        "id": 19
      },
      "details": "Informations about the gamepad of the SkyController",
      "gamepadControl": {
        "info": {
          "tagType": "cmd",
          "name": "gamepadControl",
          "id": 0,
          "type": "LIST_ITEM"
        },
        "comment": {
          "info": {
            "title": "Gamepad control description",
            "desc": "Each gamepad control element represents a mappable control on the SkyController. The control can be either a button or an analog axis.\\n Each control have a human_readable english name describing its physical position on the SkyController.",
            "support": "0903",
            "triggered": "by a [getGamepadControls](#4_18_0) command."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type (axis/button) of the control",
          "axis": {
            "info": {
              "tagType": "enum",
              "name": "axis"
            },
            "details": "An analog axis (one of the 4 joysticks)"
          },
          "button": {
            "info": {
              "tagType": "enum",
              "name": "button"
            },
            "details": "A button (including small joystick clicks)"
          },
          "lookup": {},
          "value": null
        },
        "id": {
          "info": {
            "tagType": "arg",
            "name": "id",
            "type": "i32",
            "id": 1,
            "bytes": 4
          },
          "details": "The button or axis id A button and an axis can have the same ID, but their type is different",
          "lookup": {},
          "value": null
        },
        "name": {
          "info": {
            "tagType": "arg",
            "name": "name",
            "type": "string",
            "id": 2,
            "bytes": 1
          },
          "details": "Display name for the control",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type",
          "1": "id",
          "2": "name"
        }
      },
      "allGamepadControlsSent": {
        "info": {
          "tagType": "cmd",
          "name": "allGamepadControlsSent",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "End of the GamepadControl list",
            "desc": "This event marks the end of the GamepadControl list",
            "support": "0903",
            "triggered": "by a [getGamepadControls](#4_18_0) command, after sending all the [GamepadControl](#4_19_0) events."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "gamepadControl",
        "1": "allGamepadControlsSent"
      }
    },
    "ButtonMappings": {
      "info": {
        "tagType": "class",
        "name": "ButtonMappings",
        "id": 12
      },
      "details": "Controls the button mappings of the SkyController",
      "getCurrentButtonMappings": {
        "info": {
          "tagType": "cmd",
          "name": "getCurrentButtonMappings",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Get the current button mappings",
            "desc": "The SkyController will send its full button mapping. This command is mainly useful for initial synchronization, as every change to the button mapping (via the [setButtonMapping](#4_12_2) command) will trigger [currentButtonMappings](#4_13_0) events.",
            "support": "0903",
            "result": "The SkyController will send a full list of [currentButtonMappings](#4_13_0) events, followed by an [allCurrentButtonMappingsSent](#4_13_1) event."
          }
        },
        "lookup": {}
      },
      "getAvailableButtonMappings": {
        "info": {
          "tagType": "cmd",
          "name": "getAvailableButtonMappings",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Get the available button mappings",
            "desc": "The SkyController will send all the available action that can be mapped on buttons.\\n As this list is static, the controller only need to request this information once.",
            "support": "0903",
            "result": "The SkyController will send a list of [availableButtonMappings](#4_13_2) events, followed by an [allAvailableButtonsMappingsSent](#4_13_3) event."
          }
        },
        "lookup": {}
      },
      "setButtonMapping": {
        "info": {
          "tagType": "cmd",
          "name": "setButtonMapping",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Set a mapping for a button",
            "desc": "Any previous mapping for the given button will be removed, as a button can only be mapped to one action.\\n To unmap a button, a NO_ACTION mapping can be used (see the [availableButtonMappings](#4_13_2) event).\\n Some actions can not be mapped to two different buttons at the same time. In this case, the first button will automatically be set to NO_ACTION, and the corresponding [currentButtonMappings](#4_13_0) event will be fired.",
            "support": "0903",
            "result": "The SkyController will send a list of [currentButtonMappings](#4_13_0) events, describing the changes to the mapping table, followed by an [allCurrentButtonMappingsSent](#4_13_1) event."
          }
        },
        "key_id": {
          "info": {
            "tagType": "arg",
            "name": "key_id",
            "type": "i32",
            "id": 0,
            "bytes": 4
          },
          "details": "The keycode to map",
          "lookup": {},
          "value": null
        },
        "mapping_uid": {
          "info": {
            "tagType": "arg",
            "name": "mapping_uid",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "The mapping to associate with the key",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "key_id",
          "1": "mapping_uid"
        }
      },
      "defaultButtonMapping": {
        "info": {
          "tagType": "cmd",
          "name": "defaultButtonMapping",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Reset the button mappings to the default value",
            "desc": "The default values can change between software versions.\\n The default values are different for Black Edition SkyControllers",
            "support": "0903",
            "result": "The SkyController will send a list of [currentButtonMappings](#4_13_0) events, describing the changes to the mapping table, followed by an [allCurrentButtonMappingsSent](#4_13_1) event."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "getCurrentButtonMappings",
        "1": "getAvailableButtonMappings",
        "2": "setButtonMapping",
        "3": "defaultButtonMapping"
      }
    },
    "ButtonMappingsState": {
      "info": {
        "tagType": "class",
        "name": "ButtonMappingsState",
        "id": 13
      },
      "details": "State of the button mappings of the SkyController",
      "currentButtonMappings": {
        "info": {
          "tagType": "cmd",
          "name": "currentButtonMappings",
          "id": 0,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Button to Action mapping",
            "desc": "The mapping maps a key_id (as found in [gamepadControl](#4_19_0) events) to a mapping_uid (as found in the [availableButtonMappings](#4_13_2) events).\\n A special mapping (NO_ACTION) is attached to unmapped buttons.",
            "support": "0903",
            "triggered": "by a [getCurrentButtonMappings](#4_12_0) command for complete synchronization, or by either a [setButtonMapping](#4_12_2) or a [defaultButtonMapping](#4_12_3) command, only for changed mappings."
          }
        },
        "key_id": {
          "info": {
            "tagType": "arg",
            "name": "key_id",
            "type": "i32",
            "id": 0,
            "bytes": 4
          },
          "details": "The keycode mapped",
          "lookup": {},
          "value": null
        },
        "mapping_uid": {
          "info": {
            "tagType": "arg",
            "name": "mapping_uid",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "The mapping associated",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "key_id",
          "1": "mapping_uid"
        }
      },
      "allCurrentButtonMappingsSent": {
        "info": {
          "tagType": "cmd",
          "name": "allCurrentButtonMappingsSent",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "End of the button mapping list",
            "desc": "Sent by the SkyController to notify the end of a [currentButtonMappings](#4_13_0) events list.\\n If the list is empty (e.g. the controller sent a [setButtonMapping](#4_12_2) command which made no change to the mapping table), then this command will be sent without any [currentButtonMappings](#4_13_0) event preceding it. This gives the controller a reliable synchronization point when editing mappings.",
            "support": "0903",
            "triggered": "by a [getCurrentButtonMappings](#4_12_0), [setButtonMapping](#4_12_2) or [defaultButtonMapping](#4_12_3) command, to notify the end of list."
          }
        },
        "lookup": {}
      },
      "availableButtonMappings": {
        "info": {
          "tagType": "cmd",
          "name": "availableButtonMappings",
          "id": 2,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Action mappable on a button",
            "desc": "Each action that can be mapped on a button is identified by its mapping_uid, which will be used in the [setButtonMapping](#4_12_2) and [currentButtonMappings](#4_13_0) commands.\\n The name is a human readable string, in english, describing the action.\\n A special action named NO_ACTION serves as the unmap action. This action can be bound to multiple buttons to disable them.\\n An [allAvailableButtonsMappingsSent](#4_13_3) event is sent at the end of the list.",
            "support": "0903",
            "triggered": "by a [getAvailableButtonMappings](#4_12_1) command."
          }
        },
        "mapping_uid": {
          "info": {
            "tagType": "arg",
            "name": "mapping_uid",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "The mapping UID (used in communication with the SkyController)",
          "lookup": {},
          "value": null
        },
        "name": {
          "info": {
            "tagType": "arg",
            "name": "name",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Display name for the user",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mapping_uid",
          "1": "name"
        }
      },
      "allAvailableButtonsMappingsSent": {
        "info": {
          "tagType": "cmd",
          "name": "allAvailableButtonsMappingsSent",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "End of the available button actions list",
            "desc": "Sent by the SkyController to notify the end of a [availableButtonMappings](#4_13_2) events list.",
            "support": "0903",
            "triggered": "by a [getAvailableButtonMappings](#4_12_1) command, to notify the end of list."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "currentButtonMappings",
        "1": "allCurrentButtonMappingsSent",
        "2": "availableButtonMappings",
        "3": "allAvailableButtonsMappingsSent"
      }
    },
    "AxisMappings": {
      "info": {
        "tagType": "class",
        "name": "AxisMappings",
        "id": 14
      },
      "details": "Controls the axis mappings of the SkyController",
      "getCurrentAxisMappings": {
        "info": {
          "tagType": "cmd",
          "name": "getCurrentAxisMappings",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Get the current axis mappings",
            "desc": "The SkyController will send its full axis mapping. This command is mainly useful for initial synchronization, as every change to the axis mapping (via the [setAxisMapping](#4_14_2) command) will trigger [currentAxisMappings](#4_15_0) events.",
            "support": "0903",
            "result": "The SkyController will send a full list of [currentAxisMappings](#4_15_0) events, followed by an [allCurrentAxisMappingsSent](#4_15_1) event."
          }
        },
        "lookup": {}
      },
      "getAvailableAxisMappings": {
        "info": {
          "tagType": "cmd",
          "name": "getAvailableAxisMappings",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Get the available axis mappings",
            "desc": "The SkyController will send all the available action that can be mapped on axes.\\n As this list is static, the controller only need to request this information once.",
            "support": "0903",
            "result": "The SkyController will send a list of [availableAxisMappings](#4_15_2) events, followed by an [allAvailableAxissMappingsSent](#4_15_3) event."
          }
        },
        "lookup": {}
      },
      "setAxisMapping": {
        "info": {
          "tagType": "cmd",
          "name": "setAxisMapping",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Set a mapping for a axis",
            "desc": "Any previous mapping for the given axis will be removed, as a axis can only be mapped to one action.\\n To unmap a axis, a NO_ACTION mapping can be used (see the [availableAxisMappings](#4_15_2) event).\\n Some actions can not be mapped to two different axes at the same time. In this case, the first axis will automatically be set to NO_ACTION, and the corresponding [currentAxisMappings](#4_15_0) event will be fired.",
            "support": "0903",
            "result": "The SkyController will send a list of [currentAxisMappings](#4_15_0) events, describing the changes to the mapping table, followed by an [allCurrentAxisMappingsSent](#4_15_1) event."
          }
        },
        "axis_id": {
          "info": {
            "tagType": "arg",
            "name": "axis_id",
            "type": "i32",
            "id": 0,
            "bytes": 4
          },
          "details": "The axiscode to map",
          "lookup": {},
          "value": null
        },
        "mapping_uid": {
          "info": {
            "tagType": "arg",
            "name": "mapping_uid",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "The mapping to associate with the axis",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "axis_id",
          "1": "mapping_uid"
        }
      },
      "defaultAxisMapping": {
        "info": {
          "tagType": "cmd",
          "name": "defaultAxisMapping",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Reset the axis mappings to the default value",
            "desc": "The default values can change between software versions.",
            "support": "0903",
            "result": "The SkyController will send a list of [currentAxisMappings](#4_15_0) events, describing the changes to the mapping table, followed by an [allCurrentAxisMappingsSent](#4_15_1) event."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "getCurrentAxisMappings",
        "1": "getAvailableAxisMappings",
        "2": "setAxisMapping",
        "3": "defaultAxisMapping"
      }
    },
    "AxisMappingsState": {
      "info": {
        "tagType": "class",
        "name": "AxisMappingsState",
        "id": 15
      },
      "details": "State of the axis mappings of the SkyController",
      "currentAxisMappings": {
        "info": {
          "tagType": "cmd",
          "name": "currentAxisMappings",
          "id": 0,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Axis to Action mapping",
            "desc": "The mapping maps an axis_id (as found in [gamepadControl](#4_19_0) events) to a mapping_uid (as found in the [availableAxisMappings](#4_15_2) events).\\n A special mapping (NO_ACTION) is attached to unmapped axes.",
            "support": "0903",
            "triggered": "by a [getCurrentAxisMappings](#4_14_0) command for complete synchronization, or by either a [setAxisMapping](#4_14_2) or [defaultAxisMapping](#4_14_3) command, only for changed mappings."
          }
        },
        "axis_id": {
          "info": {
            "tagType": "arg",
            "name": "axis_id",
            "type": "i32",
            "id": 0,
            "bytes": 4
          },
          "details": "The axiscode mapped",
          "lookup": {},
          "value": null
        },
        "mapping_uid": {
          "info": {
            "tagType": "arg",
            "name": "mapping_uid",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "The mapping associated",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "axis_id",
          "1": "mapping_uid"
        }
      },
      "allCurrentAxisMappingsSent": {
        "info": {
          "tagType": "cmd",
          "name": "allCurrentAxisMappingsSent",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "End of the axis mapping list",
            "desc": "Sent by the SkyController to notify the end of a [currentAxisMappings](#4_15_0) events list.\\n If the list is empty (e.g. the controller sent a [setAxisMapping](#4_14_2) command which made no change to the mapping table), then this command will be sent without any [currentAxisMappings](#4_15_0) event preceding it. This gives the controller a reliable synchronization point when editing mappings.",
            "support": "0903",
            "triggered": "by a [getCurrentAxisMappings](#4_14_0), [setAxisMapping](#4_14_2) or [defaultAxisMapping](#4_14_3) command, to notify the end of list."
          }
        },
        "lookup": {}
      },
      "availableAxisMappings": {
        "info": {
          "tagType": "cmd",
          "name": "availableAxisMappings",
          "id": 2,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Action mappable on an axis",
            "desc": "Each action that can be mapped on an axis is identified by its mapping_uid, which will be used in the [setAxisMapping](#4_14_2) and [currentAxisMappings](#4_15_0) commands.\\n The name is a human readable string, in english, describing the action.\\n A special action named NO_ACTION serves as the unmap action. This action can be bound to multiple axes to disable them.\\n An [allAvailableAxissMappingsSent](#4_15_3) event is sent at the end of the list.",
            "support": "0903",
            "triggered": "by a [getAvailableAxisMappings](#4_14_1) command."
          }
        },
        "mapping_uid": {
          "info": {
            "tagType": "arg",
            "name": "mapping_uid",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "The mapping UID (used in communication with the SkyController)",
          "lookup": {},
          "value": null
        },
        "name": {
          "info": {
            "tagType": "arg",
            "name": "name",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Display name for the user",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mapping_uid",
          "1": "name"
        }
      },
      "allAvailableAxisMappingsSent": {
        "info": {
          "tagType": "cmd",
          "name": "allAvailableAxisMappingsSent",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "End of the available axis actions list",
            "desc": "Sent by the SkyController to notify the end of a [availableAxisMappings](#4_15_2) events list.",
            "support": "0903",
            "triggered": "by a [getAvailableAxisMappings](#4_14_1) command."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "currentAxisMappings",
        "1": "allCurrentAxisMappingsSent",
        "2": "availableAxisMappings",
        "3": "allAvailableAxisMappingsSent"
      }
    },
    "AxisFilters": {
      "info": {
        "tagType": "class",
        "name": "AxisFilters",
        "id": 16
      },
      "details": "Controls the axis filters of the SkyController",
      "getCurrentAxisFilters": {
        "info": {
          "tagType": "cmd",
          "name": "getCurrentAxisFilters",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Get the current axis filters",
            "desc": "The SkyController will send its full axis filters map. This command is mainly useful for initial synchronization, as every change to the filters map (via the [setAxisFilter](#4_16_2) command) will trigger [currentAxisFilters](#4_17_0) events.",
            "support": "0903",
            "result": "The SkyController will send a full list of [currentAxisFilters](#4_17_0) events, followed by an [allCurrentFiltersSent](#4_17_1) event."
          }
        },
        "lookup": {}
      },
      "getPresetAxisFilters": {
        "info": {
          "tagType": "cmd",
          "name": "getPresetAxisFilters",
          "id": 1,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Get the available preset axis filters",
            "desc": "The preset list is empty and will never be filled, so this command is flagged as deprecated.",
            "support": "0903",
            "result": "As the preset list is empty, the SkyController will just send an [allPresetFiltersSent](#4_17_3) event."
          }
        },
        "lookup": {}
      },
      "setAxisFilter": {
        "info": {
          "tagType": "cmd",
          "name": "setAxisFilter",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Set a filter for an axis",
            "desc": "A filter modifies the response curve of an axis.\\n As the preset filters list is empty, all filters are to be sent using the builder syntax.\\n \\n The builder syntax supports two types of filters: Multilinear and Exponential.\\n \\n Multilinear filters create response curves made of multiple linear segments_\\n * The default filter (ARMF;) is purely linear and create a single segment from the two implicit `[_1; _1]` and `[1; 1]` points.\\n * Additionnal points can be added to the filter with the following syntax: `ARMF;x1>y1;...;xN>yN;`, where all numbers are floating point numbers in range `[_1; 1]`.\\n * Additionnal points **must** respect the following constraints : `x(N)>x(N_1)` and `y(N)>=y(N_1)`.\\n \\n Exponential filters_\\n * The syntax is `ARXF;CPx;CPy;`, where CPx and CPy are floating point numbers in range `[0; 1]`.\\n * Best results are achieved when `CPx + CPy == 1` and `CPx > CPy`.\\n * If the control point is on the diagonal (i.e. `CPx == CPy`), then the resulting filter will be linear.",
            "support": "0903",
            "result": "The SkyController will send a list of [currentAxisFilters](#4_17_0) events, describing the changes to the filters table, followed by an [allCurrentFiltersSent](#4_17_1) event."
          }
        },
        "axis_id": {
          "info": {
            "tagType": "arg",
            "name": "axis_id",
            "type": "i32",
            "id": 0,
            "bytes": 4
          },
          "details": "The axiscode to filter",
          "lookup": {},
          "value": null
        },
        "filter_uid_or_builder": {
          "info": {
            "tagType": "arg",
            "name": "filter_uid_or_builder",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "The mapping preset to associate with the axis (Or a string to build a new one)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "axis_id",
          "1": "filter_uid_or_builder"
        }
      },
      "defaultAxisFilters": {
        "info": {
          "tagType": "cmd",
          "name": "defaultAxisFilters",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Reset the axis filters to the default value",
            "desc": "The default values can change between software versions.",
            "support": "0903",
            "result": "The SkyController will send a list of [currentAxisFilters](#4_17_0) events, describing the changes to the filters table, followed by an [allCurrentFiltersSent](#4_17_1) event."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "getCurrentAxisFilters",
        "1": "getPresetAxisFilters",
        "2": "setAxisFilter",
        "3": "defaultAxisFilters"
      }
    },
    "AxisFiltersState": {
      "info": {
        "tagType": "class",
        "name": "AxisFiltersState",
        "id": 17
      },
      "details": "State of the axis filters of the SkyController",
      "currentAxisFilters": {
        "info": {
          "tagType": "cmd",
          "name": "currentAxisFilters",
          "id": 0,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "A filter set on an axis",
            "desc": "As the preset filters list is empty, all the filters are transmitted using the builder syntax. See the [setAxisFilter](#4_16_2) command documentation for details about the builder syntax.",
            "support": "0903",
            "triggered": "by a [getCurrentAxisFilters](#4_16_0) command for complete synchronization, or after either a [setAxisFilter](#4_16_2) or [defaultAxisFilters](#4_16_3) command, only for changed filters."
          }
        },
        "axis_id": {
          "info": {
            "tagType": "arg",
            "name": "axis_id",
            "type": "i32",
            "id": 0,
            "bytes": 4
          },
          "details": "The axiscode filtered",
          "lookup": {},
          "value": null
        },
        "filter_uid_or_builder": {
          "info": {
            "tagType": "arg",
            "name": "filter_uid_or_builder",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "The filter associated",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "axis_id",
          "1": "filter_uid_or_builder"
        }
      },
      "allCurrentFiltersSent": {
        "info": {
          "tagType": "cmd",
          "name": "allCurrentFiltersSent",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "End of the axis filters list",
            "desc": "Sent by the SkyController to notify the end of a [currentAxisFilters](#4_17_0) events list.\\n If the list is empty (e.g. the controller sent a [setAxisFilter](#4_16_2) command which made no change to the filters table), then this command will be sent without any [currentAxisFilters](#4_17_0) event preceding it. This gives the controller a reliable synchronization point when editing mappings.",
            "support": "0903",
            "triggered": "by a [getCurrentAxisFilters](#4_16_0), [setAxisFilter](#4_16_2) or [defaultAxisFilters](#4_16_3) command, to notify the end of list."
          }
        },
        "lookup": {}
      },
      "presetAxisFilters": {
        "info": {
          "tagType": "cmd",
          "name": "presetAxisFilters",
          "id": 2,
          "type": "MAP_ITEM",
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Predefined axis filters",
            "desc": "No preset axis filter is defined on the SkyController, so this command will never be sent by the firmware.",
            "support": "0903"
          }
        },
        "filter_uid": {
          "info": {
            "tagType": "arg",
            "name": "filter_uid",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "The filter UID (used in communication with the SkyController)",
          "lookup": {},
          "value": null
        },
        "name": {
          "info": {
            "tagType": "arg",
            "name": "name",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Display name for the user",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "filter_uid",
          "1": "name"
        }
      },
      "allPresetFiltersSent": {
        "info": {
          "tagType": "cmd",
          "name": "allPresetFiltersSent",
          "id": 3,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "End of the preset axis filters list",
            "desc": "As the SkyController will never send a [presetAxisFilters](#4_17_2) event, this is the only event sent when the deprecated [getPresetAxisFilters](#4_16_1) command is recieved.",
            "support": "0903",
            "triggered": "by a [getPresetAxisFilters](#4_16_1) command."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "currentAxisFilters",
        "1": "allCurrentFiltersSent",
        "2": "presetAxisFilters",
        "3": "allPresetFiltersSent"
      }
    },
    "CoPiloting": {
      "info": {
        "tagType": "class",
        "name": "CoPiloting",
        "id": 20
      },
      "details": "Configuration of the co_piloting feature",
      "setPilotingSource": {
        "info": {
          "tagType": "cmd",
          "name": "setPilotingSource",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Set piloting source",
            "desc": "Change who is piloting the drone.\\n By default, the SkyController is the source of piloting commands, and any connected application (i.e. FreeFlight) can not send [piloting commands](#1_0_2) commands directly to the drone. When the piloting source is set to Controller, the SkyController will forward the controller commands to the drone, and won't send any commands itself.\\n The piloting source is automatically reset to SkyController when the controller is disconnected.",
            "support": "0903;090f",
            "result": "The SkyController will sent a [pilotingSource](#4_21_0) event."
          }
        },
        "source": {
          "info": {
            "tagType": "arg",
            "name": "source",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The new piloting source",
          "SkyController": {
            "info": {
              "tagType": "enum",
              "name": "SkyController"
            },
            "details": "Use the SkyController joysticks"
          },
          "Controller": {
            "info": {
              "tagType": "enum",
              "name": "Controller"
            },
            "details": "Use the Tablet (or smartphone, or whatever) controls Disables the SkyController joysticks"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "source"
        }
      },
      "lookup": {
        "0": "setPilotingSource"
      }
    },
    "CoPilotingState": {
      "info": {
        "tagType": "class",
        "name": "CoPilotingState",
        "id": 21
      },
      "details": "State of the co_piloting feature",
      "pilotingSource": {
        "info": {
          "tagType": "cmd",
          "name": "pilotingSource",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Piloting source",
            "desc": "Define who is piloting the drone.\\n The piloting source is reset to SkyController when the controller disconnects.",
            "support": "0903;090f",
            "triggered": "by a [setPilotingSource](#4_20_0) command"
          }
        },
        "source": {
          "info": {
            "tagType": "arg",
            "name": "source",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The source",
          "SkyController": {
            "info": {
              "tagType": "enum",
              "name": "SkyController"
            },
            "details": "Use the SkyController joysticks"
          },
          "Controller": {
            "info": {
              "tagType": "enum",
              "name": "Controller"
            },
            "details": "Use the Tablet (or smartphone, or whatever) controls Disables the SkyController joysticks"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "source"
        }
      },
      "lookup": {
        "0": "pilotingSource"
      }
    },
    "Calibration": {
      "info": {
        "tagType": "class",
        "name": "Calibration",
        "id": 22
      },
      "details": "Commands related to the SkyController sensors calibration",
      "enableMagnetoCalibrationQualityUpdates": {
        "info": {
          "tagType": "cmd",
          "name": "enableMagnetoCalibrationQualityUpdates",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Enable Magneto calibration quality updates",
            "desc": "Asks the SkyController to send (or not) the magneto calibration quality updates.\\n The [MagnetoCalibrationState](#4_23_0) event will always be sent when the status parameters changes, regardless of this setting.",
            "support": "0903;090f",
            "result": "The SkyController will send a [MagnetoCalibrationQualityUpdatesState](#4_23_1) event."
          }
        },
        "enable": {
          "info": {
            "tagType": "arg",
            "name": "enable",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Flag to enable the feature: 1 = Enable quality updates 0 = Disable quality updates",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "enable"
        }
      },
      "lookup": {
        "0": "enableMagnetoCalibrationQualityUpdates"
      }
    },
    "CalibrationState": {
      "info": {
        "tagType": "class",
        "name": "CalibrationState",
        "id": 23
      },
      "details": "State of the SkyController calibration",
      "MagnetoCalibrationState": {
        "info": {
          "tagType": "cmd",
          "name": "MagnetoCalibrationState",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Magneto calibration state",
            "desc": "The current state of the magnetometer calibration.\\n If the calibration quality updates are enabled, this event is sent at every calibration quality update. This is useful for calibration screens, but creates a lot of traffic on network.\\ When the calibration quality updates are disabled, this event is only sent when the status parameter changes.",
            "support": "0903;090f",
            "triggered": "when the magnetometer calibration state has changed."
          }
        },
        "status": {
          "info": {
            "tagType": "arg",
            "name": "status",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The global status of the calibration",
          "Unreliable": {
            "info": {
              "tagType": "enum",
              "name": "Unreliable"
            },
            "details": "A calibration is needed"
          },
          "Assessing": {
            "info": {
              "tagType": "enum",
              "name": "Assessing"
            },
            "details": "A calibration is applied, but still need to be checked"
          },
          "Calibrated": {
            "info": {
              "tagType": "enum",
              "name": "Calibrated"
            },
            "details": "The sensor is properly calibrated"
          },
          "lookup": {},
          "value": null
        },
        "X_Quality": {
          "info": {
            "tagType": "arg",
            "name": "X_Quality",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "Calibration quality on X axis. 0 is bad, 255 is perfect",
          "lookup": {},
          "value": null
        },
        "Y_Quality": {
          "info": {
            "tagType": "arg",
            "name": "Y_Quality",
            "type": "u8",
            "id": 2,
            "bytes": 1
          },
          "details": "Calibration quality on Y axis. 0 is bad, 255 is perfect",
          "lookup": {},
          "value": null
        },
        "Z_Quality": {
          "info": {
            "tagType": "arg",
            "name": "Z_Quality",
            "type": "u8",
            "id": 3,
            "bytes": 1
          },
          "details": "Calibration quality on Z axis. 0 is bad, 255 is perfect",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "status",
          "1": "X_Quality",
          "2": "Y_Quality",
          "3": "Z_Quality"
        }
      },
      "MagnetoCalibrationQualityUpdatesState": {
        "info": {
          "tagType": "cmd",
          "name": "MagnetoCalibrationQualityUpdatesState",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Magnetometer Calibration Quality Update State",
            "desc": "State of the magnetometer calibration quality sender.\\n This determines the trigger of the [MagnetoCalibrationState](#4_23_0) event.",
            "support": "0903;090f",
            "triggered": "by an [enableMagnetoCalibrationQualityUpdates](#4_22_0) command."
          }
        },
        "enabled": {
          "info": {
            "tagType": "arg",
            "name": "enabled",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Flag (is the feature enabled). 1 = The skycontroller sends updated when quality is updated 0 = The skycontroller only sent updated when state is updated",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "enabled"
        }
      },
      "lookup": {
        "0": "MagnetoCalibrationState",
        "1": "MagnetoCalibrationQualityUpdatesState"
      }
    },
    "ButtonEvents": {
      "info": {
        "tagType": "class",
        "name": "ButtonEvents",
        "id": 24
      },
      "details": "Events sent on SkyController button presses. These events are sent under certain conditions only.",
      "Settings": {
        "info": {
          "tagType": "cmd",
          "name": "Settings",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Settings button pressed",
            "desc": "This event notifies the application that the settings button was pressed on the device. This allow a connected application to open/close the settings screen from a physical button.\\n This event is only sent when the SkyController is connected to a drone",
            "support": "0903",
            "triggered": "when the user presses the settings button on a connected SkyController."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "Settings"
      }
    },
    "Factory": {
      "info": {
        "tagType": "class",
        "name": "Factory",
        "id": 25
      },
      "details": "Factory reset commands (SkyController 2 only)",
      "Reset": {
        "info": {
          "tagType": "cmd",
          "name": "Reset",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Reset the SkyController 2 to its factory settings",
            "desc": "This command will request a factory reset from the SkyController 2. *The factory reset procedure implies an automatic reboot*, which will be done immediately after recieving this command.",
            "support": "090f",
            "result": "The SkyController 2 will reboot, all settings will be reset to their default values. Products that were paired in factory will **NOT** lose this pairing."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "Reset"
      }
    },
    "lookup": {
      "0": "WifiState",
      "1": "Wifi",
      "2": "Device",
      "3": "DeviceState",
      "4": "Settings",
      "5": "SettingsState",
      "6": "Common",
      "7": "CommonState",
      "8": "SkyControllerState",
      "9": "AccessPointSettings",
      "10": "AccessPointSettingsState",
      "11": "Camera",
      "12": "ButtonMappings",
      "13": "ButtonMappingsState",
      "14": "AxisMappings",
      "15": "AxisMappingsState",
      "16": "AxisFilters",
      "17": "AxisFiltersState",
      "18": "GamepadInfos",
      "19": "GamepadInfosState",
      "20": "CoPiloting",
      "21": "CoPilotingState",
      "22": "Calibration",
      "23": "CalibrationState",
      "24": "ButtonEvents",
      "25": "Factory"
    }
  },
  "lookup": {
    "4": "skyctrl"
  }
}

module.exports=projects;
              