'use strict';
/*************************************************\
generated from arsdk-xml/xml/*.xml
generated by utils/convertSDK.js
generated on : 2/19/2017, 12:38:35 PM
\**************************************************/
const projects={
  "ardrone3": {
    "info": {
      "tagType": "project",
      "name": "ardrone3",
      "id": 1
    },
    "details": "All ARDrone3_only commands",
    "Piloting": {
      "info": {
        "tagType": "class",
        "name": "Piloting",
        "id": 0
      },
      "details": "All commands related to piloting the drone",
      "FlatTrim": {
        "info": {
          "tagType": "cmd",
          "name": "FlatTrim",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Do a flat trim",
            "desc": "Do a flat trim of the accelerometer/gyro.\\n Could be useful when the drone is sliding in hover mode.",
            "support": "0901;090c;090e",
            "result": "Accelerometer and gyroscope are calibrated then event [FlatTrimChanged](#1_4_0) is triggered."
          }
        },
        "lookup": {}
      },
      "TakeOff": {
        "info": {
          "tagType": "cmd",
          "name": "TakeOff",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Take off",
            "desc": "Ask the drone to take off.\\n On the fixed wings (such as Disco): not used except to cancel a land.",
            "support": "0901;090c;090e",
            "result": "On the quadcopters: the drone takes off if its [FlyingState](#1_4_1) was landed.\\n On the fixed wings, the landing process is aborted if the [FlyingState](#1_4_1) was landing.\\n Then, event [FlyingState](#1_4_1) is triggered."
          }
        },
        "lookup": {}
      },
      "PCMD": {
        "info": {
          "tagType": "cmd",
          "name": "PCMD",
          "id": 2,
          "buffer": "NON_ACK"
        },
        "comment": {
          "info": {
            "title": "Move the drone",
            "desc": "Move the drone.\\n The libARController is sending the command each 50ms.\\n\\n **Please note that you should call setPilotingPCMD and not sendPilotingPCMD because the libARController is handling the periodicity and the buffer on which it is sent.**",
            "support": "0901;090c;090e",
            "result": "The drone moves! Yaaaaay!\\n Event [SpeedChanged](#1_4_5), [AttitudeChanged](#1_4_6) and [PositionChanged](#1_4_4) (only if gps of the drone has fixed) are triggered."
          }
        },
        "flag": {
          "info": {
            "tagType": "arg",
            "name": "flag",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Boolean flag: 1 if the roll and pitch values should be taken in consideration. 0 otherwise",
          "lookup": {},
          "value": null
        },
        "roll": {
          "info": {
            "tagType": "arg",
            "name": "roll",
            "type": "i8",
            "id": 1,
            "bytes": 1
          },
          "details": "Roll angle as signed percentage. On copters: Roll angle expressed as signed percentage of the max pitch/roll setting, in range [_100, 100] _100 corresponds to a roll angle of max pitch/roll to the left (drone will fly left) 100 corresponds to a roll angle of max pitch/roll to the right (drone will fly right) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter. On fixed wings: Roll angle expressed as signed percentage of the physical max roll of the wing, in range [_100, 100] Negative value makes the plane fly to the left Positive value makes the plane fly to the right",
          "lookup": {},
          "value": null
        },
        "pitch": {
          "info": {
            "tagType": "arg",
            "name": "pitch",
            "type": "i8",
            "id": 2,
            "bytes": 1
          },
          "details": "Pitch angle as signed percentage. On copters: Expressed as signed percentage of the max pitch/roll setting, in range [_100, 100] _100 corresponds to a pitch angle of max pitch/roll towards sky (drone will fly backward) 100 corresponds to a pitch angle of max pitch/roll towards ground (drone will fly forward) This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter. On fixed wings: Expressed as signed percentage of the physical max pitch of the wing, in range [_100, 100] Negative value makes the plane fly in direction of the sky Positive value makes the plane fly in direction of the ground",
          "lookup": {},
          "value": null
        },
        "yaw": {
          "info": {
            "tagType": "arg",
            "name": "yaw",
            "type": "i8",
            "id": 3,
            "bytes": 1
          },
          "details": "Yaw rotation speed as signed percentage. On copters: Expressed as signed percentage of the max yaw rotation speed setting, in range [_100, 100]. _100 corresponds to a counter_clockwise rotation of max yaw rotation speed 100 corresponds to a clockwise rotation of max yaw rotation speed This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter. On fixed wings: Giving more than a fixed value (75% for the moment) triggers a circle. Positive value will trigger a clockwise circling Negative value will trigger a counter_clockwise circling",
          "lookup": {},
          "value": null
        },
        "gaz": {
          "info": {
            "tagType": "arg",
            "name": "gaz",
            "type": "i8",
            "id": 4,
            "bytes": 1
          },
          "details": "Throttle as signed percentage. On copters: Expressed as signed percentage of the max vertical speed setting, in range [_100, 100] _100 corresponds to a max vertical speed towards ground 100 corresponds to a max vertical speed towards sky This value may be clamped if necessary, in order to respect the maximum supported physical tilt of the copter. During the landing phase, putting some positive gaz will cancel the land. On fixed wings: Expressed as signed percentage of the physical max throttle, in range [_100, 100] Negative value makes the plane fly slower Positive value makes the plane fly faster",
          "lookup": {},
          "value": null
        },
        "timestampAndSeqNum": {
          "info": {
            "tagType": "arg",
            "name": "timestampAndSeqNum",
            "type": "u32",
            "id": 5,
            "bytes": 4
          },
          "details": "Command timestamp in milliseconds (low 24 bits) + command sequence number (high 8 bits) [0;255].",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "flag",
          "1": "roll",
          "2": "pitch",
          "3": "yaw",
          "4": "gaz",
          "5": "timestampAndSeqNum"
        }
      },
      "Landing": {
        "info": {
          "tagType": "cmd",
          "name": "Landing",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Land",
            "desc": "Land.\\n Please note that on copters, if you put some positive gaz (in the [PilotingCommand](#1_0_2)) during the landing, it will cancel it.",
            "support": "0901;090c;090e",
            "result": "On the copters, the drone lands if its [FlyingState](#1_4_1) was taking off, hovering or flying.\\n On the fixed wings, the drone lands if its [FlyingState](#1_4_1) was hovering or flying.\\n Then, event [FlyingState](#1_4_1) is triggered."
          }
        },
        "lookup": {}
      },
      "Emergency": {
        "info": {
          "tagType": "cmd",
          "name": "Emergency",
          "id": 4,
          "buffer": "HIGH_PRIO",
          "timeout": "RETRY"
        },
        "comment": {
          "info": {
            "title": "Cut out the motors",
            "desc": "Cut out the motors.\\n This cuts immediatly the motors. The drone will fall.\\n This command is sent on a dedicated high priority buffer which will infinitely retry to send it if the command is not delivered.",
            "support": "0901;090c;090e",
            "result": "The drone immediatly cuts off its motors.\\n Then, event [FlyingState](#1_4_1) is triggered."
          }
        },
        "lookup": {}
      },
      "NavigateHome": {
        "info": {
          "tagType": "cmd",
          "name": "NavigateHome",
          "id": 5
        },
        "comment": {
          "info": {
            "title": "Return home",
            "desc": "Return home.\\n Ask the drone to fly to its [HomePosition](#1_24_0).\\n The availability of the return home can be get from [ReturnHomeState](#1_4_3).\\n Please note that the drone will wait to be hovering to start its return home. This means that it will wait to have a [flag](#1_0_2) set at 0.",
            "support": "0901;090c;090e",
            "result": "The drone will fly back to its home position.\\n Then, event [ReturnHomeState](#1_4_3) is triggered.\\n You can get a state pending if the drone is not ready to start its return home process but will do it as soon as it is possible."
          }
        },
        "start": {
          "info": {
            "tagType": "arg",
            "name": "start",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 to start the navigate home, 0 to stop it",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "start"
        }
      },
      "AutoTakeOffMode": {
        "info": {
          "tagType": "cmd",
          "name": "AutoTakeOffMode",
          "id": 6,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Auto take off mode",
            "desc": "Auto take off mode."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "State of automatic take off mode (1 for autotake off enabled)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state"
        }
      },
      "moveBy": {
        "info": {
          "tagType": "cmd",
          "name": "moveBy",
          "id": 7
        },
        "comment": {
          "info": {
            "title": "Move the drone to a relative position",
            "desc": "Move the drone to a relative position and rotate heading by a given angle.\\n Moves are relative to the current drone orientation, (drone's reference).\\n Also note that the given rotation will not modify the move (i.e. moves are always rectilinear).",
            "support": "0901_3.3.0;090c_3.3.0",
            "result": "The drone will move of the given offsets.\\n Then, event [RelativeMoveEnded](#1_34_0) is triggered.\\n If you send a second relative move command, the drone will trigger a [RelativeMoveEnded](#1_34_0) with the offsets it managed to do before this new command and the value of error set to interrupted."
          }
        },
        "dX": {
          "info": {
            "tagType": "arg",
            "name": "dX",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Wanted displacement along the front axis [m]",
          "lookup": {},
          "value": null
        },
        "dY": {
          "info": {
            "tagType": "arg",
            "name": "dY",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Wanted displacement along the right axis [m]",
          "lookup": {},
          "value": null
        },
        "dZ": {
          "info": {
            "tagType": "arg",
            "name": "dZ",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Wanted displacement along the down axis [m]",
          "lookup": {},
          "value": null
        },
        "dPsi": {
          "info": {
            "tagType": "arg",
            "name": "dPsi",
            "type": "float",
            "id": 3,
            "bytes": 4
          },
          "details": "Wanted rotation of heading [rad]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "dX",
          "1": "dY",
          "2": "dZ",
          "3": "dPsi"
        }
      },
      "UserTakeOff": {
        "info": {
          "tagType": "cmd",
          "name": "UserTakeOff",
          "id": 8
        },
        "comment": {
          "info": {
            "title": "Prepare the drone to take off",
            "desc": "Prepare the drone to take off.\\n This is the command that initiates the take off process on the fixed wings.\\n Setting the state to 0 will cancel the preparation. You can cancel it before that the drone takes off.",
            "support": "090e",
            "result": "The drone will arm its motors if not already armed.\\n Then, event [FlyingState](#1_4_1) is triggered with state set at motor ramping.\\n Then, event [FlyingState](#1_4_1) is triggered with state set at userTakeOff.\\n Then user can throw the drone to make it take off."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "State of user take off mode _ 1 to enter in user take off. _ 0 to exit from user take off.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state"
        }
      },
      "Circle": {
        "info": {
          "tagType": "cmd",
          "name": "Circle",
          "id": 9
        },
        "comment": {
          "info": {
            "title": "Circle",
            "desc": "Make the fixed wing circle.\\n The circle will use the [CirclingAltitude](#1_6_14) and the [CirclingRadius](#1_6_13)",
            "support": "090e",
            "result": "The fixed wing will circle in the given direction.\\n Then, event [FlyingState](#1_4_1) is triggered with state set at hovering."
          }
        },
        "direction": {
          "info": {
            "tagType": "arg",
            "name": "direction",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The circling direction",
          "CW": {
            "info": {
              "tagType": "enum",
              "name": "CW"
            },
            "details": "Circling ClockWise"
          },
          "CCW": {
            "info": {
              "tagType": "enum",
              "name": "CCW"
            },
            "details": "Circling Counter ClockWise"
          },
          "default": {
            "info": {
              "tagType": "enum",
              "name": "default"
            },
            "details": "Use drone default Circling direction set by CirclingDirection cmd"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "direction"
        }
      },
      "lookup": {
        "0": "FlatTrim",
        "1": "TakeOff",
        "2": "PCMD",
        "3": "Landing",
        "4": "Emergency",
        "5": "NavigateHome",
        "6": "AutoTakeOffMode",
        "7": "moveBy",
        "8": "UserTakeOff",
        "9": "Circle"
      }
    },
    "Animations": {
      "info": {
        "tagType": "class",
        "name": "Animations",
        "id": 5
      },
      "details": "Animation commands",
      "Flip": {
        "info": {
          "tagType": "cmd",
          "name": "Flip",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Make a flip",
            "desc": "Make a flip.",
            "support": "0901;090c",
            "result": "The drone will make a flip if it has enough battery."
          }
        },
        "direction": {
          "info": {
            "tagType": "arg",
            "name": "direction",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Direction for the flip",
          "front": {
            "info": {
              "tagType": "enum",
              "name": "front"
            },
            "details": "Flip direction front"
          },
          "back": {
            "info": {
              "tagType": "enum",
              "name": "back"
            },
            "details": "Flip direction back"
          },
          "right": {
            "info": {
              "tagType": "enum",
              "name": "right"
            },
            "details": "Flip direction right"
          },
          "left": {
            "info": {
              "tagType": "enum",
              "name": "left"
            },
            "details": "Flip direction left"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "direction"
        }
      },
      "lookup": {
        "0": "Flip"
      }
    },
    "Camera": {
      "info": {
        "tagType": "class",
        "name": "Camera",
        "id": 1
      },
      "details": "Ask the drone to move camera",
      "Orientation": {
        "info": {
          "tagType": "cmd",
          "name": "Orientation",
          "id": 0,
          "buffer": "NON_ACK",
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Move the camera",
            "desc": "Move the camera.\\n You can get min and max values for tilt and pan using [CameraInfo](#0_15_0).",
            "support": "0901;090c;090e",
            "result": "The drone moves its camera.\\n Then, event [CameraOrientation](#1_25_0) is triggered."
          }
        },
        "tilt": {
          "info": {
            "tagType": "arg",
            "name": "tilt",
            "type": "i8",
            "id": 0,
            "bytes": 1
          },
          "details": "Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.",
          "lookup": {},
          "value": null
        },
        "pan": {
          "info": {
            "tagType": "arg",
            "name": "pan",
            "type": "i8",
            "id": 1,
            "bytes": 1
          },
          "details": "Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "tilt",
          "1": "pan"
        }
      },
      "OrientationV2": {
        "info": {
          "tagType": "cmd",
          "name": "OrientationV2",
          "id": 1,
          "buffer": "NON_ACK"
        },
        "comment": {
          "info": {
            "title": "Move the camera",
            "desc": "Move the camera.\\n You can get min and max values for tilt and pan using [CameraInfo](#0_15_0).",
            "support": "0901;090c;090e",
            "result": "The drone moves its camera.\\n Then, event [CameraOrientationV2](#1_25_2) is triggered."
          }
        },
        "tilt": {
          "info": {
            "tagType": "arg",
            "name": "tilt",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Tilt camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.",
          "lookup": {},
          "value": null
        },
        "pan": {
          "info": {
            "tagType": "arg",
            "name": "pan",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Pan camera consign for the drone (in degree) The value is saturated by the drone. Saturation value is sent by thre drone through CameraSettingsChanged command.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "tilt",
          "1": "pan"
        }
      },
      "Velocity": {
        "info": {
          "tagType": "cmd",
          "name": "Velocity",
          "id": 2,
          "buffer": "NON_ACK"
        },
        "comment": {
          "info": {
            "title": "Move the camera using velocity",
            "desc": "Move the camera given velocity consign.\\n You can get min and max values for tilt and pan using [CameraVelocityRange](#1_25_4).",
            "support": "0901;090c;090e",
            "result": "The drone moves its camera.\\n Then, event [CameraOrientationV2](#1_25_2) is triggered."
          }
        },
        "tilt": {
          "info": {
            "tagType": "arg",
            "name": "tilt",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Tilt camera velocity consign [deg/s] Negative tilt velocity move camera to bottom Positive tilt velocity move camera to top",
          "lookup": {},
          "value": null
        },
        "pan": {
          "info": {
            "tagType": "arg",
            "name": "pan",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Pan camera velocity consign [deg/s] Negative pan velocity move camera to left Positive pan velocity move camera to right",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "tilt",
          "1": "pan"
        }
      },
      "lookup": {
        "0": "Orientation",
        "1": "OrientationV2",
        "2": "Velocity"
      }
    },
    "MediaRecord": {
      "info": {
        "tagType": "class",
        "name": "MediaRecord",
        "id": 7
      },
      "details": "Media recording management",
      "Picture": {
        "info": {
          "tagType": "cmd",
          "name": "Picture",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Take a picture",
            "desc": "Take a picture."
          }
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Mass storage id to take picture",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mass_storage_id"
        }
      },
      "Video": {
        "info": {
          "tagType": "cmd",
          "name": "Video",
          "id": 1,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Record a video",
            "desc": "Record a video."
          }
        },
        "record": {
          "info": {
            "tagType": "arg",
            "name": "record",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Command to record video",
          "stop": {
            "info": {
              "tagType": "enum",
              "name": "stop"
            },
            "details": "Stop the video recording"
          },
          "start": {
            "info": {
              "tagType": "enum",
              "name": "start"
            },
            "details": "Start the video recording"
          },
          "lookup": {},
          "value": null
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "Mass storage id to record",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "record",
          "1": "mass_storage_id"
        }
      },
      "PictureV2": {
        "info": {
          "tagType": "cmd",
          "name": "PictureV2",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Take a picture",
            "desc": "Take a picture.\\n The type of picture taken is related to the picture setting.\\n You can set the picture format by sending the command [SetPictureFormat](#1_19_0). You can also get the current picture format with [PictureFormat](#1_20_0).\\n Please note that the time required to take the picture is highly related to this format.\\n\\n You can check if the picture taking is available with [PictureState](#1_8_2).\\n Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after that the picture has been taken).",
            "support": "0901_2.0.1;090c;090e",
            "result": "Event [PictureState](#1_8_2) will be triggered with a state busy.\\n The drone will take a picture.\\n Then, when picture has been taken, notification [PictureEvent](#1_3_0) is triggered.\\n And normally [PictureState](#1_8_2) will be triggered with a state ready."
          }
        },
        "lookup": {}
      },
      "VideoV2": {
        "info": {
          "tagType": "cmd",
          "name": "VideoV2",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Record a video",
            "desc": "Record a video (or start timelapse).\\n You can check if the video recording is available with [VideoState](#1_8_3).\\n This command can start a video (obvious huh?), but also a timelapse if the timelapse mode is set. You can check if the timelapse mode is set with the event [TimelapseMode](#1_20_4).\\n Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after the picture has been taken).",
            "support": "0901_2.0.1;090c;090e",
            "result": "The drone will begin or stop to record the video (or timelapse).\\n Then, event [VideoState](#1_8_3) will be triggered. Also, notification [VideoEvent](#1_3_1) is triggered."
          }
        },
        "record": {
          "info": {
            "tagType": "arg",
            "name": "record",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Command to record video",
          "stop": {
            "info": {
              "tagType": "enum",
              "name": "stop"
            },
            "details": "Stop the video recording"
          },
          "start": {
            "info": {
              "tagType": "enum",
              "name": "start"
            },
            "details": "Start the video recording"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "record"
        }
      },
      "lookup": {
        "0": "Picture",
        "1": "Video",
        "2": "PictureV2",
        "3": "VideoV2"
      }
    },
    "MediaRecordState": {
      "info": {
        "tagType": "class",
        "name": "MediaRecordState",
        "id": 8
      },
      "details": "State of media recording",
      "PictureStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "PictureStateChanged",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Picture state",
            "desc": "Picture state."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if picture has been taken, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "Mass storage id where the picture was recorded",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state",
          "1": "mass_storage_id"
        }
      },
      "VideoStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "VideoStateChanged",
          "id": 1,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Video record state",
            "desc": "Picture record state."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "State of video",
          "stopped": {
            "info": {
              "tagType": "enum",
              "name": "stopped"
            },
            "details": "Video was stopped"
          },
          "started": {
            "info": {
              "tagType": "enum",
              "name": "started"
            },
            "details": "Video was started"
          },
          "failed": {
            "info": {
              "tagType": "enum",
              "name": "failed"
            },
            "details": "Video was failed"
          },
          "autostopped": {
            "info": {
              "tagType": "enum",
              "name": "autostopped"
            },
            "details": "Video was auto stopped"
          },
          "lookup": {},
          "value": null
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "Mass storage id where the video was recorded",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state",
          "1": "mass_storage_id"
        }
      },
      "PictureStateChangedV2": {
        "info": {
          "tagType": "cmd",
          "name": "PictureStateChangedV2",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Picture state",
            "desc": "Picture state.",
            "support": "0901_2.0.1;090c;090e",
            "triggered": "by [TakePicture](#1_7_2) or by a change in the picture state"
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "State of device picture recording",
          "ready": {
            "info": {
              "tagType": "enum",
              "name": "ready"
            },
            "details": "The picture recording is ready"
          },
          "busy": {
            "info": {
              "tagType": "enum",
              "name": "busy"
            },
            "details": "The picture recording is busy"
          },
          "notAvailable": {
            "info": {
              "tagType": "enum",
              "name": "notAvailable"
            },
            "details": "The picture recording is not available"
          },
          "lookup": {},
          "value": null
        },
        "error": {
          "info": {
            "tagType": "arg",
            "name": "error",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "Error to explain the state",
          "ok": {
            "info": {
              "tagType": "enum",
              "name": "ok"
            },
            "details": "No Error"
          },
          "unknown": {
            "info": {
              "tagType": "enum",
              "name": "unknown"
            },
            "details": "Unknown generic error"
          },
          "camera_ko": {
            "info": {
              "tagType": "enum",
              "name": "camera_ko"
            },
            "details": "Picture camera is out of order"
          },
          "memoryFull": {
            "info": {
              "tagType": "enum",
              "name": "memoryFull"
            },
            "details": "Memory full ; cannot save one additional picture"
          },
          "lowBattery": {
            "info": {
              "tagType": "enum",
              "name": "lowBattery"
            },
            "details": "Battery is too low to start/keep recording."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state",
          "1": "error"
        }
      },
      "VideoStateChangedV2": {
        "info": {
          "tagType": "cmd",
          "name": "VideoStateChangedV2",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Video record state",
            "desc": "Video record state.",
            "support": "0901_2.0.1;090c;090e",
            "triggered": "by [RecordVideo](#1_7_3) or by a change in the video state"
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "State of device video recording",
          "stopped": {
            "info": {
              "tagType": "enum",
              "name": "stopped"
            },
            "details": "Video is stopped"
          },
          "started": {
            "info": {
              "tagType": "enum",
              "name": "started"
            },
            "details": "Video is started"
          },
          "notAvailable": {
            "info": {
              "tagType": "enum",
              "name": "notAvailable"
            },
            "details": "The video recording is not available"
          },
          "lookup": {},
          "value": null
        },
        "error": {
          "info": {
            "tagType": "arg",
            "name": "error",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "Error to explain the state",
          "ok": {
            "info": {
              "tagType": "enum",
              "name": "ok"
            },
            "details": "No Error"
          },
          "unknown": {
            "info": {
              "tagType": "enum",
              "name": "unknown"
            },
            "details": "Unknown generic error"
          },
          "camera_ko": {
            "info": {
              "tagType": "enum",
              "name": "camera_ko"
            },
            "details": "Video camera is out of order"
          },
          "memoryFull": {
            "info": {
              "tagType": "enum",
              "name": "memoryFull"
            },
            "details": "Memory full ; cannot save one additional video"
          },
          "lowBattery": {
            "info": {
              "tagType": "enum",
              "name": "lowBattery"
            },
            "details": "Battery is too low to start/keep recording."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state",
          "1": "error"
        }
      },
      "VideoResolutionState": {
        "info": {
          "tagType": "cmd",
          "name": "VideoResolutionState",
          "id": 4,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Video resolution",
            "desc": "Video resolution.\\n Informs about streaming and recording video resolutions.\\n Note that this is only an indication about what the resolution should be. To know the real resolution, you should get it from the frame.",
            "support": "none",
            "triggered": "when the resolution changes."
          }
        },
        "streaming": {
          "info": {
            "tagType": "arg",
            "name": "streaming",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Streaming resolution",
          "res360p": {
            "info": {
              "tagType": "enum",
              "name": "res360p"
            },
            "details": "360p resolution."
          },
          "res480p": {
            "info": {
              "tagType": "enum",
              "name": "res480p"
            },
            "details": "480p resolution."
          },
          "res720p": {
            "info": {
              "tagType": "enum",
              "name": "res720p"
            },
            "details": "720p resolution."
          },
          "res1080p": {
            "info": {
              "tagType": "enum",
              "name": "res1080p"
            },
            "details": "1080p resolution."
          },
          "lookup": {},
          "value": null
        },
        "recording": {
          "info": {
            "tagType": "arg",
            "name": "recording",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "Recording resolution",
          "res360p": {
            "info": {
              "tagType": "enum",
              "name": "res360p"
            },
            "details": "360p resolution."
          },
          "res480p": {
            "info": {
              "tagType": "enum",
              "name": "res480p"
            },
            "details": "480p resolution."
          },
          "res720p": {
            "info": {
              "tagType": "enum",
              "name": "res720p"
            },
            "details": "720p resolution."
          },
          "res1080p": {
            "info": {
              "tagType": "enum",
              "name": "res1080p"
            },
            "details": "1080p resolution."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "streaming",
          "1": "recording"
        }
      },
      "lookup": {
        "0": "PictureStateChanged",
        "1": "VideoStateChanged",
        "2": "PictureStateChangedV2",
        "3": "VideoStateChangedV2",
        "4": "VideoResolutionState"
      }
    },
    "MediaRecordEvent": {
      "info": {
        "tagType": "class",
        "name": "MediaRecordEvent",
        "id": 3
      },
      "details": "Events of media recording",
      "PictureEventChanged": {
        "info": {
          "tagType": "cmd",
          "name": "PictureEventChanged",
          "id": 0,
          "content": "NOTIFICATION"
        },
        "comment": {
          "info": {
            "title": "Picture taken",
            "desc": "Picture taken.\\n\\n **This event is a notification, you can't retrieve it in the cache of the device controller.**",
            "support": "0901_2.0.1;090c;090e",
            "triggered": "after a [TakePicture](#1_7_2), when the picture has been taken (or it has failed)."
          }
        },
        "event": {
          "info": {
            "tagType": "arg",
            "name": "event",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Last event of picture recording",
          "taken": {
            "info": {
              "tagType": "enum",
              "name": "taken"
            },
            "details": "Picture taken and saved"
          },
          "failed": {
            "info": {
              "tagType": "enum",
              "name": "failed"
            },
            "details": "Picture failed"
          },
          "lookup": {},
          "value": null
        },
        "error": {
          "info": {
            "tagType": "arg",
            "name": "error",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "Error to explain the event",
          "ok": {
            "info": {
              "tagType": "enum",
              "name": "ok"
            },
            "details": "No Error"
          },
          "unknown": {
            "info": {
              "tagType": "enum",
              "name": "unknown"
            },
            "details": "Unknown generic error ; only when state is failed"
          },
          "busy": {
            "info": {
              "tagType": "enum",
              "name": "busy"
            },
            "details": "Picture recording is busy ; only when state is failed"
          },
          "notAvailable": {
            "info": {
              "tagType": "enum",
              "name": "notAvailable"
            },
            "details": "Picture recording not available ; only when state is failed"
          },
          "memoryFull": {
            "info": {
              "tagType": "enum",
              "name": "memoryFull"
            },
            "details": "Memory full ; only when state is failed"
          },
          "lowBattery": {
            "info": {
              "tagType": "enum",
              "name": "lowBattery"
            },
            "details": "Battery is too low to record."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "event",
          "1": "error"
        }
      },
      "VideoEventChanged": {
        "info": {
          "tagType": "cmd",
          "name": "VideoEventChanged",
          "id": 1,
          "content": "NOTIFICATION"
        },
        "comment": {
          "info": {
            "title": "Video record notification",
            "desc": "Video record notification.\\n\\n **This event is a notification, you can't retrieve it in the cache of the device controller.**",
            "support": "0901_2.0.1;090c;090e",
            "triggered": "by [RecordVideo](#1_7_3) or a change in the video state."
          }
        },
        "event": {
          "info": {
            "tagType": "arg",
            "name": "event",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Event of video recording",
          "start": {
            "info": {
              "tagType": "enum",
              "name": "start"
            },
            "details": "Video start"
          },
          "stop": {
            "info": {
              "tagType": "enum",
              "name": "stop"
            },
            "details": "Video stop and saved"
          },
          "failed": {
            "info": {
              "tagType": "enum",
              "name": "failed"
            },
            "details": "Video failed"
          },
          "lookup": {},
          "value": null
        },
        "error": {
          "info": {
            "tagType": "arg",
            "name": "error",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "Error to explain the event",
          "ok": {
            "info": {
              "tagType": "enum",
              "name": "ok"
            },
            "details": "No Error"
          },
          "unknown": {
            "info": {
              "tagType": "enum",
              "name": "unknown"
            },
            "details": "Unknown generic error ; only when state is failed"
          },
          "busy": {
            "info": {
              "tagType": "enum",
              "name": "busy"
            },
            "details": "Video recording is busy ; only when state is failed"
          },
          "notAvailable": {
            "info": {
              "tagType": "enum",
              "name": "notAvailable"
            },
            "details": "Video recording not available ; only when state is failed"
          },
          "memoryFull": {
            "info": {
              "tagType": "enum",
              "name": "memoryFull"
            },
            "details": "Memory full"
          },
          "lowBattery": {
            "info": {
              "tagType": "enum",
              "name": "lowBattery"
            },
            "details": "Battery is too low to record."
          },
          "autoStopped": {
            "info": {
              "tagType": "enum",
              "name": "autoStopped"
            },
            "details": "Video was auto stopped"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "event",
          "1": "error"
        }
      },
      "lookup": {
        "0": "PictureEventChanged",
        "1": "VideoEventChanged"
      }
    },
    "PilotingState": {
      "info": {
        "tagType": "class",
        "name": "PilotingState",
        "id": 4
      },
      "details": "State from drone",
      "FlatTrimChanged": {
        "info": {
          "tagType": "cmd",
          "name": "FlatTrimChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Flat trim changed",
            "desc": "Drone acknowledges that flat trim was correctly processed.",
            "support": "0901;090c;090e",
            "triggered": "by [FlatTrim](#1_0_0)."
          }
        },
        "lookup": {}
      },
      "FlyingStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "FlyingStateChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Flying state",
            "desc": "Flying state.",
            "support": "0901;090c;090e",
            "triggered": "when the flying state changes."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Drone flying state",
          "landed": {
            "info": {
              "tagType": "enum",
              "name": "landed"
            },
            "details": "Landed state"
          },
          "takingoff": {
            "info": {
              "tagType": "enum",
              "name": "takingoff"
            },
            "details": "Taking off state"
          },
          "hovering": {
            "info": {
              "tagType": "enum",
              "name": "hovering"
            },
            "details": "Hovering / Circling (for fixed wings) state"
          },
          "flying": {
            "info": {
              "tagType": "enum",
              "name": "flying"
            },
            "details": "Flying state"
          },
          "landing": {
            "info": {
              "tagType": "enum",
              "name": "landing"
            },
            "details": "Landing state"
          },
          "emergency": {
            "info": {
              "tagType": "enum",
              "name": "emergency"
            },
            "details": "Emergency state"
          },
          "usertakeoff": {
            "info": {
              "tagType": "enum",
              "name": "usertakeoff"
            },
            "details": "User take off state. Waiting for user action to take off."
          },
          "motor_ramping": {
            "info": {
              "tagType": "enum",
              "name": "motor_ramping"
            },
            "details": "Motor ramping state (for fixed wings)."
          },
          "emergency_landing": {
            "info": {
              "tagType": "enum",
              "name": "emergency_landing"
            },
            "details": "Emergency landing state. Drone autopilot has detected defective sensor(s). Only Yaw argument in PCMD is taken into account. All others flying commands are ignored."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state"
        }
      },
      "AlertStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AlertStateChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Alert state",
            "desc": "Alert state.",
            "support": "0901;090c;090e",
            "triggered": "when an alert happens on the drone."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Drone alert state",
          "none": {
            "info": {
              "tagType": "enum",
              "name": "none"
            },
            "details": "No alert"
          },
          "user": {
            "info": {
              "tagType": "enum",
              "name": "user"
            },
            "details": "User emergency alert"
          },
          "cut_out": {
            "info": {
              "tagType": "enum",
              "name": "cut_out"
            },
            "details": "Cut out alert"
          },
          "critical_battery": {
            "info": {
              "tagType": "enum",
              "name": "critical_battery"
            },
            "details": "Critical battery alert"
          },
          "low_battery": {
            "info": {
              "tagType": "enum",
              "name": "low_battery"
            },
            "details": "Low battery alert"
          },
          "too_much_angle": {
            "info": {
              "tagType": "enum",
              "name": "too_much_angle"
            },
            "details": "The angle of the drone is too high"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state"
        }
      },
      "NavigateHomeStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "NavigateHomeStateChanged",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Return home state",
            "desc": "Return home state.\\n Availability is related to gps fix, magnetometer calibration.",
            "support": "0901;090c;090e",
            "triggered": "by [ReturnHome](#1_0_5) or when the state of the return home changes."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "State of navigate home",
          "available": {
            "info": {
              "tagType": "enum",
              "name": "available"
            },
            "details": "Navigate home is available"
          },
          "inProgress": {
            "info": {
              "tagType": "enum",
              "name": "inProgress"
            },
            "details": "Navigate home is in progress"
          },
          "unavailable": {
            "info": {
              "tagType": "enum",
              "name": "unavailable"
            },
            "details": "Navigate home is not available"
          },
          "pending": {
            "info": {
              "tagType": "enum",
              "name": "pending"
            },
            "details": "Navigate home has been received, but its process is pending"
          },
          "lookup": {},
          "value": null
        },
        "reason": {
          "info": {
            "tagType": "arg",
            "name": "reason",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "Reason of the state",
          "userRequest": {
            "info": {
              "tagType": "enum",
              "name": "userRequest"
            },
            "details": "User requested a navigate home (available_>inProgress)"
          },
          "connectionLost": {
            "info": {
              "tagType": "enum",
              "name": "connectionLost"
            },
            "details": "Connection between controller and product lost (available_>inProgress)"
          },
          "lowBattery": {
            "info": {
              "tagType": "enum",
              "name": "lowBattery"
            },
            "details": "Low battery occurred (available_>inProgress)"
          },
          "finished": {
            "info": {
              "tagType": "enum",
              "name": "finished"
            },
            "details": "Navigate home is finished (inProgress_>available)"
          },
          "stopped": {
            "info": {
              "tagType": "enum",
              "name": "stopped"
            },
            "details": "Navigate home has been stopped (inProgress_>available)"
          },
          "disabled": {
            "info": {
              "tagType": "enum",
              "name": "disabled"
            },
            "details": "Navigate home disabled by product (inProgress_>unavailable or available_>unavailable)"
          },
          "enabled": {
            "info": {
              "tagType": "enum",
              "name": "enabled"
            },
            "details": "Navigate home enabled by product (unavailable_>available)"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state",
          "1": "reason"
        }
      },
      "PositionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "PositionChanged",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Drone's position changed",
            "desc": "Drone's position changed.",
            "support": "0901;090c;090e",
            "triggered": "regularly."
          }
        },
        "latitude": {
          "info": {
            "tagType": "arg",
            "name": "latitude",
            "type": "double",
            "id": 0,
            "bytes": 1
          },
          "details": "Latitude position in decimal degrees (500.0 if not available)",
          "lookup": {},
          "value": null
        },
        "longitude": {
          "info": {
            "tagType": "arg",
            "name": "longitude",
            "type": "double",
            "id": 1,
            "bytes": 1
          },
          "details": "Longitude position in decimal degrees (500.0 if not available)",
          "lookup": {},
          "value": null
        },
        "altitude": {
          "info": {
            "tagType": "arg",
            "name": "altitude",
            "type": "double",
            "id": 2,
            "bytes": 1
          },
          "details": "Altitude in meters (from GPS)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "latitude",
          "1": "longitude",
          "2": "altitude"
        }
      },
      "SpeedChanged": {
        "info": {
          "tagType": "cmd",
          "name": "SpeedChanged",
          "id": 5,
          "buffer": "NON_ACK"
        },
        "comment": {
          "info": {
            "title": "Drone's speed changed",
            "desc": "Drone's speed changed.\\n Expressed in the NED referential (North_East_Down).",
            "support": "0901;090c;090e",
            "triggered": "regularly."
          }
        },
        "speedX": {
          "info": {
            "tagType": "arg",
            "name": "speedX",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Speed relative to the North (when drone moves to the north, speed is > 0) (in m/s)",
          "lookup": {},
          "value": null
        },
        "speedY": {
          "info": {
            "tagType": "arg",
            "name": "speedY",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Speed relative to the East (when drone moves to the east, speed is > 0) (in m/s)",
          "lookup": {},
          "value": null
        },
        "speedZ": {
          "info": {
            "tagType": "arg",
            "name": "speedZ",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Speed on the z axis (when drone moves down, speed is > 0) (in m/s)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "speedX",
          "1": "speedY",
          "2": "speedZ"
        }
      },
      "AttitudeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AttitudeChanged",
          "id": 6,
          "buffer": "NON_ACK"
        },
        "comment": {
          "info": {
            "title": "Drone's attitude changed",
            "desc": "Drone's attitude changed.",
            "support": "0901;090c;090e",
            "triggered": "regularly."
          }
        },
        "roll": {
          "info": {
            "tagType": "arg",
            "name": "roll",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "roll value (in radian)",
          "lookup": {},
          "value": null
        },
        "pitch": {
          "info": {
            "tagType": "arg",
            "name": "pitch",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Pitch value (in radian)",
          "lookup": {},
          "value": null
        },
        "yaw": {
          "info": {
            "tagType": "arg",
            "name": "yaw",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Yaw value (in radian)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "roll",
          "1": "pitch",
          "2": "yaw"
        }
      },
      "AutoTakeOffModeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AutoTakeOffModeChanged",
          "id": 7,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Auto takeoff mode",
            "desc": "Auto takeoff mode"
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "State of automatic take off mode (1 if enabled)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state"
        }
      },
      "AltitudeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AltitudeChanged",
          "id": 8,
          "buffer": "NON_ACK"
        },
        "comment": {
          "info": {
            "title": "Drone's altitude changed",
            "desc": "Drone's altitude changed.\\n The altitude reported is the altitude above the take off point.\\n To get the altitude above sea level, see [PositionChanged](#1_4_4).",
            "support": "0901;090c;090e",
            "triggered": "regularly."
          }
        },
        "altitude": {
          "info": {
            "tagType": "arg",
            "name": "altitude",
            "type": "double",
            "id": 0,
            "bytes": 1
          },
          "details": "Altitude in meters",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "altitude"
        }
      },
      "GpsLocationChanged": {
        "info": {
          "tagType": "cmd",
          "name": "GpsLocationChanged",
          "id": 9
        },
        "comment": {
          "info": {
            "title": "Drone's location changed",
            "desc": "Drone's location changed.\\n This event is meant to replace [PositionChanged](#1_4_4).",
            "support": "none",
            "triggered": "regularly."
          }
        },
        "latitude": {
          "info": {
            "tagType": "arg",
            "name": "latitude",
            "type": "double",
            "id": 0,
            "bytes": 1
          },
          "details": "Latitude location in decimal degrees (500.0 if not available)",
          "lookup": {},
          "value": null
        },
        "longitude": {
          "info": {
            "tagType": "arg",
            "name": "longitude",
            "type": "double",
            "id": 1,
            "bytes": 1
          },
          "details": "Longitude location in decimal degrees (500.0 if not available)",
          "lookup": {},
          "value": null
        },
        "altitude": {
          "info": {
            "tagType": "arg",
            "name": "altitude",
            "type": "double",
            "id": 2,
            "bytes": 1
          },
          "details": "Altitude location in meters.",
          "lookup": {},
          "value": null
        },
        "latitude_accuracy": {
          "info": {
            "tagType": "arg",
            "name": "latitude_accuracy",
            "type": "i8",
            "id": 3,
            "bytes": 1
          },
          "details": "Latitude location error in meters (1 sigma/standard deviation) _1 if not available.",
          "lookup": {},
          "value": null
        },
        "longitude_accuracy": {
          "info": {
            "tagType": "arg",
            "name": "longitude_accuracy",
            "type": "i8",
            "id": 4,
            "bytes": 1
          },
          "details": "Longitude location error in meters (1 sigma/standard deviation) _1 if not available.",
          "lookup": {},
          "value": null
        },
        "altitude_accuracy": {
          "info": {
            "tagType": "arg",
            "name": "altitude_accuracy",
            "type": "i8",
            "id": 5,
            "bytes": 1
          },
          "details": "Altitude location error in meters (1 sigma/standard deviation) _1 if not available.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "latitude",
          "1": "longitude",
          "2": "altitude",
          "3": "latitude_accuracy",
          "4": "longitude_accuracy",
          "5": "altitude_accuracy"
        }
      },
      "LandingStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "LandingStateChanged",
          "id": 10
        },
        "comment": {
          "info": {
            "title": "Landing state",
            "desc": "Landing state.\\n Only available for fixed wings (which have two landing modes).",
            "support": "090e",
            "triggered": "when the landing state changes."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Drone landing state",
          "linear": {
            "info": {
              "tagType": "enum",
              "name": "linear"
            },
            "details": "Linear landing"
          },
          "spiral": {
            "info": {
              "tagType": "enum",
              "name": "spiral"
            },
            "details": "Spiral landing"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state"
        }
      },
      "AirSpeedChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AirSpeedChanged",
          "id": 11,
          "buffer": "NON_ACK"
        },
        "comment": {
          "info": {
            "title": "Drone's air speed changed",
            "desc": "Drone's air speed changed\\n Expressed in the drone's referential.",
            "support": "none",
            "triggered": "regularly."
          }
        },
        "airSpeed": {
          "info": {
            "tagType": "arg",
            "name": "airSpeed",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Speed relative to air on x axis (speed is always > 0) (in m/s)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "airSpeed"
        }
      },
      "lookup": {
        "0": "FlatTrimChanged",
        "1": "FlyingStateChanged",
        "2": "AlertStateChanged",
        "3": "NavigateHomeStateChanged",
        "4": "PositionChanged",
        "5": "SpeedChanged",
        "6": "AttitudeChanged",
        "7": "AutoTakeOffModeChanged",
        "8": "AltitudeChanged",
        "9": "GpsLocationChanged",
        "10": "LandingStateChanged",
        "11": "AirSpeedChanged"
      }
    },
    "PilotingEvent": {
      "info": {
        "tagType": "class",
        "name": "PilotingEvent",
        "id": 34
      },
      "details": "Events of Piloting",
      "moveByEnd": {
        "info": {
          "tagType": "cmd",
          "name": "moveByEnd",
          "id": 0,
          "content": "NOTIFICATION"
        },
        "comment": {
          "info": {
            "title": "Relative move ended",
            "desc": "Relative move ended.\\n Informs about the move that the drone managed to do and why it stopped.",
            "support": "0901_3.3.0;090c_3.3.0",
            "triggered": "when the landing state changes."
          }
        },
        "dX": {
          "info": {
            "tagType": "arg",
            "name": "dX",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Distance traveled along the front axis [m]",
          "lookup": {},
          "value": null
        },
        "dY": {
          "info": {
            "tagType": "arg",
            "name": "dY",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Distance traveled along the right axis [m]",
          "lookup": {},
          "value": null
        },
        "dZ": {
          "info": {
            "tagType": "arg",
            "name": "dZ",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Distance traveled along the down axis [m]",
          "lookup": {},
          "value": null
        },
        "dPsi": {
          "info": {
            "tagType": "arg",
            "name": "dPsi",
            "type": "float",
            "id": 3,
            "bytes": 4
          },
          "details": "Applied angle on heading [rad]",
          "lookup": {},
          "value": null
        },
        "error": {
          "info": {
            "tagType": "arg",
            "name": "error",
            "type": "enum",
            "id": 4,
            "bytes": 1
          },
          "details": "Error to explain the event",
          "ok": {
            "info": {
              "tagType": "enum",
              "name": "ok"
            },
            "details": "No Error ; The relative displacement"
          },
          "unknown": {
            "info": {
              "tagType": "enum",
              "name": "unknown"
            },
            "details": "Unknown generic error"
          },
          "busy": {
            "info": {
              "tagType": "enum",
              "name": "busy"
            },
            "details": "The Device is busy ; command moveBy ignored"
          },
          "notAvailable": {
            "info": {
              "tagType": "enum",
              "name": "notAvailable"
            },
            "details": "Command moveBy is not available ; command moveBy ignored"
          },
          "interrupted": {
            "info": {
              "tagType": "enum",
              "name": "interrupted"
            },
            "details": "Command moveBy interrupted"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "dX",
          "1": "dY",
          "2": "dZ",
          "3": "dPsi",
          "4": "error"
        }
      },
      "lookup": {
        "0": "moveByEnd"
      }
    },
    "Network": {
      "info": {
        "tagType": "class",
        "name": "Network",
        "id": 13
      },
      "details": "Network related commands",
      "WifiScan": {
        "info": {
          "tagType": "cmd",
          "name": "WifiScan",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Scan wifi network",
            "desc": "Scan wifi network to get a list of all networks found by the drone",
            "support": "0901;090c;090e",
            "result": "Event [WifiScanResults](#1_14_0) is triggered with all networks found.\\n When all networks have been sent, event [WifiScanEnded](#1_14_1) is triggered."
          }
        },
        "band": {
          "info": {
            "tagType": "arg",
            "name": "band",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The band(s) : 2.4 Ghz, 5 Ghz, or both",
          "_2_4ghz": {
            "info": {
              "tagType": "enum",
              "name": "_2_4ghz"
            },
            "details": "2.4 GHz band"
          },
          "_5ghz": {
            "info": {
              "tagType": "enum",
              "name": "_5ghz"
            },
            "details": "5 GHz band"
          },
          "all": {
            "info": {
              "tagType": "enum",
              "name": "all"
            },
            "details": "Both 2.4 and 5 GHz bands"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "band"
        }
      },
      "WifiAuthChannel": {
        "info": {
          "tagType": "cmd",
          "name": "WifiAuthChannel",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Ask for available wifi channels",
            "desc": "Ask for available wifi channels.\\n The list of available Wifi channels is related to the country of the drone. You can get this country from the event [CountryChanged](#0_3_6).",
            "support": "0901;090c;090e",
            "result": "Event [AvailableWifiChannels](#1_14_2) is triggered with all available channels. When all channels have been sent, event [AvailableWifiChannelsCompleted](#1_14_3) is triggered."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "WifiScan",
        "1": "WifiAuthChannel"
      }
    },
    "NetworkState": {
      "info": {
        "tagType": "class",
        "name": "NetworkState",
        "id": 14
      },
      "details": "Network state from Product",
      "WifiScanListChanged": {
        "info": {
          "tagType": "cmd",
          "name": "WifiScanListChanged",
          "id": 0,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Wifi scan results",
            "desc": "Wifi scan results.\\n Please note that the list is not complete until you receive the event [WifiScanEnded](#1_14_1).",
            "support": "0901;090c;090e",
            "triggered": "for each wifi network scanned after a [ScanWifi](#1_13_0)"
          }
        },
        "ssid": {
          "info": {
            "tagType": "arg",
            "name": "ssid",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "SSID of the AP",
          "lookup": {},
          "value": null
        },
        "rssi": {
          "info": {
            "tagType": "arg",
            "name": "rssi",
            "type": "i16",
            "id": 1,
            "bytes": 2
          },
          "details": "RSSI of the AP in dbm (negative value)",
          "lookup": {},
          "value": null
        },
        "band": {
          "info": {
            "tagType": "arg",
            "name": "band",
            "type": "enum",
            "id": 2,
            "bytes": 1
          },
          "details": "The band : 2.4 GHz or 5 GHz",
          "_2_4ghz": {
            "info": {
              "tagType": "enum",
              "name": "_2_4ghz"
            },
            "details": "2.4 GHz band"
          },
          "_5ghz": {
            "info": {
              "tagType": "enum",
              "name": "_5ghz"
            },
            "details": "5 GHz band"
          },
          "lookup": {},
          "value": null
        },
        "channel": {
          "info": {
            "tagType": "arg",
            "name": "channel",
            "type": "u8",
            "id": 3,
            "bytes": 1
          },
          "details": "Channel of the AP",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "ssid",
          "1": "rssi",
          "2": "band",
          "3": "channel"
        }
      },
      "AllWifiScanChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AllWifiScanChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Wifi scan ended",
            "desc": "Wifi scan ended.\\n When receiving this event, the list of [WifiScanResults](#1_14_0) is complete.",
            "support": "0901;090c;090e",
            "triggered": "after the last [WifiScanResult](#1_14_0) has been sent."
          }
        },
        "lookup": {}
      },
      "WifiAuthChannelListChanged": {
        "info": {
          "tagType": "cmd",
          "name": "WifiAuthChannelListChanged",
          "id": 2,
          "type": "LIST_ITEM"
        },
        "comment": {
          "info": {
            "title": "Available wifi channels",
            "desc": "Available wifi channels.\\n Please note that the list is not complete until you receive the event [AvailableWifiChannelsCompleted](#1_14_3).",
            "support": "0901;090c;090e",
            "triggered": "for each available channel after a [GetAvailableWifiChannels](#1_13_1)."
          }
        },
        "band": {
          "info": {
            "tagType": "arg",
            "name": "band",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The band of this channel : 2.4 GHz or 5 GHz",
          "_2_4ghz": {
            "info": {
              "tagType": "enum",
              "name": "_2_4ghz"
            },
            "details": "2.4 GHz band"
          },
          "_5ghz": {
            "info": {
              "tagType": "enum",
              "name": "_5ghz"
            },
            "details": "5 GHz band"
          },
          "lookup": {},
          "value": null
        },
        "channel": {
          "info": {
            "tagType": "arg",
            "name": "channel",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "The authorized channel.",
          "lookup": {},
          "value": null
        },
        "in_or_out": {
          "info": {
            "tagType": "arg",
            "name": "in_or_out",
            "type": "u8",
            "id": 2,
            "bytes": 1
          },
          "details": "Bit 0 is 1 if channel is authorized outside (0 otherwise) ; Bit 1 is 1 if channel is authorized inside (0 otherwise)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "band",
          "1": "channel",
          "2": "in_or_out"
        }
      },
      "AllWifiAuthChannelChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AllWifiAuthChannelChanged",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Available wifi channels completed",
            "desc": "Available wifi channels completed.\\n When receiving this event, the list of [AvailableWifiChannels](#1_14_2) is complete.",
            "support": "0901;090c;090e",
            "triggered": "after the last [AvailableWifiChannel](#1_14_2) has been sent."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "WifiScanListChanged",
        "1": "AllWifiScanChanged",
        "2": "WifiAuthChannelListChanged",
        "3": "AllWifiAuthChannelChanged"
      }
    },
    "PilotingSettings": {
      "info": {
        "tagType": "class",
        "name": "PilotingSettings",
        "id": 2
      },
      "details": "Piloting Settings commands",
      "MaxAltitude": {
        "info": {
          "tagType": "cmd",
          "name": "MaxAltitude",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Set max altitude",
            "desc": "Set max altitude.\\n The drone will not fly over this max altitude when it is in manual piloting.\\n Please note that if you set a max altitude which is below the current drone altitude, the drone will not go to given max altitude.\\n You can get the bounds in the event [MaxAltitude](#1_6_0).",
            "support": "0901;090c;090e",
            "result": "The max altitude is set.\\n Then, event [MaxAltitude](#1_6_0) is triggered."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current altitude max in m",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current"
        }
      },
      "MaxTilt": {
        "info": {
          "tagType": "cmd",
          "name": "MaxTilt",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Set max pitch/roll",
            "desc": "Set max pitch/roll.\\n This represent the max inclination allowed by the drone.\\n You can get the bounds with the commands [MaxPitchRoll](#1_6_1).",
            "support": "0901;090c",
            "result": "The max pitch/roll is set.\\n Then, event [MaxPitchRoll](#1_6_1) is triggered."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current tilt max in degree",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current"
        }
      },
      "AbsolutControl": {
        "info": {
          "tagType": "cmd",
          "name": "AbsolutControl",
          "id": 2,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Set absolut control",
            "desc": "Set absolut control."
          }
        },
        "on": {
          "info": {
            "tagType": "arg",
            "name": "on",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 to enable, 0 to disable",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "on"
        }
      },
      "MaxDistance": {
        "info": {
          "tagType": "cmd",
          "name": "MaxDistance",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Set max distance",
            "desc": "Set max distance.\\n You can get the bounds from the event [MaxDistance](#1_6_3).\\n\\n If [Geofence](#1_6_4) is activated, the drone won't fly over the given max distance.",
            "support": "0901;090c;090e",
            "result": "The max distance is set.\\n Then, event [MaxDistance](#1_6_3) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current max distance in meter",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "NoFlyOverMaxDistance": {
        "info": {
          "tagType": "cmd",
          "name": "NoFlyOverMaxDistance",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Enable geofence",
            "desc": "Enable geofence.\\n If geofence is enabled, the drone won't fly over the given max distance.\\n You can get the max distance from the event [MaxDistance](#1_6_3). \\n For copters: the distance is computed from the controller position, if this position is not known, it will use the take off.\\n For fixed wings: the distance is computed from the take off position.",
            "support": "0901;090c;090e",
            "result": "Geofencing is enabled or disabled.\\n Then, event [Geofencing](#1_6_4) is triggered."
          }
        },
        "shouldNotFlyOver": {
          "info": {
            "tagType": "arg",
            "name": "shouldNotFlyOver",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if the drone can't fly further than max distance, 0 if no limitation on the drone should be done",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "shouldNotFlyOver"
        }
      },
      "setAutonomousFlightMaxHorizontalSpeed": {
        "info": {
          "tagType": "cmd",
          "name": "setAutonomousFlightMaxHorizontalSpeed",
          "id": 5
        },
        "comment": {
          "info": {
            "title": "Set autonomous flight max horizontal speed",
            "desc": "Set autonomous flight max horizontal speed.\\n This will only be used during autonomous flights such as moveBy.",
            "support": "0901_3.3.0;090c_3.3.0",
            "result": "The max horizontal speed is set.\\n Then, event [AutonomousFlightMaxHorizontalSpeed](#1_6_5) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "maximum horizontal speed [m/s]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "setAutonomousFlightMaxVerticalSpeed": {
        "info": {
          "tagType": "cmd",
          "name": "setAutonomousFlightMaxVerticalSpeed",
          "id": 6
        },
        "comment": {
          "info": {
            "title": "Set autonomous flight max vertical speed",
            "desc": "Set autonomous flight max vertical speed.\\n This will only be used during autonomous flights such as moveBy.",
            "support": "0901_3.3.0;090c_3.3.0",
            "result": "The max vertical speed is set.\\n Then, event [AutonomousFlightMaxVerticalSpeed](#1_6_6) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "maximum vertical speed [m/s]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "setAutonomousFlightMaxHorizontalAcceleration": {
        "info": {
          "tagType": "cmd",
          "name": "setAutonomousFlightMaxHorizontalAcceleration",
          "id": 7
        },
        "comment": {
          "info": {
            "title": "Set autonomous flight max horizontal acceleration",
            "desc": "Set autonomous flight max horizontal acceleration.\\n This will only be used during autonomous flights such as moveBy.",
            "support": "0901_3.3.0;090c_3.3.0",
            "result": "The max horizontal acceleration is set.\\n Then, event [AutonomousFlightMaxHorizontalAcceleration](#1_6_7) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "maximum horizontal acceleration [m/s2]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "setAutonomousFlightMaxVerticalAcceleration": {
        "info": {
          "tagType": "cmd",
          "name": "setAutonomousFlightMaxVerticalAcceleration",
          "id": 8
        },
        "comment": {
          "info": {
            "title": "Set autonomous flight max vertical acceleration",
            "desc": "Set autonomous flight max vertical acceleration.\\n This will only be used during autonomous flights such as moveBy.",
            "support": "0901_3.3.0;090c_3.3.0",
            "result": "The max vertical acceleration is set.\\n Then, event [AutonomousFlightMaxVerticalAcceleration](#1_6_8) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "maximum vertical acceleration [m/s2]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "setAutonomousFlightMaxRotationSpeed": {
        "info": {
          "tagType": "cmd",
          "name": "setAutonomousFlightMaxRotationSpeed",
          "id": 9
        },
        "comment": {
          "info": {
            "title": "Set autonomous flight max rotation speed",
            "desc": "Set autonomous flight max rotation speed.\\n This will only be used during autonomous flights such as moveBy.",
            "support": "0901_3.3.0;090c_3.3.0",
            "result": "The max rotation speed is set.\\n Then, event [AutonomousFlightMaxRotationSpeed](#1_6_9) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "maximum yaw rotation speed [deg/s]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "BankedTurn": {
        "info": {
          "tagType": "cmd",
          "name": "BankedTurn",
          "id": 10
        },
        "comment": {
          "info": {
            "title": "Set banked turn mode",
            "desc": "Set banked turn mode.\\n When banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.",
            "support": "0901_3.2.0;090c_3.2.0",
            "result": "The banked turn mode is enabled or disabled.\\n Then, event [BankedTurnMode](#1_6_10) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 to enable, 0 to disable",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "MinAltitude": {
        "info": {
          "tagType": "cmd",
          "name": "MinAltitude",
          "id": 11
        },
        "comment": {
          "info": {
            "title": "Set minimum altitude",
            "desc": "Set minimum altitude.\\n Only available for fixed wings.",
            "support": "090e",
            "result": "The minimum altitude is set.\\n Then, event [MinimumAltitude](#1_6_11) is triggered."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current altitude min in m",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current"
        }
      },
      "CirclingDirection": {
        "info": {
          "tagType": "cmd",
          "name": "CirclingDirection",
          "id": 12
        },
        "comment": {
          "info": {
            "title": "Set default circling direction",
            "desc": "Set default circling direction. This direction will be used when the drone use an automatic circling or when [CIRCLE](#1_0_9) is sent with direction *default*.\\n Only available for fixed wings.",
            "support": "090e",
            "result": "The circling direction is set.\\n Then, event [DefaultCirclingDirection](#1_6_12) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The circling direction",
          "CW": {
            "info": {
              "tagType": "enum",
              "name": "CW"
            },
            "details": "Circling ClockWise"
          },
          "CCW": {
            "info": {
              "tagType": "enum",
              "name": "CCW"
            },
            "details": "Circling Counter ClockWise"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "CirclingRadius": {
        "info": {
          "tagType": "cmd",
          "name": "CirclingRadius",
          "id": 13
        },
        "comment": {
          "info": {
            "title": "Set circling radius",
            "desc": "Set circling radius.\\n Only available for fixed wings.",
            "support": "090e",
            "result": "The circling radius is set.\\n Then, event [CirclingRadius](#1_6_13) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "u16",
            "id": 0,
            "bytes": 2
          },
          "details": "The circling radius in meter",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "CirclingAltitude": {
        "info": {
          "tagType": "cmd",
          "name": "CirclingAltitude",
          "id": 14
        },
        "comment": {
          "info": {
            "title": "Set min circling altitude",
            "desc": "Set min circling altitude (not used during take off).\\n Only available for fixed wings.",
            "support": "090e",
            "result": "The circling altitude is set.\\n Then, event [CirclingAltitude](#1_6_14) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "u16",
            "id": 0,
            "bytes": 2
          },
          "details": "The circling altitude in meter",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "PitchMode": {
        "info": {
          "tagType": "cmd",
          "name": "PitchMode",
          "id": 15
        },
        "comment": {
          "info": {
            "title": "Set pitch mode",
            "desc": "Set pitch mode.\\n Only available for fixed wings.",
            "support": "090e",
            "result": "The pitch mode is set.\\n Then, event [PitchMode](#1_6_15) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The Pitch mode",
          "NORMAL": {
            "info": {
              "tagType": "enum",
              "name": "NORMAL"
            },
            "details": "Positive pitch values will make the drone lower its nose. Negative pitch values will make the drone raise its nose."
          },
          "INVERTED": {
            "info": {
              "tagType": "enum",
              "name": "INVERTED"
            },
            "details": "Pitch commands are inverted. Positive pitch values will make the drone raise its nose. Negative pitch values will make the drone lower its nose."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "lookup": {
        "0": "MaxAltitude",
        "1": "MaxTilt",
        "2": "AbsolutControl",
        "3": "MaxDistance",
        "4": "NoFlyOverMaxDistance",
        "5": "setAutonomousFlightMaxHorizontalSpeed",
        "6": "setAutonomousFlightMaxVerticalSpeed",
        "7": "setAutonomousFlightMaxHorizontalAcceleration",
        "8": "setAutonomousFlightMaxVerticalAcceleration",
        "9": "setAutonomousFlightMaxRotationSpeed",
        "10": "BankedTurn",
        "11": "MinAltitude",
        "12": "CirclingDirection",
        "13": "CirclingRadius",
        "14": "CirclingAltitude",
        "15": "PitchMode"
      }
    },
    "PilotingSettingsState": {
      "info": {
        "tagType": "class",
        "name": "PilotingSettingsState",
        "id": 6
      },
      "details": "Piloting Settings state from product",
      "MaxAltitudeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MaxAltitudeChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Max altitude",
            "desc": "Max altitude.\\n The drone will not fly higher than this altitude (above take off point).",
            "support": "0901;090c;090e",
            "triggered": "by [SetMaxAltitude](#1_2_0)."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current altitude max",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Range min of altitude",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Range max of altitude",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current",
          "1": "min",
          "2": "max"
        }
      },
      "MaxTiltChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MaxTiltChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Max pitch/roll",
            "desc": "Max pitch/roll.\\n The drone will not fly higher than this altitude (above take off point).",
            "support": "0901;090c",
            "triggered": "by [SetMaxAltitude](#1_2_0)."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current max tilt",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Range min of tilt",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Range max of tilt",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current",
          "1": "min",
          "2": "max"
        }
      },
      "AbsolutControlChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AbsolutControlChanged",
          "id": 2,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Absolut control",
            "desc": "Absolut control."
          }
        },
        "on": {
          "info": {
            "tagType": "arg",
            "name": "on",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if enabled, 0 if disabled",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "on"
        }
      },
      "MaxDistanceChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MaxDistanceChanged",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Max distance",
            "desc": "Max distance.",
            "support": "0901;090c;090e",
            "triggered": "by [SetMaxDistance](#1_2_3)."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current max distance in meter",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Minimal possible max distance",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Maximal possible max distance",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current",
          "1": "min",
          "2": "max"
        }
      },
      "NoFlyOverMaxDistanceChanged": {
        "info": {
          "tagType": "cmd",
          "name": "NoFlyOverMaxDistanceChanged",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Geofencing",
            "desc": "Geofencing.\\n If set, the drone won't fly over the [MaxDistance](#1_6_3).",
            "support": "0901;090c;090e",
            "triggered": "by [EnableGeofence](#1_2_4)."
          }
        },
        "shouldNotFlyOver": {
          "info": {
            "tagType": "arg",
            "name": "shouldNotFlyOver",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if the drone won't fly further than max distance, 0 if no limitation on the drone will be done",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "shouldNotFlyOver"
        }
      },
      "AutonomousFlightMaxHorizontalSpeed": {
        "info": {
          "tagType": "cmd",
          "name": "AutonomousFlightMaxHorizontalSpeed",
          "id": 5
        },
        "comment": {
          "info": {
            "title": "Autonomous flight max horizontal speed",
            "desc": "Autonomous flight max horizontal speed.",
            "support": "0901_3.3.0;090c_3.3.0",
            "triggered": "by [SetAutonomousFlightMaxHorizontalSpeed](#1_2_5)."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "maximum horizontal speed [m/s]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "AutonomousFlightMaxVerticalSpeed": {
        "info": {
          "tagType": "cmd",
          "name": "AutonomousFlightMaxVerticalSpeed",
          "id": 6
        },
        "comment": {
          "info": {
            "title": "Autonomous flight max vertical speed",
            "desc": "Autonomous flight max vertical speed.",
            "support": "0901_3.3.0;090c_3.3.0",
            "triggered": "by [SetAutonomousFlightMaxVerticalSpeed](#1_2_6)."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "maximum vertical speed [m/s]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "AutonomousFlightMaxHorizontalAcceleration": {
        "info": {
          "tagType": "cmd",
          "name": "AutonomousFlightMaxHorizontalAcceleration",
          "id": 7
        },
        "comment": {
          "info": {
            "title": "Autonomous flight max horizontal acceleration",
            "desc": "Autonomous flight max horizontal acceleration.",
            "support": "0901_3.3.0;090c_3.3.0",
            "triggered": "by [SetAutonomousFlightMaxHorizontalAcceleration](#1_2_7)."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "maximum horizontal acceleration [m/s2]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "AutonomousFlightMaxVerticalAcceleration": {
        "info": {
          "tagType": "cmd",
          "name": "AutonomousFlightMaxVerticalAcceleration",
          "id": 8
        },
        "comment": {
          "info": {
            "title": "Autonomous flight max vertical acceleration",
            "desc": "Autonomous flight max vertical acceleration.",
            "support": "0901_3.3.0;090c_3.3.0",
            "triggered": "by [SetAutonomousFlightMaxVerticalAcceleration](#1_2_8)."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "maximum vertical acceleration [m/s2]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "AutonomousFlightMaxRotationSpeed": {
        "info": {
          "tagType": "cmd",
          "name": "AutonomousFlightMaxRotationSpeed",
          "id": 9
        },
        "comment": {
          "info": {
            "title": "Autonomous flight max rotation speed",
            "desc": "Autonomous flight max rotation speed.",
            "support": "0901_3.3.0;090c_3.3.0",
            "triggered": "by [SetAutonomousFlightMaxRotationSpeed](#1_2_9)."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "maximum yaw rotation speed [deg/s]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "BankedTurnChanged": {
        "info": {
          "tagType": "cmd",
          "name": "BankedTurnChanged",
          "id": 10
        },
        "comment": {
          "info": {
            "title": "Banked Turn mode",
            "desc": "Banked Turn mode.\\n If banked turn mode is enabled, the drone will use yaw values from the piloting command to infer with roll and pitch on the drone when its horizontal speed is not null.",
            "support": "0901_3.2.0;090c_3.2.0",
            "triggered": "by [SetBankedTurnMode](#1_2_10)."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if enabled, 0 if disabled",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state"
        }
      },
      "MinAltitudeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MinAltitudeChanged",
          "id": 11
        },
        "comment": {
          "info": {
            "title": "Min altitude",
            "desc": "Min altitude.\\n Only sent by fixed wings.",
            "support": "090e",
            "triggered": "by [SetMinAltitude](#1_2_11)."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current altitude min",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Range min of altitude min",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Range max of altitude min",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current",
          "1": "min",
          "2": "max"
        }
      },
      "CirclingDirectionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "CirclingDirectionChanged",
          "id": 12
        },
        "comment": {
          "info": {
            "title": "Circling direction",
            "desc": "Circling direction.\\n Only sent by fixed wings.",
            "support": "090e",
            "triggered": "by [SetCirclingDirection](#1_2_12)."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The circling direction",
          "CW": {
            "info": {
              "tagType": "enum",
              "name": "CW"
            },
            "details": "Circling ClockWise"
          },
          "CCW": {
            "info": {
              "tagType": "enum",
              "name": "CCW"
            },
            "details": "Circling Counter ClockWise"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "CirclingRadiusChanged": {
        "info": {
          "tagType": "cmd",
          "name": "CirclingRadiusChanged",
          "id": 13
        },
        "comment": {
          "info": {
            "title": "Circling radius",
            "desc": "Circling radius.\\n Only sent by fixed wings.",
            "support": "090e",
            "triggered": "by [SetCirclingRadius](#1_2_13)."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "u16",
            "id": 0,
            "bytes": 2
          },
          "details": "The current circling radius in meter",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "u16",
            "id": 1,
            "bytes": 2
          },
          "details": "Range min of circling radius in meter",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "u16",
            "id": 2,
            "bytes": 2
          },
          "details": "Range max of circling radius in meter",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current",
          "1": "min",
          "2": "max"
        }
      },
      "CirclingAltitudeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "CirclingAltitudeChanged",
          "id": 14
        },
        "comment": {
          "info": {
            "title": "Circling altitude",
            "desc": "Circling altitude.\\n Bounds will be automatically adjusted according to the [MaxAltitude](#1_6_0).\\n Only sent by fixed wings.",
            "support": "090e",
            "triggered": "by [SetCirclingRadius](#1_2_14) or when bounds change due to [SetMaxAltitude](#1_2_0)."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "u16",
            "id": 0,
            "bytes": 2
          },
          "details": "The current circling altitude in meter",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "u16",
            "id": 1,
            "bytes": 2
          },
          "details": "Range min of circling altitude in meter",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "u16",
            "id": 2,
            "bytes": 2
          },
          "details": "Range max of circling altitude in meter",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current",
          "1": "min",
          "2": "max"
        }
      },
      "PitchModeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "PitchModeChanged",
          "id": 15
        },
        "comment": {
          "info": {
            "title": "Pitch mode",
            "desc": "Pitch mode.",
            "support": "090e",
            "triggered": "by [SetPitchMode](#1_2_15)."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The Pitch mode",
          "NORMAL": {
            "info": {
              "tagType": "enum",
              "name": "NORMAL"
            },
            "details": "Positive pitch values will make the drone lower its nose. Negative pitch values will make the drone raise its nose."
          },
          "INVERTED": {
            "info": {
              "tagType": "enum",
              "name": "INVERTED"
            },
            "details": "Pitch commands are inverted. Positive pitch values will make the drone raise its nose. Negative pitch values will make the drone lower its nose."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "lookup": {
        "0": "MaxAltitudeChanged",
        "1": "MaxTiltChanged",
        "2": "AbsolutControlChanged",
        "3": "MaxDistanceChanged",
        "4": "NoFlyOverMaxDistanceChanged",
        "5": "AutonomousFlightMaxHorizontalSpeed",
        "6": "AutonomousFlightMaxVerticalSpeed",
        "7": "AutonomousFlightMaxHorizontalAcceleration",
        "8": "AutonomousFlightMaxVerticalAcceleration",
        "9": "AutonomousFlightMaxRotationSpeed",
        "10": "BankedTurnChanged",
        "11": "MinAltitudeChanged",
        "12": "CirclingDirectionChanged",
        "13": "CirclingRadiusChanged",
        "14": "CirclingAltitudeChanged",
        "15": "PitchModeChanged"
      }
    },
    "SpeedSettings": {
      "info": {
        "tagType": "class",
        "name": "SpeedSettings",
        "id": 11
      },
      "details": "Speed Settings commands",
      "MaxVerticalSpeed": {
        "info": {
          "tagType": "cmd",
          "name": "MaxVerticalSpeed",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Set max vertical speed",
            "desc": "Set max vertical speed.",
            "support": "0901;090c",
            "result": "The max vertical speed is set.\\n Then, event [MaxVerticalSpeed](#1_12_0) is triggered."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current max vertical speed in m/s",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current"
        }
      },
      "MaxRotationSpeed": {
        "info": {
          "tagType": "cmd",
          "name": "MaxRotationSpeed",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Set max rotation speed",
            "desc": "Set max rotation speed.",
            "support": "0901;090c",
            "result": "The max rotation speed is set.\\n Then, event [MaxRotationSpeed](#1_12_1) is triggered."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current max yaw rotation speed in degree/s",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current"
        }
      },
      "HullProtection": {
        "info": {
          "tagType": "cmd",
          "name": "HullProtection",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Set the presence of hull protection",
            "desc": "Set the presence of hull protection.",
            "support": "0901;090c",
            "result": "The drone knows that it has a hull protection.\\n Then, event [HullProtection](#1_12_2) is triggered."
          }
        },
        "present": {
          "info": {
            "tagType": "arg",
            "name": "present",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if present, 0 if not present",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "present"
        }
      },
      "Outdoor": {
        "info": {
          "tagType": "cmd",
          "name": "Outdoor",
          "id": 3,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Set outdoor mode",
            "desc": "Set outdoor mode."
          }
        },
        "outdoor": {
          "info": {
            "tagType": "arg",
            "name": "outdoor",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if outdoor flight, 0 if indoor flight",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "outdoor"
        }
      },
      "MaxPitchRollRotationSpeed": {
        "info": {
          "tagType": "cmd",
          "name": "MaxPitchRollRotationSpeed",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Set max pitch/roll rotation speed",
            "desc": "Set max pitch/roll rotation speed.",
            "support": "0901;090c",
            "result": "The max pitch/roll rotation speed is set.\\n Then, event [MaxPitchRollRotationSpeed](#1_12_4) is triggered."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current max pitch/roll rotation speed in degree/s",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current"
        }
      },
      "lookup": {
        "0": "MaxVerticalSpeed",
        "1": "MaxRotationSpeed",
        "2": "HullProtection",
        "3": "Outdoor",
        "4": "MaxPitchRollRotationSpeed"
      }
    },
    "SpeedSettingsState": {
      "info": {
        "tagType": "class",
        "name": "SpeedSettingsState",
        "id": 12
      },
      "details": "Speed Settings state from product",
      "MaxVerticalSpeedChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MaxVerticalSpeedChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Max vertical speed",
            "desc": "Max vertical speed.",
            "support": "0901;090c",
            "triggered": "by [SetMaxVerticalSpeed](#1_11_0)."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current max vertical speed in m/s",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Range min of vertical speed",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Range max of vertical speed",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current",
          "1": "min",
          "2": "max"
        }
      },
      "MaxRotationSpeedChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MaxRotationSpeedChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Max rotation speed",
            "desc": "Max rotation speed.",
            "support": "0901;090c",
            "triggered": "by [SetMaxRotationSpeed](#1_11_1)."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current max yaw rotation speed in degree/s",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Range min of yaw rotation speed",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Range max of yaw rotation speed",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current",
          "1": "min",
          "2": "max"
        }
      },
      "HullProtectionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "HullProtectionChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Presence of hull protection",
            "desc": "Presence of hull protection.",
            "support": "0901;090c",
            "triggered": "by [SetHullProtectionPresence](#1_11_2)."
          }
        },
        "present": {
          "info": {
            "tagType": "arg",
            "name": "present",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if present, 0 if not present",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "present"
        }
      },
      "OutdoorChanged": {
        "info": {
          "tagType": "cmd",
          "name": "OutdoorChanged",
          "id": 3,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Outdoor mode",
            "desc": "Outdoor mode."
          }
        },
        "outdoor": {
          "info": {
            "tagType": "arg",
            "name": "outdoor",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if outdoor flight, 0 if indoor flight",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "outdoor"
        }
      },
      "MaxPitchRollRotationSpeedChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MaxPitchRollRotationSpeedChanged",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Max pitch/roll rotation speed",
            "desc": "Max pitch/roll rotation speed.",
            "support": "0901;090c",
            "triggered": "by [SetMaxPitchRollRotationSpeed](#1_11_4)."
          }
        },
        "current": {
          "info": {
            "tagType": "arg",
            "name": "current",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Current max pitch/roll rotation speed in degree/s",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Range min of pitch/roll rotation speed",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Range max of pitch/roll rotation speed",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "current",
          "1": "min",
          "2": "max"
        }
      },
      "lookup": {
        "0": "MaxVerticalSpeedChanged",
        "1": "MaxRotationSpeedChanged",
        "2": "HullProtectionChanged",
        "3": "OutdoorChanged",
        "4": "MaxPitchRollRotationSpeedChanged"
      }
    },
    "NetworkSettings": {
      "info": {
        "tagType": "class",
        "name": "NetworkSettings",
        "id": 9
      },
      "details": "Network settings commands",
      "WifiSelection": {
        "info": {
          "tagType": "cmd",
          "name": "WifiSelection",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Select Wifi",
            "desc": "Select or auto_select channel of choosen band.",
            "support": "0901;090c;090e",
            "result": "The wifi channel changes according to given parameters. Watch out, a disconnection might appear.\\n Then, event [WifiSelection](#1_10_0) is triggered."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of wifi selection (auto, manual)",
          "auto": {
            "info": {
              "tagType": "enum",
              "name": "auto"
            },
            "details": "Auto selection"
          },
          "manual": {
            "info": {
              "tagType": "enum",
              "name": "manual"
            },
            "details": "Manual selection"
          },
          "lookup": {},
          "value": null
        },
        "band": {
          "info": {
            "tagType": "arg",
            "name": "band",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "The allowed band(s) : 2.4 Ghz, 5 Ghz, or all",
          "_2_4ghz": {
            "info": {
              "tagType": "enum",
              "name": "_2_4ghz"
            },
            "details": "2.4 GHz band"
          },
          "_5ghz": {
            "info": {
              "tagType": "enum",
              "name": "_5ghz"
            },
            "details": "5 GHz band"
          },
          "all": {
            "info": {
              "tagType": "enum",
              "name": "all"
            },
            "details": "Both 2.4 and 5 GHz bands"
          },
          "lookup": {},
          "value": null
        },
        "channel": {
          "info": {
            "tagType": "arg",
            "name": "channel",
            "type": "u8",
            "id": 2,
            "bytes": 1
          },
          "details": "The channel (not used in auto mode)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type",
          "1": "band",
          "2": "channel"
        }
      },
      "wifiSecurity": {
        "info": {
          "tagType": "cmd",
          "name": "wifiSecurity",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Set wifi security type",
            "desc": "Set wifi security type.\\n The security will be changed on the next restart",
            "support": "0901;090c;090e",
            "result": "The wifi security is set (but not applied until next restart).\\n Then, event [WifiSecurityType](#1_10_2) is triggered."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of wifi security (open, wpa2)",
          "open": {
            "info": {
              "tagType": "enum",
              "name": "open"
            },
            "details": "Wifi is not protected by any security (default)"
          },
          "wpa2": {
            "info": {
              "tagType": "enum",
              "name": "wpa2"
            },
            "details": "Wifi is protected by wpa2"
          },
          "lookup": {},
          "value": null
        },
        "key": {
          "info": {
            "tagType": "arg",
            "name": "key",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "The key to secure the network (empty if type is open)",
          "lookup": {},
          "value": null
        },
        "keyType": {
          "info": {
            "tagType": "arg",
            "name": "keyType",
            "type": "enum",
            "id": 2,
            "bytes": 1
          },
          "details": "Type of the key",
          "plain": {
            "info": {
              "tagType": "enum",
              "name": "plain"
            },
            "details": "Key is plain text, not encrypted"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type",
          "1": "key",
          "2": "keyType"
        }
      },
      "lookup": {
        "0": "WifiSelection",
        "1": "wifiSecurity"
      }
    },
    "NetworkSettingsState": {
      "info": {
        "tagType": "class",
        "name": "NetworkSettingsState",
        "id": 10
      },
      "details": "Network settings state from product",
      "WifiSelectionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "WifiSelectionChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Wifi selection",
            "desc": "Wifi selection.",
            "support": "0901;090c;090e",
            "triggered": "by [SelectWifi](#1_9_0)."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of wifi selection settings",
          "auto_all": {
            "info": {
              "tagType": "enum",
              "name": "auto_all"
            },
            "details": "Auto selection"
          },
          "auto__2_4ghz": {
            "info": {
              "tagType": "enum",
              "name": "auto__2_4ghz"
            },
            "details": "Auto selection 2.4ghz"
          },
          "auto__5ghz": {
            "info": {
              "tagType": "enum",
              "name": "auto__5ghz"
            },
            "details": "Auto selection 5 ghz"
          },
          "manual": {
            "info": {
              "tagType": "enum",
              "name": "manual"
            },
            "details": "Manual selection"
          },
          "lookup": {},
          "value": null
        },
        "band": {
          "info": {
            "tagType": "arg",
            "name": "band",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "The actual wifi band state",
          "_2_4ghz": {
            "info": {
              "tagType": "enum",
              "name": "_2_4ghz"
            },
            "details": "2.4 GHz band"
          },
          "_5ghz": {
            "info": {
              "tagType": "enum",
              "name": "_5ghz"
            },
            "details": "5 GHz band"
          },
          "all": {
            "info": {
              "tagType": "enum",
              "name": "all"
            },
            "details": "Both 2.4 and 5 GHz bands"
          },
          "lookup": {},
          "value": null
        },
        "channel": {
          "info": {
            "tagType": "arg",
            "name": "channel",
            "type": "u8",
            "id": 2,
            "bytes": 1
          },
          "details": "The channel (depends of the band)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type",
          "1": "band",
          "2": "channel"
        }
      },
      "wifiSecurityChanged": {
        "info": {
          "tagType": "cmd",
          "name": "wifiSecurityChanged",
          "id": 1,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Wifi security type",
            "desc": "Wifi security type."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of wifi security (open, wpa2)",
          "open": {
            "info": {
              "tagType": "enum",
              "name": "open"
            },
            "details": "Wifi is not protected by any security (default)"
          },
          "wpa2": {
            "info": {
              "tagType": "enum",
              "name": "wpa2"
            },
            "details": "Wifi is protected by wpa2"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type"
        }
      },
      "wifiSecurity": {
        "info": {
          "tagType": "cmd",
          "name": "wifiSecurity",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Wifi security type",
            "desc": "Wifi security type.",
            "support": "0901;090c;090e",
            "triggered": "by [SetWifiSecurityType](#1_9_1)."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of wifi security (open, wpa2)",
          "open": {
            "info": {
              "tagType": "enum",
              "name": "open"
            },
            "details": "Wifi is not protected by any security (default)"
          },
          "wpa2": {
            "info": {
              "tagType": "enum",
              "name": "wpa2"
            },
            "details": "Wifi is protected by wpa2"
          },
          "lookup": {},
          "value": null
        },
        "key": {
          "info": {
            "tagType": "arg",
            "name": "key",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "The key used to secure the network (empty if type is open)",
          "lookup": {},
          "value": null
        },
        "keyType": {
          "info": {
            "tagType": "arg",
            "name": "keyType",
            "type": "enum",
            "id": 2,
            "bytes": 1
          },
          "details": "Type of the key",
          "plain": {
            "info": {
              "tagType": "enum",
              "name": "plain"
            },
            "details": "Key is plain text, not encrypted"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type",
          "1": "key",
          "2": "keyType"
        }
      },
      "lookup": {
        "0": "WifiSelectionChanged",
        "1": "wifiSecurityChanged",
        "2": "wifiSecurity"
      }
    },
    "SettingsState": {
      "info": {
        "tagType": "class",
        "name": "SettingsState",
        "id": 16
      },
      "details": "Settings state from product",
      "ProductMotorVersionListChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ProductMotorVersionListChanged",
          "id": 0,
          "type": "MAP_ITEM",
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Motor version",
            "desc": "Motor version."
          }
        },
        "motor_number": {
          "info": {
            "tagType": "arg",
            "name": "motor_number",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Product Motor number",
          "lookup": {},
          "value": null
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Product Motor type",
          "lookup": {},
          "value": null
        },
        "software": {
          "info": {
            "tagType": "arg",
            "name": "software",
            "type": "string",
            "id": 2,
            "bytes": 1
          },
          "details": "Product Motors software version",
          "lookup": {},
          "value": null
        },
        "hardware": {
          "info": {
            "tagType": "arg",
            "name": "hardware",
            "type": "string",
            "id": 3,
            "bytes": 1
          },
          "details": "Product Motors hardware version",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "motor_number",
          "1": "type",
          "2": "software",
          "3": "hardware"
        }
      },
      "ProductGPSVersionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ProductGPSVersionChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "GPS version",
            "desc": "GPS version.",
            "support": "0901;090c;090e",
            "triggered": "at connection."
          }
        },
        "software": {
          "info": {
            "tagType": "arg",
            "name": "software",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Product GPS software version",
          "lookup": {},
          "value": null
        },
        "hardware": {
          "info": {
            "tagType": "arg",
            "name": "hardware",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Product GPS hardware version",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "software",
          "1": "hardware"
        }
      },
      "MotorErrorStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MotorErrorStateChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Motor error",
            "desc": "Motor error.\\n This event is sent back to *noError* as soon as the motor error disappear. To get the last motor error, see [LastMotorError](#1_16_5)",
            "support": "0901;090c;090e",
            "triggered": "when a motor error occurs."
          }
        },
        "motorIds": {
          "info": {
            "tagType": "arg",
            "name": "motorIds",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Bit field for concerned motor. If bit 0 = 1, motor 1 is affected by this error. Same with bit 1, 2 and 3. Motor 1: front left Motor 2: front right Motor 3: back right Motor 4: back left",
          "lookup": {},
          "value": null
        },
        "motorError": {
          "info": {
            "tagType": "arg",
            "name": "motorError",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "Enumeration of the motor error",
          "noError": {
            "info": {
              "tagType": "enum",
              "name": "noError"
            },
            "details": "No error detected"
          },
          "errorEEPRom": {
            "info": {
              "tagType": "enum",
              "name": "errorEEPRom"
            },
            "details": "EEPROM access failure"
          },
          "errorMotorStalled": {
            "info": {
              "tagType": "enum",
              "name": "errorMotorStalled"
            },
            "details": "Motor stalled"
          },
          "errorPropellerSecurity": {
            "info": {
              "tagType": "enum",
              "name": "errorPropellerSecurity"
            },
            "details": "Propeller cutout security triggered"
          },
          "errorCommLost": {
            "info": {
              "tagType": "enum",
              "name": "errorCommLost"
            },
            "details": "Communication with motor failed by timeout"
          },
          "errorRCEmergencyStop": {
            "info": {
              "tagType": "enum",
              "name": "errorRCEmergencyStop"
            },
            "details": "RC emergency stop"
          },
          "errorRealTime": {
            "info": {
              "tagType": "enum",
              "name": "errorRealTime"
            },
            "details": "Motor controler scheduler real_time out of bounds"
          },
          "errorMotorSetting": {
            "info": {
              "tagType": "enum",
              "name": "errorMotorSetting"
            },
            "details": "One or several incorrect values in motor settings"
          },
          "errorTemperature": {
            "info": {
              "tagType": "enum",
              "name": "errorTemperature"
            },
            "details": "Too hot or too cold Cypress temperature"
          },
          "errorBatteryVoltage": {
            "info": {
              "tagType": "enum",
              "name": "errorBatteryVoltage"
            },
            "details": "Battery voltage out of bounds"
          },
          "errorLipoCells": {
            "info": {
              "tagType": "enum",
              "name": "errorLipoCells"
            },
            "details": "Incorrect number of LIPO cells"
          },
          "errorMOSFET": {
            "info": {
              "tagType": "enum",
              "name": "errorMOSFET"
            },
            "details": "Defectuous MOSFET or broken motor phases"
          },
          "errorBootloader": {
            "info": {
              "tagType": "enum",
              "name": "errorBootloader"
            },
            "details": "Not use for BLDC but useful for HAL"
          },
          "errorAssert": {
            "info": {
              "tagType": "enum",
              "name": "errorAssert"
            },
            "details": "Error Made by BLDC_ASSERT()"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "motorIds",
          "1": "motorError"
        }
      },
      "MotorSoftwareVersionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MotorSoftwareVersionChanged",
          "id": 3,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Motor version",
            "desc": "Motor version."
          }
        },
        "version": {
          "info": {
            "tagType": "arg",
            "name": "version",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "name of the version : dot separated fields (major version _ minor version _ firmware type _ nb motors handled). Firmware types : Release, Debug, Alpha, Test_bench",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "version"
        }
      },
      "MotorFlightsStatusChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MotorFlightsStatusChanged",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Motor flight status",
            "desc": "Motor flight status.",
            "support": "0901;090c;090e",
            "triggered": "at connection."
          }
        },
        "nbFlights": {
          "info": {
            "tagType": "arg",
            "name": "nbFlights",
            "type": "u16",
            "id": 0,
            "bytes": 2
          },
          "details": "total number of flights",
          "lookup": {},
          "value": null
        },
        "lastFlightDuration": {
          "info": {
            "tagType": "arg",
            "name": "lastFlightDuration",
            "type": "u16",
            "id": 1,
            "bytes": 2
          },
          "details": "Duration of the last flight (in seconds)",
          "lookup": {},
          "value": null
        },
        "totalFlightDuration": {
          "info": {
            "tagType": "arg",
            "name": "totalFlightDuration",
            "type": "u32",
            "id": 2,
            "bytes": 4
          },
          "details": "Duration of all flights (in seconds)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "nbFlights",
          "1": "lastFlightDuration",
          "2": "totalFlightDuration"
        }
      },
      "MotorErrorLastErrorChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MotorErrorLastErrorChanged",
          "id": 5
        },
        "comment": {
          "info": {
            "title": "Last motor error",
            "desc": "Last motor error.\\n This is a reminder of the last error. To know if a motor error is currently happening, see [MotorError](#1_16_2).",
            "support": "0901;090c;090e",
            "triggered": "at connection and when an error occurs."
          }
        },
        "motorError": {
          "info": {
            "tagType": "arg",
            "name": "motorError",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Enumeration of the motor error",
          "noError": {
            "info": {
              "tagType": "enum",
              "name": "noError"
            },
            "details": "No error detected"
          },
          "errorEEPRom": {
            "info": {
              "tagType": "enum",
              "name": "errorEEPRom"
            },
            "details": "EEPROM access failure"
          },
          "errorMotorStalled": {
            "info": {
              "tagType": "enum",
              "name": "errorMotorStalled"
            },
            "details": "Motor stalled"
          },
          "errorPropellerSecurity": {
            "info": {
              "tagType": "enum",
              "name": "errorPropellerSecurity"
            },
            "details": "Propeller cutout security triggered"
          },
          "errorCommLost": {
            "info": {
              "tagType": "enum",
              "name": "errorCommLost"
            },
            "details": "Communication with motor failed by timeout"
          },
          "errorRCEmergencyStop": {
            "info": {
              "tagType": "enum",
              "name": "errorRCEmergencyStop"
            },
            "details": "RC emergency stop"
          },
          "errorRealTime": {
            "info": {
              "tagType": "enum",
              "name": "errorRealTime"
            },
            "details": "Motor controler scheduler real_time out of bounds"
          },
          "errorMotorSetting": {
            "info": {
              "tagType": "enum",
              "name": "errorMotorSetting"
            },
            "details": "One or several incorrect values in motor settings"
          },
          "errorBatteryVoltage": {
            "info": {
              "tagType": "enum",
              "name": "errorBatteryVoltage"
            },
            "details": "Battery voltage out of bounds"
          },
          "errorLipoCells": {
            "info": {
              "tagType": "enum",
              "name": "errorLipoCells"
            },
            "details": "Incorrect number of LIPO cells"
          },
          "errorMOSFET": {
            "info": {
              "tagType": "enum",
              "name": "errorMOSFET"
            },
            "details": "Defectuous MOSFET or broken motor phases"
          },
          "errorTemperature": {
            "info": {
              "tagType": "enum",
              "name": "errorTemperature"
            },
            "details": "Too hot or too cold Cypress temperature"
          },
          "errorBootloader": {
            "info": {
              "tagType": "enum",
              "name": "errorBootloader"
            },
            "details": "Not use for BLDC but useful for HAL"
          },
          "errorAssert": {
            "info": {
              "tagType": "enum",
              "name": "errorAssert"
            },
            "details": "Error Made by BLDC_ASSERT()"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "motorError"
        }
      },
      "P7ID": {
        "info": {
          "tagType": "cmd",
          "name": "P7ID",
          "id": 6,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "P7ID",
            "desc": "P7ID."
          }
        },
        "serialID": {
          "info": {
            "tagType": "arg",
            "name": "serialID",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Product P7ID",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "serialID"
        }
      },
      "CPUID": {
        "info": {
          "tagType": "cmd",
          "name": "CPUID",
          "id": 7
        },
        "details": "Product main cpu id",
        "id": {
          "info": {
            "tagType": "arg",
            "name": "id",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Product main cpu id",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "id"
        }
      },
      "lookup": {
        "0": "ProductMotorVersionListChanged",
        "1": "ProductGPSVersionChanged",
        "2": "MotorErrorStateChanged",
        "3": "MotorSoftwareVersionChanged",
        "4": "MotorFlightsStatusChanged",
        "5": "MotorErrorLastErrorChanged",
        "6": "P7ID",
        "7": "CPUID"
      }
    },
    "PictureSettings": {
      "info": {
        "tagType": "class",
        "name": "PictureSettings",
        "id": 19
      },
      "details": "Photo settings chosen by the user",
      "PictureFormatSelection": {
        "info": {
          "tagType": "cmd",
          "name": "PictureFormatSelection",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Set picture format",
            "desc": "Set picture format.\\n Please note that the time required to take the picture is highly related to this format.\\n Also, please note that if your picture format is different from snapshot, picture taking will stop video recording (it will restart after the picture has been taken).",
            "support": "0901;090c;090e",
            "result": "The picture format is set.\\n Then, event [PictureFormat](#1_20_0) is triggered."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of photo format",
          "raw": {
            "info": {
              "tagType": "enum",
              "name": "raw"
            },
            "details": "Take raw image"
          },
          "jpeg": {
            "info": {
              "tagType": "enum",
              "name": "jpeg"
            },
            "details": "Take a 4_3 jpeg photo"
          },
          "snapshot": {
            "info": {
              "tagType": "enum",
              "name": "snapshot"
            },
            "details": "Take a 16_9 snapshot from camera"
          },
          "jpeg_fisheye": {
            "info": {
              "tagType": "enum",
              "name": "jpeg_fisheye"
            },
            "details": "Take jpeg fisheye image only"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type"
        }
      },
      "AutoWhiteBalanceSelection": {
        "info": {
          "tagType": "cmd",
          "name": "AutoWhiteBalanceSelection",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Set White Balance mode",
            "desc": "Set White Balance mode.",
            "support": "0901;090c;090e",
            "result": "The white balance mode is set.\\n Then, event [WhiteBalanceMode](#1_20_1) is triggered."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type auto white balance",
          "auto": {
            "info": {
              "tagType": "enum",
              "name": "auto"
            },
            "details": "Auto guess of best white balance params"
          },
          "tungsten": {
            "info": {
              "tagType": "enum",
              "name": "tungsten"
            },
            "details": "Tungsten white balance"
          },
          "daylight": {
            "info": {
              "tagType": "enum",
              "name": "daylight"
            },
            "details": "Daylight white balance"
          },
          "cloudy": {
            "info": {
              "tagType": "enum",
              "name": "cloudy"
            },
            "details": "Cloudy white balance"
          },
          "cool_white": {
            "info": {
              "tagType": "enum",
              "name": "cool_white"
            },
            "details": "White balance for a flash"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type"
        }
      },
      "ExpositionSelection": {
        "info": {
          "tagType": "cmd",
          "name": "ExpositionSelection",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Set image exposure",
            "desc": "Set image exposure.",
            "support": "0901;090c;090e",
            "result": "The exposure is set.\\n Then, event [ImageExposure](#1_20_2) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Exposition value (bounds given by ExpositionChanged arg min and max, by default [_3_3])",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "SaturationSelection": {
        "info": {
          "tagType": "cmd",
          "name": "SaturationSelection",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Set image saturation",
            "desc": "Set image saturation.",
            "support": "0901;090c;090e",
            "result": "The saturation is set.\\n Then, event [ImageSaturation](#1_20_3) is triggered."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Saturation value (bounds given by SaturationChanged arg min and max, by default [_100_100])",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value"
        }
      },
      "TimelapseSelection": {
        "info": {
          "tagType": "cmd",
          "name": "TimelapseSelection",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Set timelapse mode",
            "desc": "Set timelapse mode.\\n If timelapse mode is set, instead of taking a video, the drone will take picture regularly.\\n Watch out, this command only configure the timelapse mode. Once it is configured, you can start/stop the timelapse with the [RecordVideo](#1_7_3) command.",
            "support": "0901;090c;090e",
            "result": "The timelapse mode is set (but not started).\\n Then, event [TimelapseMode](#1_20_4) is triggered."
          }
        },
        "enabled": {
          "info": {
            "tagType": "arg",
            "name": "enabled",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if timelapse is enabled, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "interval": {
          "info": {
            "tagType": "arg",
            "name": "interval",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "interval in seconds for taking pictures",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "enabled",
          "1": "interval"
        }
      },
      "VideoAutorecordSelection": {
        "info": {
          "tagType": "cmd",
          "name": "VideoAutorecordSelection",
          "id": 5
        },
        "comment": {
          "info": {
            "title": "Set video autorecord mode",
            "desc": "Set video autorecord mode.\\n If autorecord is set, video record will be automatically started when the drone takes off and stopped slightly after landing.",
            "support": "0901;090c;090e",
            "result": "The autorecord mode is set.\\n Then, event [AutorecordMode](#1_20_5) is triggered."
          }
        },
        "enabled": {
          "info": {
            "tagType": "arg",
            "name": "enabled",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if video autorecord is enabled, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "Mass storage id to take video",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "enabled",
          "1": "mass_storage_id"
        }
      },
      "VideoStabilizationMode": {
        "info": {
          "tagType": "cmd",
          "name": "VideoStabilizationMode",
          "id": 6
        },
        "comment": {
          "info": {
            "title": "Set video stabilization mode",
            "desc": "Set video stabilization mode.",
            "support": "0901_3.4.0;090c_3.4.0;090e",
            "result": "The video stabilization mode is set.\\n Then, event [VideoStabilizationMode](#1_20_6) is triggered."
          }
        },
        "mode": {
          "info": {
            "tagType": "arg",
            "name": "mode",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Video stabilization mode",
          "roll_pitch": {
            "info": {
              "tagType": "enum",
              "name": "roll_pitch"
            },
            "details": "Video flat on roll and pitch"
          },
          "pitch": {
            "info": {
              "tagType": "enum",
              "name": "pitch"
            },
            "details": "Video flat on pitch only"
          },
          "roll": {
            "info": {
              "tagType": "enum",
              "name": "roll"
            },
            "details": "Video flat on roll only"
          },
          "none": {
            "info": {
              "tagType": "enum",
              "name": "none"
            },
            "details": "Video follows drone angles"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mode"
        }
      },
      "VideoRecordingMode": {
        "info": {
          "tagType": "cmd",
          "name": "VideoRecordingMode",
          "id": 7
        },
        "comment": {
          "info": {
            "title": "Set video recording mode",
            "desc": "Set video recording mode.",
            "support": "0901_3.4.0;090c_3.4.0;090e",
            "result": "The video recording mode is set.\\n Then, event [VideoRecordingMode](#1_20_7) is triggered."
          }
        },
        "mode": {
          "info": {
            "tagType": "arg",
            "name": "mode",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Video recording mode",
          "quality": {
            "info": {
              "tagType": "enum",
              "name": "quality"
            },
            "details": "Maximize recording quality."
          },
          "time": {
            "info": {
              "tagType": "enum",
              "name": "time"
            },
            "details": "Maximize recording time."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mode"
        }
      },
      "VideoFramerate": {
        "info": {
          "tagType": "cmd",
          "name": "VideoFramerate",
          "id": 8
        },
        "comment": {
          "info": {
            "title": "Set video framerate",
            "desc": "Set video framerate.",
            "support": "0901_3.4.0;090c_3.4.0;090e",
            "result": "The video framerate is set.\\n Then, event [VideoFramerate](#1_20_8) is triggered."
          }
        },
        "framerate": {
          "info": {
            "tagType": "arg",
            "name": "framerate",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Video framerate",
          "_24_FPS": {
            "info": {
              "tagType": "enum",
              "name": "_24_FPS"
            },
            "details": "23.976 frames per second."
          },
          "_25_FPS": {
            "info": {
              "tagType": "enum",
              "name": "_25_FPS"
            },
            "details": "25 frames per second."
          },
          "_30_FPS": {
            "info": {
              "tagType": "enum",
              "name": "_30_FPS"
            },
            "details": "29.97 frames per second."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "framerate"
        }
      },
      "VideoResolutions": {
        "info": {
          "tagType": "cmd",
          "name": "VideoResolutions",
          "id": 9
        },
        "comment": {
          "info": {
            "title": "Set video resolutions",
            "desc": "Set video streaming and recording resolutions.",
            "support": "0901_3.4.0;090c_3.4.0;090e",
            "result": "The video resolutions is set.\\n Then, event [VideoResolutions](#1_20_9) is triggered."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Video streaming and recording resolutions",
          "rec1080_stream480": {
            "info": {
              "tagType": "enum",
              "name": "rec1080_stream480"
            },
            "details": "1080p recording, 480p streaming."
          },
          "rec720_stream720": {
            "info": {
              "tagType": "enum",
              "name": "rec720_stream720"
            },
            "details": "720p recording, 720p streaming."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type"
        }
      },
      "lookup": {
        "0": "PictureFormatSelection",
        "1": "AutoWhiteBalanceSelection",
        "2": "ExpositionSelection",
        "3": "SaturationSelection",
        "4": "TimelapseSelection",
        "5": "VideoAutorecordSelection",
        "6": "VideoStabilizationMode",
        "7": "VideoRecordingMode",
        "8": "VideoFramerate",
        "9": "VideoResolutions"
      }
    },
    "PictureSettingsState": {
      "info": {
        "tagType": "class",
        "name": "PictureSettingsState",
        "id": 20
      },
      "details": "Photo settings state from product",
      "PictureFormatChanged": {
        "info": {
          "tagType": "cmd",
          "name": "PictureFormatChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Picture format",
            "desc": "Picture format.",
            "support": "0901;090c;090e",
            "triggered": "by [SetPictureFormat](#1_19_0)."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of photo format",
          "raw": {
            "info": {
              "tagType": "enum",
              "name": "raw"
            },
            "details": "Take raw image"
          },
          "jpeg": {
            "info": {
              "tagType": "enum",
              "name": "jpeg"
            },
            "details": "Take a 4_3 jpeg photo"
          },
          "snapshot": {
            "info": {
              "tagType": "enum",
              "name": "snapshot"
            },
            "details": "Take a 16_9 snapshot from camera"
          },
          "jpeg_fisheye": {
            "info": {
              "tagType": "enum",
              "name": "jpeg_fisheye"
            },
            "details": "Take jpeg fisheye image only"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type"
        }
      },
      "AutoWhiteBalanceChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AutoWhiteBalanceChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "White balance mode",
            "desc": "White balance mode.",
            "support": "0901;090c;090e",
            "triggered": "by [SetWhiteBalanceMode](#1_19_1)."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type auto white balance",
          "auto": {
            "info": {
              "tagType": "enum",
              "name": "auto"
            },
            "details": "Auto guess of best white balance params"
          },
          "tungsten": {
            "info": {
              "tagType": "enum",
              "name": "tungsten"
            },
            "details": "Tungsten white balance"
          },
          "daylight": {
            "info": {
              "tagType": "enum",
              "name": "daylight"
            },
            "details": "Daylight white balance"
          },
          "cloudy": {
            "info": {
              "tagType": "enum",
              "name": "cloudy"
            },
            "details": "Cloudy white balance"
          },
          "cool_white": {
            "info": {
              "tagType": "enum",
              "name": "cool_white"
            },
            "details": "White balance for a flash"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type"
        }
      },
      "ExpositionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ExpositionChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Image exposure",
            "desc": "Image exposure.",
            "support": "0901;090c;090e",
            "triggered": "by [SetImageExposure](#1_19_2)."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Exposure value",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Min exposure value",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Max exposure value",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value",
          "1": "min",
          "2": "max"
        }
      },
      "SaturationChanged": {
        "info": {
          "tagType": "cmd",
          "name": "SaturationChanged",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Image saturation",
            "desc": "Image saturation.",
            "support": "0901;090c;090e",
            "triggered": "by [SetImageSaturation](#1_19_3)."
          }
        },
        "value": {
          "info": {
            "tagType": "arg",
            "name": "value",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Saturation value",
          "lookup": {},
          "value": null
        },
        "min": {
          "info": {
            "tagType": "arg",
            "name": "min",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Min saturation value",
          "lookup": {},
          "value": null
        },
        "max": {
          "info": {
            "tagType": "arg",
            "name": "max",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Max saturation value",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "value",
          "1": "min",
          "2": "max"
        }
      },
      "TimelapseChanged": {
        "info": {
          "tagType": "cmd",
          "name": "TimelapseChanged",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Timelapse mode",
            "desc": "Timelapse mode.",
            "support": "0901;090c;090e",
            "triggered": "by [SetTimelapseMode](#1_19_4)."
          }
        },
        "enabled": {
          "info": {
            "tagType": "arg",
            "name": "enabled",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if timelapse is enabled, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "interval": {
          "info": {
            "tagType": "arg",
            "name": "interval",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "interval in seconds for taking pictures",
          "lookup": {},
          "value": null
        },
        "minInterval": {
          "info": {
            "tagType": "arg",
            "name": "minInterval",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Minimal interval for taking pictures",
          "lookup": {},
          "value": null
        },
        "maxInterval": {
          "info": {
            "tagType": "arg",
            "name": "maxInterval",
            "type": "float",
            "id": 3,
            "bytes": 4
          },
          "details": "Maximal interval for taking pictures",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "enabled",
          "1": "interval",
          "2": "minInterval",
          "3": "maxInterval"
        }
      },
      "VideoAutorecordChanged": {
        "info": {
          "tagType": "cmd",
          "name": "VideoAutorecordChanged",
          "id": 5
        },
        "comment": {
          "info": {
            "title": "Video Autorecord mode",
            "desc": "Video Autorecord mode.",
            "support": "0901;090c;090e",
            "triggered": "by [SetVideoAutorecordMode](#1_19_5)."
          }
        },
        "enabled": {
          "info": {
            "tagType": "arg",
            "name": "enabled",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if video autorecord is enabled, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "Mass storage id for the taken video",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "enabled",
          "1": "mass_storage_id"
        }
      },
      "VideoStabilizationModeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "VideoStabilizationModeChanged",
          "id": 6
        },
        "comment": {
          "info": {
            "title": "Video stabilization mode",
            "desc": "Video stabilization mode.",
            "support": "0901_3.4.0;090c_3.4.0;090e",
            "triggered": "by [SetVideoStabilizationMode](#1_19_6)."
          }
        },
        "mode": {
          "info": {
            "tagType": "arg",
            "name": "mode",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Video stabilization mode",
          "roll_pitch": {
            "info": {
              "tagType": "enum",
              "name": "roll_pitch"
            },
            "details": "Video flat on roll and pitch"
          },
          "pitch": {
            "info": {
              "tagType": "enum",
              "name": "pitch"
            },
            "details": "Video flat on pitch only"
          },
          "roll": {
            "info": {
              "tagType": "enum",
              "name": "roll"
            },
            "details": "Video flat on roll only"
          },
          "none": {
            "info": {
              "tagType": "enum",
              "name": "none"
            },
            "details": "Video follows drone angles"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mode"
        }
      },
      "VideoRecordingModeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "VideoRecordingModeChanged",
          "id": 7
        },
        "comment": {
          "info": {
            "title": "Video recording mode",
            "desc": "Video recording mode.",
            "support": "0901_3.4.0;090c_3.4.0;090e",
            "triggered": "by [SetVideoRecordingMode](#1_19_7)."
          }
        },
        "mode": {
          "info": {
            "tagType": "arg",
            "name": "mode",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Video recording mode",
          "quality": {
            "info": {
              "tagType": "enum",
              "name": "quality"
            },
            "details": "Maximize recording quality."
          },
          "time": {
            "info": {
              "tagType": "enum",
              "name": "time"
            },
            "details": "Maximize recording time."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mode"
        }
      },
      "VideoFramerateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "VideoFramerateChanged",
          "id": 8
        },
        "comment": {
          "info": {
            "title": "Video framerate",
            "desc": "Video framerate.",
            "support": "0901_3.4.0;090c_3.4.0;090e",
            "triggered": "by [SetVideoFramerateMode](#1_19_8)."
          }
        },
        "framerate": {
          "info": {
            "tagType": "arg",
            "name": "framerate",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Video framerate",
          "_24_FPS": {
            "info": {
              "tagType": "enum",
              "name": "_24_FPS"
            },
            "details": "23.976 frames per second."
          },
          "_25_FPS": {
            "info": {
              "tagType": "enum",
              "name": "_25_FPS"
            },
            "details": "25 frames per second."
          },
          "_30_FPS": {
            "info": {
              "tagType": "enum",
              "name": "_30_FPS"
            },
            "details": "29.97 frames per second."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "framerate"
        }
      },
      "VideoResolutionsChanged": {
        "info": {
          "tagType": "cmd",
          "name": "VideoResolutionsChanged",
          "id": 9
        },
        "comment": {
          "info": {
            "title": "Video resolutions",
            "desc": "Video resolutions.\\n This event informs about the recording AND streaming resolutions.",
            "support": "0901_3.4.0;090c_3.4.0;090e",
            "triggered": "by [SetVideResolutions](#1_19_9)."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Video resolution type.",
          "rec1080_stream480": {
            "info": {
              "tagType": "enum",
              "name": "rec1080_stream480"
            },
            "details": "1080p recording, 480p streaming."
          },
          "rec720_stream720": {
            "info": {
              "tagType": "enum",
              "name": "rec720_stream720"
            },
            "details": "720p recording, 720p streaming."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type"
        }
      },
      "lookup": {
        "0": "PictureFormatChanged",
        "1": "AutoWhiteBalanceChanged",
        "2": "ExpositionChanged",
        "3": "SaturationChanged",
        "4": "TimelapseChanged",
        "5": "VideoAutorecordChanged",
        "6": "VideoStabilizationModeChanged",
        "7": "VideoRecordingModeChanged",
        "8": "VideoFramerateChanged",
        "9": "VideoResolutionsChanged"
      }
    },
    "MediaStreaming": {
      "info": {
        "tagType": "class",
        "name": "MediaStreaming",
        "id": 21
      },
      "details": "Control media streaming behavior.",
      "VideoEnable": {
        "info": {
          "tagType": "cmd",
          "name": "VideoEnable",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Enable/disable video streaming",
            "desc": "Enable/disable video streaming.",
            "support": "0901;090c;090e",
            "result": "The video stream is started or stopped.\\n Then, event [VideoStreamState](#1_22_0) is triggered."
          }
        },
        "enable": {
          "info": {
            "tagType": "arg",
            "name": "enable",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 to enable, 0 to disable.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "enable"
        }
      },
      "VideoStreamMode": {
        "info": {
          "tagType": "cmd",
          "name": "VideoStreamMode",
          "id": 1
        },
        "details": "Video stream mode",
        "mode": {
          "info": {
            "tagType": "arg",
            "name": "mode",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "stream mode",
          "low_latency": {
            "info": {
              "tagType": "enum",
              "name": "low_latency"
            },
            "details": "Minimize latency with average reliability (best for piloting)."
          },
          "high_reliability": {
            "info": {
              "tagType": "enum",
              "name": "high_reliability"
            },
            "details": "Maximize the reliability with an average latency (best when streaming quality is important but not the latency)."
          },
          "high_reliability_low_framerate": {
            "info": {
              "tagType": "enum",
              "name": "high_reliability_low_framerate"
            },
            "details": "Maximize the reliability using a framerate decimation with an average latency (best when streaming quality is important but not the latency)."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mode"
        }
      },
      "lookup": {
        "0": "VideoEnable",
        "1": "VideoStreamMode"
      }
    },
    "MediaStreamingState": {
      "info": {
        "tagType": "class",
        "name": "MediaStreamingState",
        "id": 22
      },
      "details": "Media streaming status.",
      "VideoEnableChanged": {
        "info": {
          "tagType": "cmd",
          "name": "VideoEnableChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Video stream state",
            "desc": "Video stream state.",
            "support": "0901;090c;090e",
            "triggered": "by [EnableOrDisableVideoStream](#1_21_0)."
          }
        },
        "enabled": {
          "info": {
            "tagType": "arg",
            "name": "enabled",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Current video streaming status.",
          "enabled": {
            "info": {
              "tagType": "enum",
              "name": "enabled"
            },
            "details": "Video streaming is enabled."
          },
          "disabled": {
            "info": {
              "tagType": "enum",
              "name": "disabled"
            },
            "details": "Video streaming is disabled."
          },
          "error": {
            "info": {
              "tagType": "enum",
              "name": "error"
            },
            "details": "Video streaming failed to start."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "enabled"
        }
      },
      "VideoStreamModeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "VideoStreamModeChanged",
          "id": 1
        },
        "details": "Video stream mode state",
        "mode": {
          "info": {
            "tagType": "arg",
            "name": "mode",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "stream mode",
          "low_latency": {
            "info": {
              "tagType": "enum",
              "name": "low_latency"
            },
            "details": "Minimize latency with average reliability (best for piloting)."
          },
          "high_reliability": {
            "info": {
              "tagType": "enum",
              "name": "high_reliability"
            },
            "details": "Maximize the reliability with an average latency (best when streaming quality is important but not the latency)."
          },
          "high_reliability_low_framerate": {
            "info": {
              "tagType": "enum",
              "name": "high_reliability_low_framerate"
            },
            "details": "Maximize the reliability using a framerate decimation with an average latency (best when streaming quality is important but not the latency)."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mode"
        }
      },
      "lookup": {
        "0": "VideoEnableChanged",
        "1": "VideoStreamModeChanged"
      }
    },
    "GPSSettings": {
      "info": {
        "tagType": "class",
        "name": "GPSSettings",
        "id": 23
      },
      "details": "GPS settings",
      "SetHome": {
        "info": {
          "tagType": "cmd",
          "name": "SetHome",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Set home position",
            "desc": "Set home position."
          }
        },
        "latitude": {
          "info": {
            "tagType": "arg",
            "name": "latitude",
            "type": "double",
            "id": 0,
            "bytes": 1
          },
          "details": "Home latitude in decimal degrees",
          "lookup": {},
          "value": null
        },
        "longitude": {
          "info": {
            "tagType": "arg",
            "name": "longitude",
            "type": "double",
            "id": 1,
            "bytes": 1
          },
          "details": "Home longitude in decimal degrees",
          "lookup": {},
          "value": null
        },
        "altitude": {
          "info": {
            "tagType": "arg",
            "name": "altitude",
            "type": "double",
            "id": 2,
            "bytes": 1
          },
          "details": "Home altitude in meters",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "latitude",
          "1": "longitude",
          "2": "altitude"
        }
      },
      "ResetHome": {
        "info": {
          "tagType": "cmd",
          "name": "ResetHome",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Reset home position",
            "desc": "Reset home position.",
            "support": "0901;090c;090e",
            "result": "The home position is reset.\\n Then, event [HomeLocationReset](#1_24_1) is triggered."
          }
        },
        "lookup": {}
      },
      "SendControllerGPS": {
        "info": {
          "tagType": "cmd",
          "name": "SendControllerGPS",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Set controller gps location",
            "desc": "Set controller gps location.\\n The user location might be used in case of return home, according to the home type and the accuracy of the given position. You can get the current home type with the event [HomeType](#1_24_4).",
            "support": "0901;090c;090e",
            "result": "The controller position is known by the drone.\\n Then, event [HomeLocation](#1_24_2) is triggered."
          }
        },
        "latitude": {
          "info": {
            "tagType": "arg",
            "name": "latitude",
            "type": "double",
            "id": 0,
            "bytes": 1
          },
          "details": "GPS latitude in decimal degrees",
          "lookup": {},
          "value": null
        },
        "longitude": {
          "info": {
            "tagType": "arg",
            "name": "longitude",
            "type": "double",
            "id": 1,
            "bytes": 1
          },
          "details": "GPS longitude in decimal degrees",
          "lookup": {},
          "value": null
        },
        "altitude": {
          "info": {
            "tagType": "arg",
            "name": "altitude",
            "type": "double",
            "id": 2,
            "bytes": 1
          },
          "details": "GPS altitude in meters",
          "lookup": {},
          "value": null
        },
        "horizontalAccuracy": {
          "info": {
            "tagType": "arg",
            "name": "horizontalAccuracy",
            "type": "double",
            "id": 3,
            "bytes": 1
          },
          "details": "Horizontal Accuracy in meter ; equal _1 if no horizontal Accuracy",
          "lookup": {},
          "value": null
        },
        "verticalAccuracy": {
          "info": {
            "tagType": "arg",
            "name": "verticalAccuracy",
            "type": "double",
            "id": 4,
            "bytes": 1
          },
          "details": "Vertical Accuracy in meter ; equal _1 if no vertical Accuracy",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "latitude",
          "1": "longitude",
          "2": "altitude",
          "3": "horizontalAccuracy",
          "4": "verticalAccuracy"
        }
      },
      "HomeType": {
        "info": {
          "tagType": "cmd",
          "name": "HomeType",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Set the preferred home type",
            "desc": "Set the preferred home type.\\n Please note that this is only a preference. The actual type chosen is given by the event [HomeType](#1_31_2).\\n You can get the currently available types with the event [HomeTypeAvailability](#1_31_1).",
            "support": "0901;090c;090e",
            "result": "The user choice is known by the drone.\\n Then, event [PreferredHomeType](#1_24_4) is triggered."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of the home position",
          "TAKEOFF": {
            "info": {
              "tagType": "enum",
              "name": "TAKEOFF"
            },
            "details": "The drone will try to return to the take off position"
          },
          "PILOT": {
            "info": {
              "tagType": "enum",
              "name": "PILOT"
            },
            "details": "The drone will try to return to the pilot position"
          },
          "FOLLOWEE": {
            "info": {
              "tagType": "enum",
              "name": "FOLLOWEE"
            },
            "details": "The drone will try to return to the target of the current (or last) follow me"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type"
        }
      },
      "ReturnHomeDelay": {
        "info": {
          "tagType": "cmd",
          "name": "ReturnHomeDelay",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Set the return home delay",
            "desc": "Set the delay after which the drone will automatically try to return home after a disconnection.",
            "support": "0901;090c;090e",
            "result": "The delay of the return home is set.\\n Then, event [ReturnHomeDelay](#1_24_5) is triggered."
          }
        },
        "delay": {
          "info": {
            "tagType": "arg",
            "name": "delay",
            "type": "u16",
            "id": 0,
            "bytes": 2
          },
          "details": "Delay in second",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "delay"
        }
      },
      "lookup": {
        "0": "SetHome",
        "1": "ResetHome",
        "2": "SendControllerGPS",
        "3": "HomeType",
        "4": "ReturnHomeDelay"
      }
    },
    "GPSSettingsState": {
      "info": {
        "tagType": "class",
        "name": "GPSSettingsState",
        "id": 24
      },
      "details": "GPS settings state",
      "HomeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "HomeChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Home location",
            "desc": "Home location.",
            "support": "0901;090c;090e",
            "triggered": "when [HomeType](#1_31_2) changes. Or by [SetHomeLocation](#1_23_2) when [HomeType](#1_31_2) is Pilot. Or regularly after [SetControllerGPS](#140_1) when [HomeType](#1_31_2) is FollowMeTarget. Or at take off [HomeType](#1_31_2) is Takeoff. Or when the first fix occurs and the [HomeType](#1_31_2) is FirstFix."
          }
        },
        "latitude": {
          "info": {
            "tagType": "arg",
            "name": "latitude",
            "type": "double",
            "id": 0,
            "bytes": 1
          },
          "details": "Home latitude in decimal degrees",
          "lookup": {},
          "value": null
        },
        "longitude": {
          "info": {
            "tagType": "arg",
            "name": "longitude",
            "type": "double",
            "id": 1,
            "bytes": 1
          },
          "details": "Home longitude in decimal degrees",
          "lookup": {},
          "value": null
        },
        "altitude": {
          "info": {
            "tagType": "arg",
            "name": "altitude",
            "type": "double",
            "id": 2,
            "bytes": 1
          },
          "details": "Home altitude in meters",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "latitude",
          "1": "longitude",
          "2": "altitude"
        }
      },
      "ResetHomeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ResetHomeChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Home location has been reset",
            "desc": "Home location has been reset.",
            "support": "0901;090c;090e",
            "triggered": "by [ResetHomeLocation](#1_23_1)."
          }
        },
        "latitude": {
          "info": {
            "tagType": "arg",
            "name": "latitude",
            "type": "double",
            "id": 0,
            "bytes": 1
          },
          "details": "Home latitude in decimal degrees",
          "lookup": {},
          "value": null
        },
        "longitude": {
          "info": {
            "tagType": "arg",
            "name": "longitude",
            "type": "double",
            "id": 1,
            "bytes": 1
          },
          "details": "Home longitude in decimal degrees",
          "lookup": {},
          "value": null
        },
        "altitude": {
          "info": {
            "tagType": "arg",
            "name": "altitude",
            "type": "double",
            "id": 2,
            "bytes": 1
          },
          "details": "Home altitude in meters",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "latitude",
          "1": "longitude",
          "2": "altitude"
        }
      },
      "GPSFixStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "GPSFixStateChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Gps fix info",
            "desc": "Gps fix info.",
            "support": "0901;090c;090e",
            "triggered": "on change."
          }
        },
        "fixed": {
          "info": {
            "tagType": "arg",
            "name": "fixed",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if gps on drone is fixed, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "fixed"
        }
      },
      "GPSUpdateStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "GPSUpdateStateChanged",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Gps update state",
            "desc": "Gps update state.",
            "support": "0901;090c;090e",
            "triggered": "on change."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The state of the gps update",
          "updated": {
            "info": {
              "tagType": "enum",
              "name": "updated"
            },
            "details": "Drone GPS update succeed"
          },
          "inProgress": {
            "info": {
              "tagType": "enum",
              "name": "inProgress"
            },
            "details": "Drone GPS update In progress"
          },
          "failed": {
            "info": {
              "tagType": "enum",
              "name": "failed"
            },
            "details": "Drone GPS update failed"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state"
        }
      },
      "HomeTypeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "HomeTypeChanged",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Preferred home type",
            "desc": "User preference for the home type.\\n See [HomeType](#1_31_2) to get the drone actual home type.",
            "support": "0901;090c;090e",
            "triggered": "by [SetPreferredHomeType](#1_23_3)."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of the home position",
          "TAKEOFF": {
            "info": {
              "tagType": "enum",
              "name": "TAKEOFF"
            },
            "details": "The drone will try to return to the take off position"
          },
          "PILOT": {
            "info": {
              "tagType": "enum",
              "name": "PILOT"
            },
            "details": "The drone will try to return to the pilot position"
          },
          "FOLLOWEE": {
            "info": {
              "tagType": "enum",
              "name": "FOLLOWEE"
            },
            "details": "The drone will try to return to the target of the current (or last) follow me"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type"
        }
      },
      "ReturnHomeDelayChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ReturnHomeDelayChanged",
          "id": 5
        },
        "comment": {
          "info": {
            "title": "Return home delay",
            "desc": "Return home trigger delay. This delay represents the time after which the return home is automatically triggered after a disconnection.",
            "support": "0901;090c;090e",
            "triggered": "by [SetReturnHomeDelay](#1_23_4)."
          }
        },
        "delay": {
          "info": {
            "tagType": "arg",
            "name": "delay",
            "type": "u16",
            "id": 0,
            "bytes": 2
          },
          "details": "Delay in second",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "delay"
        }
      },
      "lookup": {
        "0": "HomeChanged",
        "1": "ResetHomeChanged",
        "2": "GPSFixStateChanged",
        "3": "GPSUpdateStateChanged",
        "4": "HomeTypeChanged",
        "5": "ReturnHomeDelayChanged"
      }
    },
    "CameraState": {
      "info": {
        "tagType": "class",
        "name": "CameraState",
        "id": 25
      },
      "details": "Camera state",
      "Orientation": {
        "info": {
          "tagType": "cmd",
          "name": "Orientation",
          "id": 0,
          "buffer": "NON_ACK",
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Camera orientation",
            "desc": "Camera orientation.",
            "support": "0901;090c;090e",
            "triggered": "by [SetCameraOrientation](#1_1_0)."
          }
        },
        "tilt": {
          "info": {
            "tagType": "arg",
            "name": "tilt",
            "type": "i8",
            "id": 0,
            "bytes": 1
          },
          "details": "Tilt camera consign for the drone [_100;100]",
          "lookup": {},
          "value": null
        },
        "pan": {
          "info": {
            "tagType": "arg",
            "name": "pan",
            "type": "i8",
            "id": 1,
            "bytes": 1
          },
          "details": "Pan camera consign for the drone [_100;100]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "tilt",
          "1": "pan"
        }
      },
      "defaultCameraOrientation": {
        "info": {
          "tagType": "cmd",
          "name": "defaultCameraOrientation",
          "id": 1,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Orientation of the camera center",
            "desc": "Orientation of the center of the camera.\\n This is the value to send when you want to center the camera.",
            "support": "0901;090c;090e",
            "triggered": "at connection."
          }
        },
        "tilt": {
          "info": {
            "tagType": "arg",
            "name": "tilt",
            "type": "i8",
            "id": 0,
            "bytes": 1
          },
          "details": "Tilt value (in degree)",
          "lookup": {},
          "value": null
        },
        "pan": {
          "info": {
            "tagType": "arg",
            "name": "pan",
            "type": "i8",
            "id": 1,
            "bytes": 1
          },
          "details": "Pan value (in degree)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "tilt",
          "1": "pan"
        }
      },
      "OrientationV2": {
        "info": {
          "tagType": "cmd",
          "name": "OrientationV2",
          "buffer": "NON_ACK",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Camera orientation",
            "desc": "Camera orientation with float arguments.",
            "support": "0901;090c;090e",
            "triggered": "by [SetCameraOrientationV2](#1_1_1)"
          }
        },
        "tilt": {
          "info": {
            "tagType": "arg",
            "name": "tilt",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Tilt camera consign for the drone [deg]",
          "lookup": {},
          "value": null
        },
        "pan": {
          "info": {
            "tagType": "arg",
            "name": "pan",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Pan camera consign for the drone [deg]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "tilt",
          "1": "pan"
        }
      },
      "defaultCameraOrientationV2": {
        "info": {
          "tagType": "cmd",
          "name": "defaultCameraOrientationV2",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Orientation of the camera center",
            "desc": "Orientation of the center of the camera.\\n This is the value to send when you want to center the camera.",
            "support": "0901;090c;090e",
            "triggered": "at connection."
          }
        },
        "tilt": {
          "info": {
            "tagType": "arg",
            "name": "tilt",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Tilt value [deg]",
          "lookup": {},
          "value": null
        },
        "pan": {
          "info": {
            "tagType": "arg",
            "name": "pan",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Pan value [deg]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "tilt",
          "1": "pan"
        }
      },
      "VelocityRange": {
        "info": {
          "tagType": "cmd",
          "name": "VelocityRange",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Camera velocity range",
            "desc": "Camera Orientation velocity limits.",
            "support": "0901;090c;090e",
            "triggered": "at connection."
          }
        },
        "max_tilt": {
          "info": {
            "tagType": "arg",
            "name": "max_tilt",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Absolute max tilt velocity [deg/s]",
          "lookup": {},
          "value": null
        },
        "max_pan": {
          "info": {
            "tagType": "arg",
            "name": "max_pan",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Absolute max pan velocity [deg/s]",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "max_tilt",
          "1": "max_pan"
        }
      },
      "lookup": {
        "0": "Orientation",
        "1": "defaultCameraOrientation",
        "2": "OrientationV2",
        "3": "defaultCameraOrientationV2",
        "4": "VelocityRange"
      }
    },
    "Antiflickering": {
      "info": {
        "tagType": "class",
        "name": "Antiflickering",
        "id": 29
      },
      "details": "Anti_flickering related commands",
      "electricFrequency": {
        "info": {
          "tagType": "cmd",
          "name": "electricFrequency",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Set the electric frequency",
            "desc": "Set the electric frequency of the surrounding lights.\\n This is used to avoid the video flickering in auto mode. You can get the current antiflickering mode with the event [AntiflickeringModeChanged](#1_30_1).",
            "support": "0901;090c;090e",
            "result": "The electric frequency is set.\\n Then, event [ElectricFrequency](#1_30_0) is triggered."
          }
        },
        "frequency": {
          "info": {
            "tagType": "arg",
            "name": "frequency",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Type of the electric frequency",
          "fiftyHertz": {
            "info": {
              "tagType": "enum",
              "name": "fiftyHertz"
            },
            "details": "Electric frequency of the country is 50hz"
          },
          "sixtyHertz": {
            "info": {
              "tagType": "enum",
              "name": "sixtyHertz"
            },
            "details": "Electric frequency of the country is 60hz"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "frequency"
        }
      },
      "setMode": {
        "info": {
          "tagType": "cmd",
          "name": "setMode",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Set the antiflickering mode",
            "desc": "Set the antiflickering mode.\\n If auto, the drone will detect when flickers appears on the video and trigger the antiflickering.\\n In this case, this electric frequency it will use will be the one specified in the event [ElectricFrequency](#1_29_0).\\n Forcing the antiflickering (FixedFiftyHertz or FixedFiftyHertz) can reduce luminosity of the video.",
            "support": "0901;090c;090e",
            "result": "The antiflickering mode is set.\\n Then, event [AntiflickeringMode](#1_30_1) is triggered."
          }
        },
        "mode": {
          "info": {
            "tagType": "arg",
            "name": "mode",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Mode of the anti flickering functionnality",
          "auto": {
            "info": {
              "tagType": "enum",
              "name": "auto"
            },
            "details": "Anti flickering based on the electric frequency previously sent"
          },
          "FixedFiftyHertz": {
            "info": {
              "tagType": "enum",
              "name": "FixedFiftyHertz"
            },
            "details": "Anti flickering based on a fixed frequency of 50Hz"
          },
          "FixedSixtyHertz": {
            "info": {
              "tagType": "enum",
              "name": "FixedSixtyHertz"
            },
            "details": "Anti flickering based on a fixed frequency of 60Hz"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mode"
        }
      },
      "lookup": {
        "0": "electricFrequency",
        "1": "setMode"
      }
    },
    "AntiflickeringState": {
      "info": {
        "tagType": "class",
        "name": "AntiflickeringState",
        "id": 30
      },
      "details": "Anti_flickering related states",
      "electricFrequencyChanged": {
        "info": {
          "tagType": "cmd",
          "name": "electricFrequencyChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Electric frequency",
            "desc": "Electric frequency.\\n This piece of information is used for the antiflickering when the [AntiflickeringMode](#1_30_1) is set to *auto*.",
            "support": "0901;090c;090e",
            "triggered": "by [SetElectricFrequency](#1_29_0)."
          }
        },
        "frequency": {
          "info": {
            "tagType": "arg",
            "name": "frequency",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Type of the electric frequency",
          "fiftyHertz": {
            "info": {
              "tagType": "enum",
              "name": "fiftyHertz"
            },
            "details": "Electric frequency of the country is 50hz"
          },
          "sixtyHertz": {
            "info": {
              "tagType": "enum",
              "name": "sixtyHertz"
            },
            "details": "Electric frequency of the country is 60hz"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "frequency"
        }
      },
      "modeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "modeChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Antiflickering mode",
            "desc": "Antiflickering mode.",
            "support": "0901;090c;090e",
            "triggered": "by [SetAntiflickeringMode](#1_29_1)."
          }
        },
        "mode": {
          "info": {
            "tagType": "arg",
            "name": "mode",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Mode of the anti flickering functionnality",
          "auto": {
            "info": {
              "tagType": "enum",
              "name": "auto"
            },
            "details": "Anti flickering based on the electric frequency previously sent"
          },
          "FixedFiftyHertz": {
            "info": {
              "tagType": "enum",
              "name": "FixedFiftyHertz"
            },
            "details": "Anti flickering based on a fixed frequency of 50Hz"
          },
          "FixedSixtyHertz": {
            "info": {
              "tagType": "enum",
              "name": "FixedSixtyHertz"
            },
            "details": "Anti flickering based on a fixed frequency of 60Hz"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mode"
        }
      },
      "lookup": {
        "0": "electricFrequencyChanged",
        "1": "modeChanged"
      }
    },
    "GPSState": {
      "info": {
        "tagType": "class",
        "name": "GPSState",
        "id": 31
      },
      "details": "GPS related States",
      "NumberOfSatelliteChanged": {
        "info": {
          "tagType": "cmd",
          "name": "NumberOfSatelliteChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Number of GPS satellites",
            "desc": "Number of GPS satellites.",
            "support": "0901;090c;090e",
            "triggered": "on change."
          }
        },
        "numberOfSatellite": {
          "info": {
            "tagType": "arg",
            "name": "numberOfSatellite",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "The number of satellite",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "numberOfSatellite"
        }
      },
      "HomeTypeAvailabilityChanged": {
        "info": {
          "tagType": "cmd",
          "name": "HomeTypeAvailabilityChanged",
          "id": 1,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Home type availability",
            "desc": "Home type availability.",
            "support": "0901;090c;090e",
            "triggered": "when the availability of, at least, one type changes.\\n This might be due to controller position availability, gps fix before take off or other reason."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of the return home",
          "TAKEOFF": {
            "info": {
              "tagType": "enum",
              "name": "TAKEOFF"
            },
            "details": "The drone has enough information to return to the take off position"
          },
          "PILOT": {
            "info": {
              "tagType": "enum",
              "name": "PILOT"
            },
            "details": "The drone has enough information to return to the pilot position"
          },
          "FIRST_FIX": {
            "info": {
              "tagType": "enum",
              "name": "FIRST_FIX"
            },
            "details": "The drone has not enough information, it will return to the first GPS fix"
          },
          "FOLLOWEE": {
            "info": {
              "tagType": "enum",
              "name": "FOLLOWEE"
            },
            "details": "The drone has enough information to return to the target of the current (or last) follow me"
          },
          "lookup": {},
          "value": null
        },
        "available": {
          "info": {
            "tagType": "arg",
            "name": "available",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "1 if this type is available, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type",
          "1": "available"
        }
      },
      "HomeTypeChosenChanged": {
        "info": {
          "tagType": "cmd",
          "name": "HomeTypeChosenChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Home type",
            "desc": "Home type.\\n This choice is made by the drone, according to the [PreferredHomeType](#1_24_4) and the [HomeTypeAvailability](#1_31_1). The drone will choose the type matching with the user preference only if this type is available. If not, it will chose a type in this order_\\n FOLLOWEE ; TAKEOFF ; PILOT ; FIRST_FIX",
            "support": "0901;090c;090e",
            "triggered": "when the return home type chosen by the drone changes.\\n This might be produced by a user preference triggered by [SetPreferedHomeType](#1_23_3) or by a change in the [HomeTypesAvailabilityChanged](#1_31_1)."
          }
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The type of the return home chosen",
          "TAKEOFF": {
            "info": {
              "tagType": "enum",
              "name": "TAKEOFF"
            },
            "details": "The drone will return to the take off position"
          },
          "PILOT": {
            "info": {
              "tagType": "enum",
              "name": "PILOT"
            },
            "details": "The drone will return to the pilot position In this case, the drone will use the position given by ARDrone3_SendControllerGPS"
          },
          "FIRST_FIX": {
            "info": {
              "tagType": "enum",
              "name": "FIRST_FIX"
            },
            "details": "The drone has not enough information, it will return to the first GPS fix"
          },
          "FOLLOWEE": {
            "info": {
              "tagType": "enum",
              "name": "FOLLOWEE"
            },
            "details": "The drone will return to the target of the current (or last) follow me In this case, the drone will use the position of the target of the followMe (given by ControllerInfo_GPS)"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "type"
        }
      },
      "lookup": {
        "0": "NumberOfSatelliteChanged",
        "1": "HomeTypeAvailabilityChanged",
        "2": "HomeTypeChosenChanged"
      }
    },
    "PROState": {
      "info": {
        "tagType": "class",
        "name": "PROState",
        "id": 32
      },
      "details": "Pro features enabled on the Bebop",
      "Features": {
        "info": {
          "tagType": "cmd",
          "name": "Features",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Pro features",
            "desc": "Pro features."
          }
        },
        "features": {
          "info": {
            "tagType": "arg",
            "name": "features",
            "type": "u64",
            "id": 0,
            "bytes": 1
          },
          "details": "Bitfield representing enabled features.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "features"
        }
      },
      "lookup": {
        "0": "Features"
      }
    },
    "lookup": {
      "0": "Piloting",
      "1": "Camera",
      "2": "PilotingSettings",
      "3": "MediaRecordEvent",
      "4": "PilotingState",
      "5": "Animations",
      "6": "PilotingSettingsState",
      "7": "MediaRecord",
      "8": "MediaRecordState",
      "9": "NetworkSettings",
      "10": "NetworkSettingsState",
      "11": "SpeedSettings",
      "12": "SpeedSettingsState",
      "13": "Network",
      "14": "NetworkState",
      "16": "SettingsState",
      "19": "PictureSettings",
      "20": "PictureSettingsState",
      "21": "MediaStreaming",
      "22": "MediaStreamingState",
      "23": "GPSSettings",
      "24": "GPSSettingsState",
      "25": "CameraState",
      "29": "Antiflickering",
      "30": "AntiflickeringState",
      "31": "GPSState",
      "32": "PROState",
      "34": "PilotingEvent"
    }
  },
  "lookup": {
    "1": "ardrone3"
  }
}

module.exports=projects;
              