'use strict';
/*************************************************\
generated from arsdk-xml/xml/*.xml
generated by utils/convertSDK.js
generated on : 2/19/2017, 4:41:44 AM
\**************************************************/
const projects={
  "common": {
    "info": {
      "tagType": "project",
      "name": "common",
      "id": 0
    },
    "details": "All common commands shared between all projects",
    "Network": {
      "info": {
        "tagType": "class",
        "name": "Network",
        "id": 0
      },
      "details": "Network related commands",
      "Disconnect": {
        "info": {
          "tagType": "cmd",
          "name": "Disconnect",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Signals the remote that the host will disconnect",
            "desc": "Signals the remote that the host will disconnect.\\n",
            "support": "none",
            "result": "None"
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "Disconnect"
      }
    },
    "NetworkEvent": {
      "info": {
        "tagType": "class",
        "name": "NetworkEvent",
        "id": 1
      },
      "details": "Network Event from product",
      "Disconnection": {
        "info": {
          "tagType": "cmd",
          "name": "Disconnection",
          "id": 0,
          "content": "NOTIFICATION"
        },
        "comment": {
          "info": {
            "title": "Drone will disconnect",
            "desc": "Drone will disconnect.\\n This event is mainly triggered when the user presses on the power button of the product.\\n\\n **This event is a notification, you can't retrieve it in the cache of the device controller.**",
            "support": "0901;090c",
            "triggered": "mainly when the user presses the power button of the drone."
          }
        },
        "cause": {
          "info": {
            "tagType": "arg",
            "name": "cause",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Cause of the disconnection of the product",
          "off_button": {
            "info": {
              "tagType": "enum",
              "name": "off_button"
            },
            "details": "The button off has been pressed"
          },
          "unknown": {
            "info": {
              "tagType": "enum",
              "name": "unknown"
            },
            "details": "Unknown generic cause"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "cause"
        }
      },
      "lookup": {
        "0": "Disconnection"
      }
    },
    "Settings": {
      "info": {
        "tagType": "class",
        "name": "Settings",
        "id": 2
      },
      "details": "Settings commands",
      "AllSettings": {
        "info": {
          "tagType": "cmd",
          "name": "AllSettings",
          "id": 0,
          "timeout": "RETRY"
        },
        "comment": {
          "info": {
            "title": "Ask for all settings",
            "desc": "Ask for all settings.\\n\\n **Please note that you should not send this command if you are using the\\n libARController API as this library is handling the connection process for you.**",
            "support": "drones",
            "result": "The product will trigger all settings events (such as [CameraSettings](#0_15_0), or product specific settings as the [MaxAltitude](#1_6_0) for the Bebop).\\n Then, it will trigger [AllSettingsEnd](#0_3_0)."
          }
        },
        "lookup": {}
      },
      "Reset": {
        "info": {
          "tagType": "cmd",
          "name": "Reset",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Reset all settings",
            "desc": "Reset all settings.",
            "support": "drones",
            "result": "It will trigger [ResetChanged](#0_3_1).\\n Then, the product will trigger all settings events (such as [CameraSettings](#0_15_0), or product specific settings as the [MaxAltitude](#1_6_0) for the Bebop) with factory values."
          }
        },
        "lookup": {}
      },
      "ProductName": {
        "info": {
          "tagType": "cmd",
          "name": "ProductName",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Set product name",
            "desc": "Set the product name.\\n It also sets the name of the SSID for Wifi products and advertisement name for BLE products (changed after a reboot of the product).",
            "support": "drones",
            "result": "Name is changed.\\n Then, it will trigger [NameChanged](#0_3_2)."
          }
        },
        "name": {
          "info": {
            "tagType": "arg",
            "name": "name",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Product name",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "name"
        }
      },
      "Country": {
        "info": {
          "tagType": "cmd",
          "name": "Country",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Set the country",
            "desc": "Set the country for Wifi products.\\n This can modify Wifi band and/or channel.\\n **Please note that you might be disconnected from the product after changing the country as it changes Wifi parameters.**",
            "support": "0901;0902;0905;0906;090c;090e",
            "result": "The country is set.\\n Then, it will trigger [CountryChanged](#0_3_6)."
          }
        },
        "code": {
          "info": {
            "tagType": "arg",
            "name": "code",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Country code with ISO 3166 format",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "code"
        }
      },
      "AutoCountry": {
        "info": {
          "tagType": "cmd",
          "name": "AutoCountry",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Enable auto_country",
            "desc": "Enable auto_country.\\n If auto_country is set, the drone will guess its Wifi country by itself by checking other Wifi country around it.\\n **Please note that you might be disconnected from the product after changing the country as it changes Wifi parameters.**",
            "support": "0901;0902;0905;0906;090c;090e",
            "result": "The auto_country of the product is changed.\\n Then, it will trigger [AutoCountryChanged](#0_3_7) and [CountryChanged](#0_3_6)."
          }
        },
        "automatic": {
          "info": {
            "tagType": "arg",
            "name": "automatic",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Boolean : 0 : Manual / 1 : Auto",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "automatic"
        }
      },
      "lookup": {
        "0": "AllSettings",
        "1": "Reset",
        "2": "ProductName",
        "3": "Country",
        "4": "AutoCountry"
      }
    },
    "SettingsState": {
      "info": {
        "tagType": "class",
        "name": "SettingsState",
        "id": 3
      },
      "details": "Settings state from product",
      "AllSettingsChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AllSettingsChanged",
          "id": 0,
          "timeout": "RETRY"
        },
        "comment": {
          "info": {
            "title": "All settings have been sent",
            "desc": "All settings have been sent.\\n\\n **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.**",
            "support": "drones",
            "triggered": "when all settings values have been sent."
          }
        },
        "lookup": {}
      },
      "ResetChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ResetChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "All settings have been reset",
            "desc": "All settings have been reset.",
            "support": "drones",
            "triggered": "by [ResetSettings](#0_2_1)."
          }
        },
        "lookup": {}
      },
      "ProductNameChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ProductNameChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Product name changed",
            "desc": "Product name changed.",
            "support": "drones",
            "triggered": "by [SetProductName](#0_2_2)."
          }
        },
        "name": {
          "info": {
            "tagType": "arg",
            "name": "name",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Product name",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "name"
        }
      },
      "ProductVersionChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ProductVersionChanged",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Product version",
            "desc": "Product version.",
            "support": "drones",
            "triggered": "during the connection process."
          }
        },
        "software": {
          "info": {
            "tagType": "arg",
            "name": "software",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Product software version",
          "lookup": {},
          "value": null
        },
        "hardware": {
          "info": {
            "tagType": "arg",
            "name": "hardware",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Product hardware version",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "software",
          "1": "hardware"
        }
      },
      "ProductSerialHighChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ProductSerialHighChanged",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Product serial (1st part)",
            "desc": "Product serial (1st part).",
            "support": "drones",
            "triggered": "during the connection process."
          }
        },
        "high": {
          "info": {
            "tagType": "arg",
            "name": "high",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Serial high number (hexadecimal value)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "high"
        }
      },
      "ProductSerialLowChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ProductSerialLowChanged",
          "id": 5
        },
        "comment": {
          "info": {
            "title": "Product serial (2nd part)",
            "desc": "Product serial (2nd part).",
            "support": "drones",
            "triggered": "during the connection process."
          }
        },
        "low": {
          "info": {
            "tagType": "arg",
            "name": "low",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Serial low number (hexadecimal value)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "low"
        }
      },
      "CountryChanged": {
        "info": {
          "tagType": "cmd",
          "name": "CountryChanged",
          "id": 6,
          "timeout": "RETRY"
        },
        "comment": {
          "info": {
            "title": "Country changed",
            "desc": "Country changed.",
            "support": "drones",
            "triggered": "by [SetCountry](#0_2_3)."
          }
        },
        "code": {
          "info": {
            "tagType": "arg",
            "name": "code",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Country code with ISO 3166 format, empty string means unknown country.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "code"
        }
      },
      "AutoCountryChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AutoCountryChanged",
          "id": 7
        },
        "comment": {
          "info": {
            "title": "Auto_country changed",
            "desc": "Auto_country changed.",
            "support": "drones",
            "triggered": "by [SetAutoCountry](#0_2_4)."
          }
        },
        "automatic": {
          "info": {
            "tagType": "arg",
            "name": "automatic",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Boolean : 0 : Manual / 1 : Auto",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "automatic"
        }
      },
      "lookup": {
        "0": "AllSettingsChanged",
        "1": "ResetChanged",
        "2": "ProductNameChanged",
        "3": "ProductVersionChanged",
        "4": "ProductSerialHighChanged",
        "5": "ProductSerialLowChanged",
        "6": "CountryChanged",
        "7": "AutoCountryChanged"
      }
    },
    "Common": {
      "info": {
        "tagType": "class",
        "name": "Common",
        "id": 4
      },
      "details": "Common commands",
      "AllStates": {
        "info": {
          "tagType": "cmd",
          "name": "AllStates",
          "id": 0,
          "timeout": "RETRY"
        },
        "comment": {
          "info": {
            "title": "Ask for all states",
            "desc": "Ask for all states.\\n\\n **Please note that you should not send this command if you are using the\\n libARController API as this library is handling the connection process for you.**",
            "support": "drones",
            "result": "The product will trigger all states events (such as [FlyingState](#1_4_1) for the Bebop).\\n Then, it will trigger [AllStatesEnd](#0_5_0)."
          }
        },
        "lookup": {}
      },
      "CurrentDate": {
        "info": {
          "tagType": "cmd",
          "name": "CurrentDate",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Set the date",
            "desc": "Set the date.\\n This date is taken by the drone as its own date.\\n So medias and other files will be dated from this date\\n\\n **Please note that you should not send this command if you are using the\\n libARController API as this library is handling the connection process for you.**",
            "support": "drones",
            "result": "The date of the product is set.\\n Then, it will trigger [DateChanged](#0_5_4)."
          }
        },
        "date": {
          "info": {
            "tagType": "arg",
            "name": "date",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Date with ISO_8601 format",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "date"
        }
      },
      "CurrentTime": {
        "info": {
          "tagType": "cmd",
          "name": "CurrentTime",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Set the time",
            "desc": "Set the time.\\n This time is taken by the drone as its own time.\\n So medias and other files will be dated from this time\\n\\n **Please note that you should not send this command if you are using the\\n libARController API as this library is handling the connection process for you.**",
            "support": "drones",
            "result": "The time of the product is set.\\n Then, it will trigger [TimeChanged](#0_5_5)."
          }
        },
        "time": {
          "info": {
            "tagType": "arg",
            "name": "time",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Time with ISO_8601 format",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "time"
        }
      },
      "Reboot": {
        "info": {
          "tagType": "cmd",
          "name": "Reboot",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Reboot",
            "desc": "Reboot the product.\\n The product will accept this command only if is not flying.",
            "support": "drones",
            "result": "The product will reboot if it can."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "AllStates",
        "1": "CurrentDate",
        "2": "CurrentTime",
        "3": "Reboot"
      }
    },
    "CommonState": {
      "info": {
        "tagType": "class",
        "name": "CommonState",
        "id": 5
      },
      "details": "Common state from product",
      "AllStatesChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AllStatesChanged",
          "id": 0,
          "timeout": "RETRY"
        },
        "comment": {
          "info": {
            "title": "All states have been sent",
            "desc": "All states have been sent.\\n\\n **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.**",
            "support": "drones",
            "triggered": "when all states values have been sent."
          }
        },
        "lookup": {}
      },
      "BatteryStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "BatteryStateChanged",
          "id": 1,
          "buffer": "NON_ACK"
        },
        "comment": {
          "info": {
            "title": "Battery state",
            "desc": "Battery state.",
            "support": "drones",
            "triggered": "when the battery level changes."
          }
        },
        "percent": {
          "info": {
            "tagType": "arg",
            "name": "percent",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Battery percentage",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "percent"
        }
      },
      "MassStorageStateListChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MassStorageStateListChanged",
          "id": 2,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Mass storage state list",
            "desc": "Mass storage state list.",
            "support": "drones",
            "triggered": "when a mass storage is inserted or ejected."
          }
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Mass storage id (unique)",
          "lookup": {},
          "value": null
        },
        "name": {
          "info": {
            "tagType": "arg",
            "name": "name",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Mass storage name",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mass_storage_id",
          "1": "name"
        }
      },
      "MassStorageInfoStateListChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MassStorageInfoStateListChanged",
          "id": 3,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Mass storage info state list",
            "desc": "Mass storage info state list.",
            "support": "drones",
            "triggered": "when a mass storage info changes."
          }
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Mass storage state id (unique)",
          "lookup": {},
          "value": null
        },
        "size": {
          "info": {
            "tagType": "arg",
            "name": "size",
            "type": "u32",
            "id": 1,
            "bytes": 4
          },
          "details": "Mass storage size in MBytes",
          "lookup": {},
          "value": null
        },
        "used_size": {
          "info": {
            "tagType": "arg",
            "name": "used_size",
            "type": "u32",
            "id": 2,
            "bytes": 4
          },
          "details": "Mass storage used size in MBytes",
          "lookup": {},
          "value": null
        },
        "plugged": {
          "info": {
            "tagType": "arg",
            "name": "plugged",
            "type": "u8",
            "id": 3,
            "bytes": 1
          },
          "details": "Mass storage plugged (1 if mass storage is plugged, otherwise 0)",
          "lookup": {},
          "value": null
        },
        "full": {
          "info": {
            "tagType": "arg",
            "name": "full",
            "type": "u8",
            "id": 4,
            "bytes": 1
          },
          "details": "Mass storage full information state (1 if mass storage full, 0 otherwise).",
          "lookup": {},
          "value": null
        },
        "internal": {
          "info": {
            "tagType": "arg",
            "name": "internal",
            "type": "u8",
            "id": 5,
            "bytes": 1
          },
          "details": "Mass storage internal type state (1 if mass storage is internal, 0 otherwise)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mass_storage_id",
          "1": "size",
          "2": "used_size",
          "3": "plugged",
          "4": "full",
          "5": "internal"
        }
      },
      "CurrentDateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "CurrentDateChanged",
          "id": 4
        },
        "comment": {
          "info": {
            "title": "Date changed",
            "desc": "Date changed.\\n Corresponds to the latest date set on the drone.\\n\\n **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.**",
            "support": "drones",
            "triggered": "by [SetDate](#0_4_1)."
          }
        },
        "date": {
          "info": {
            "tagType": "arg",
            "name": "date",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Date with ISO_8601 format",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "date"
        }
      },
      "CurrentTimeChanged": {
        "info": {
          "tagType": "cmd",
          "name": "CurrentTimeChanged",
          "id": 5
        },
        "comment": {
          "info": {
            "title": "Time changed",
            "desc": "Time changed.\\n Corresponds to the latest time set on the drone.\\n\\n **Please note that you should not care about this event if you are using the libARController API as this library is handling the connection process for you.**",
            "support": "drones",
            "triggered": "by [SetTime](#0_4_2)."
          }
        },
        "time": {
          "info": {
            "tagType": "arg",
            "name": "time",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Time with ISO_8601 format",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "time"
        }
      },
      "MassStorageInfoRemainingListChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MassStorageInfoRemainingListChanged",
          "id": 6,
          "type": "LIST_ITEM",
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Mass storage remaining data list",
            "desc": "Mass storage remaining data list."
          }
        },
        "free_space": {
          "info": {
            "tagType": "arg",
            "name": "free_space",
            "type": "u32",
            "id": 0,
            "bytes": 4
          },
          "details": "Mass storage free space in MBytes",
          "lookup": {},
          "value": null
        },
        "rec_time": {
          "info": {
            "tagType": "arg",
            "name": "rec_time",
            "type": "u16",
            "id": 1,
            "bytes": 2
          },
          "details": "Mass storage record time reamining in minute",
          "lookup": {},
          "value": null
        },
        "photo_remaining": {
          "info": {
            "tagType": "arg",
            "name": "photo_remaining",
            "type": "u32",
            "id": 2,
            "bytes": 4
          },
          "details": "Mass storage photo remaining",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "free_space",
          "1": "rec_time",
          "2": "photo_remaining"
        }
      },
      "WifiSignalChanged": {
        "info": {
          "tagType": "cmd",
          "name": "WifiSignalChanged",
          "id": 7,
          "buffer": "NON_ACK"
        },
        "comment": {
          "info": {
            "title": "Rssi changed",
            "desc": "Rssi (Wifi Signal between controller and product) changed.",
            "support": "0901;0902;0905;0906;090c;090e",
            "triggered": "regularly."
          }
        },
        "rssi": {
          "info": {
            "tagType": "arg",
            "name": "rssi",
            "type": "i16",
            "id": 0,
            "bytes": 2
          },
          "details": "RSSI of the signal between controller and the product (in dbm)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "rssi"
        }
      },
      "SensorsStatesListChanged": {
        "info": {
          "tagType": "cmd",
          "name": "SensorsStatesListChanged",
          "id": 8,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Sensors state list",
            "desc": "Sensors state list.",
            "support": "0901:2.0.3;0902;0905;0906;0907;0909;090a;090c;090e",
            "triggered": "at connection and when a sensor state changes."
          }
        },
        "sensorName": {
          "info": {
            "tagType": "arg",
            "name": "sensorName",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Sensor name",
          "IMU": {
            "info": {
              "tagType": "enum",
              "name": "IMU"
            },
            "details": "Inertial Measurement Unit sensor"
          },
          "barometer": {
            "info": {
              "tagType": "enum",
              "name": "barometer"
            },
            "details": "Barometer sensor"
          },
          "ultrasound": {
            "info": {
              "tagType": "enum",
              "name": "ultrasound"
            },
            "details": "Ultrasonic sensor"
          },
          "GPS": {
            "info": {
              "tagType": "enum",
              "name": "GPS"
            },
            "details": "GPS sensor"
          },
          "magnetometer": {
            "info": {
              "tagType": "enum",
              "name": "magnetometer"
            },
            "details": "Magnetometer sensor"
          },
          "vertical_camera": {
            "info": {
              "tagType": "enum",
              "name": "vertical_camera"
            },
            "details": "Vertical Camera sensor"
          },
          "lookup": {},
          "value": null
        },
        "sensorState": {
          "info": {
            "tagType": "arg",
            "name": "sensorState",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "Sensor state (1 if the sensor is OK, 0 if the sensor is NOT OK)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "sensorName",
          "1": "sensorState"
        }
      },
      "ProductModel": {
        "info": {
          "tagType": "cmd",
          "name": "ProductModel",
          "id": 9
        },
        "comment": {
          "info": {
            "title": "Product sub_model",
            "desc": "Product sub_model.\\n This can be used to customize the UI depending on the product.",
            "support": "0905;0906;0907;0909",
            "triggered": "at connection."
          }
        },
        "model": {
          "info": {
            "tagType": "arg",
            "name": "model",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The Model of the product.",
          "RS_TRAVIS": {
            "info": {
              "tagType": "enum",
              "name": "RS_TRAVIS"
            },
            "details": "Travis (RS taxi) model."
          },
          "RS_MARS": {
            "info": {
              "tagType": "enum",
              "name": "RS_MARS"
            },
            "details": "Mars (RS space) model"
          },
          "RS_SWAT": {
            "info": {
              "tagType": "enum",
              "name": "RS_SWAT"
            },
            "details": "SWAT (RS SWAT) model"
          },
          "RS_MCLANE": {
            "info": {
              "tagType": "enum",
              "name": "RS_MCLANE"
            },
            "details": "Mc Lane (RS police) model"
          },
          "RS_BLAZE": {
            "info": {
              "tagType": "enum",
              "name": "RS_BLAZE"
            },
            "details": "Blaze (RS fire) model"
          },
          "RS_ORAK": {
            "info": {
              "tagType": "enum",
              "name": "RS_ORAK"
            },
            "details": "Orak (RS carbon hydrofoil) model"
          },
          "RS_NEWZ": {
            "info": {
              "tagType": "enum",
              "name": "RS_NEWZ"
            },
            "details": "New Z (RS wooden hydrofoil) model"
          },
          "JS_MARSHALL": {
            "info": {
              "tagType": "enum",
              "name": "JS_MARSHALL"
            },
            "details": "Marshall (JS fire) model"
          },
          "JS_DIESEL": {
            "info": {
              "tagType": "enum",
              "name": "JS_DIESEL"
            },
            "details": "Diesel (JS SWAT) model"
          },
          "JS_BUZZ": {
            "info": {
              "tagType": "enum",
              "name": "JS_BUZZ"
            },
            "details": "Buzz (JS space) model"
          },
          "JS_MAX": {
            "info": {
              "tagType": "enum",
              "name": "JS_MAX"
            },
            "details": "Max (JS F1) model"
          },
          "JS_JETT": {
            "info": {
              "tagType": "enum",
              "name": "JS_JETT"
            },
            "details": "Jett (JS flames) model"
          },
          "JS_TUKTUK": {
            "info": {
              "tagType": "enum",
              "name": "JS_TUKTUK"
            },
            "details": "Tuk_Tuk (JS taxi) model"
          },
          "SW_BLACK": {
            "info": {
              "tagType": "enum",
              "name": "SW_BLACK"
            },
            "details": "Swing black model"
          },
          "SW_WHITE": {
            "info": {
              "tagType": "enum",
              "name": "SW_WHITE"
            },
            "details": "Swing white model"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "model"
        }
      },
      "CountryListKnown": {
        "info": {
          "tagType": "cmd",
          "name": "CountryListKnown",
          "id": 10,
          "type": "LIST_ITEM",
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Country list",
            "desc": "List of countries known by the drone."
          }
        },
        "listFlags": {
          "info": {
            "tagType": "arg",
            "name": "listFlags",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "List entry attribute Bitfield. 0x01: First: indicate it's the first element of the list. 0x02: Last: indicate it's the last element of the list. 0x04: Empty: indicate the list is empty (implies First/Last). All other arguments should be ignored.",
          "lookup": {},
          "value": null
        },
        "countryCodes": {
          "info": {
            "tagType": "arg",
            "name": "countryCodes",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "Following of country code with ISO 3166 format, separated by \";\". Be careful of the command size allowed by the network used. If necessary, split the list in several commands.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "listFlags",
          "1": "countryCodes"
        }
      },
      "DeprecatedMassStorageContentChanged": {
        "info": {
          "tagType": "cmd",
          "name": "DeprecatedMassStorageContentChanged",
          "id": 11,
          "type": "MAP_ITEM",
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Mass storage content changed",
            "desc": "Mass storage content changed."
          }
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Mass storage id (unique)",
          "lookup": {},
          "value": null
        },
        "nbPhotos": {
          "info": {
            "tagType": "arg",
            "name": "nbPhotos",
            "type": "u16",
            "id": 1,
            "bytes": 2
          },
          "details": "Number of photos (does not include raw photos)",
          "lookup": {},
          "value": null
        },
        "nbVideos": {
          "info": {
            "tagType": "arg",
            "name": "nbVideos",
            "type": "u16",
            "id": 2,
            "bytes": 2
          },
          "details": "Number of videos",
          "lookup": {},
          "value": null
        },
        "nbPuds": {
          "info": {
            "tagType": "arg",
            "name": "nbPuds",
            "type": "u16",
            "id": 3,
            "bytes": 2
          },
          "details": "Number of puds",
          "lookup": {},
          "value": null
        },
        "nbCrashLogs": {
          "info": {
            "tagType": "arg",
            "name": "nbCrashLogs",
            "type": "u16",
            "id": 4,
            "bytes": 2
          },
          "details": "Number of crash logs",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mass_storage_id",
          "1": "nbPhotos",
          "2": "nbVideos",
          "3": "nbPuds",
          "4": "nbCrashLogs"
        }
      },
      "MassStorageContent": {
        "info": {
          "tagType": "cmd",
          "name": "MassStorageContent",
          "id": 12,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Mass storage content",
            "desc": "Mass storage content.",
            "support": "090c:4.0.0;090e:4.0.0",
            "triggered": "when the content of the mass storage changes."
          }
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Mass storage id (unique)",
          "lookup": {},
          "value": null
        },
        "nbPhotos": {
          "info": {
            "tagType": "arg",
            "name": "nbPhotos",
            "type": "u16",
            "id": 1,
            "bytes": 2
          },
          "details": "Number of photos (does not include raw photos)",
          "lookup": {},
          "value": null
        },
        "nbVideos": {
          "info": {
            "tagType": "arg",
            "name": "nbVideos",
            "type": "u16",
            "id": 2,
            "bytes": 2
          },
          "details": "Number of videos",
          "lookup": {},
          "value": null
        },
        "nbPuds": {
          "info": {
            "tagType": "arg",
            "name": "nbPuds",
            "type": "u16",
            "id": 3,
            "bytes": 2
          },
          "details": "Number of puds",
          "lookup": {},
          "value": null
        },
        "nbCrashLogs": {
          "info": {
            "tagType": "arg",
            "name": "nbCrashLogs",
            "type": "u16",
            "id": 4,
            "bytes": 2
          },
          "details": "Number of crash logs",
          "lookup": {},
          "value": null
        },
        "nbRawPhotos": {
          "info": {
            "tagType": "arg",
            "name": "nbRawPhotos",
            "type": "u16",
            "id": 5,
            "bytes": 2
          },
          "details": "Number of raw photos",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mass_storage_id",
          "1": "nbPhotos",
          "2": "nbVideos",
          "3": "nbPuds",
          "4": "nbCrashLogs",
          "5": "nbRawPhotos"
        }
      },
      "MassStorageContentForCurrentRun": {
        "info": {
          "tagType": "cmd",
          "name": "MassStorageContentForCurrentRun",
          "id": 13,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Mass storage content for current run",
            "desc": "Mass storage content for current run.\\n Only counts the files related to the current run (see [RunId](#0_30_0))",
            "support": "090c:4.0.0;090e:4.0.0",
            "triggered": "when the content of the mass storage changes and this content is related to the current run."
          }
        },
        "mass_storage_id": {
          "info": {
            "tagType": "arg",
            "name": "mass_storage_id",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Mass storage id (unique)",
          "lookup": {},
          "value": null
        },
        "nbPhotos": {
          "info": {
            "tagType": "arg",
            "name": "nbPhotos",
            "type": "u16",
            "id": 1,
            "bytes": 2
          },
          "details": "Number of photos (does not include raw photos)",
          "lookup": {},
          "value": null
        },
        "nbVideos": {
          "info": {
            "tagType": "arg",
            "name": "nbVideos",
            "type": "u16",
            "id": 2,
            "bytes": 2
          },
          "details": "Number of videos",
          "lookup": {},
          "value": null
        },
        "nbRawPhotos": {
          "info": {
            "tagType": "arg",
            "name": "nbRawPhotos",
            "type": "u16",
            "id": 3,
            "bytes": 2
          },
          "details": "Number of raw photos",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "mass_storage_id",
          "1": "nbPhotos",
          "2": "nbVideos",
          "3": "nbRawPhotos"
        }
      },
      "VideoRecordingTimestamp": {
        "info": {
          "tagType": "cmd",
          "name": "VideoRecordingTimestamp",
          "id": 14
        },
        "comment": {
          "info": {
            "title": "Video recording timestamp",
            "desc": "Current or last video recording timestamp.\\n Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970.\\n **Please note that values don't persist after drone reboot**",
            "triggered": "on video recording start and video recording stop or \\n after that the date/time of the drone changed."
          }
        },
        "startTimestamp": {
          "info": {
            "tagType": "arg",
            "name": "startTimestamp",
            "type": "u64",
            "id": 0,
            "bytes": 1
          },
          "details": "Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970.",
          "lookup": {},
          "value": null
        },
        "stopTimestamp": {
          "info": {
            "tagType": "arg",
            "name": "stopTimestamp",
            "type": "u64",
            "id": 1,
            "bytes": 1
          },
          "details": "Timestamp in milliseconds since 00:00:00 UTC on 1 January 1970. 0 mean that video is still recording.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "startTimestamp",
          "1": "stopTimestamp"
        }
      },
      "lookup": {
        "0": "AllStatesChanged",
        "1": "BatteryStateChanged",
        "2": "MassStorageStateListChanged",
        "3": "MassStorageInfoStateListChanged",
        "4": "CurrentDateChanged",
        "5": "CurrentTimeChanged",
        "6": "MassStorageInfoRemainingListChanged",
        "7": "WifiSignalChanged",
        "8": "SensorsStatesListChanged",
        "9": "ProductModel",
        "10": "CountryListKnown",
        "11": "DeprecatedMassStorageContentChanged",
        "12": "MassStorageContent",
        "13": "MassStorageContentForCurrentRun",
        "14": "VideoRecordingTimestamp"
      }
    },
    "OverHeat": {
      "info": {
        "tagType": "class",
        "name": "OverHeat",
        "id": 6
      },
      "details": "Over heat commands",
      "SwitchOff": {
        "info": {
          "tagType": "cmd",
          "name": "SwitchOff",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Switch off after an overheat",
            "desc": "Switch off after an overheat.",
            "support": "none",
            "result": "None"
          }
        },
        "lookup": {}
      },
      "Ventilate": {
        "info": {
          "tagType": "cmd",
          "name": "Ventilate",
          "id": 1,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Ventilate after an overheat",
            "desc": "Ventilate after an overheat.",
            "support": "none",
            "result": "None"
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "SwitchOff",
        "1": "Ventilate"
      }
    },
    "OverHeatState": {
      "info": {
        "tagType": "class",
        "name": "OverHeatState",
        "id": 7
      },
      "details": "Overheat state from product",
      "OverHeatChanged": {
        "info": {
          "tagType": "cmd",
          "name": "OverHeatChanged",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Overheat",
            "desc": "Overheat temperature reached."
          }
        },
        "lookup": {}
      },
      "OverHeatRegulationChanged": {
        "info": {
          "tagType": "cmd",
          "name": "OverHeatRegulationChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Overheat regulation type",
            "desc": "Overheat regulation type."
          }
        },
        "regulationType": {
          "info": {
            "tagType": "arg",
            "name": "regulationType",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Type of overheat regulation : 0 for ventilation, 1 for switch off",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "regulationType"
        }
      },
      "lookup": {
        "0": "OverHeatChanged",
        "1": "OverHeatRegulationChanged"
      }
    },
    "Controller": {
      "info": {
        "tagType": "class",
        "name": "Controller",
        "id": 8
      },
      "details": "Notify the device about the state of the controller application.",
      "isPiloting": {
        "info": {
          "tagType": "cmd",
          "name": "isPiloting",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Inform about hud entering",
            "desc": "Inform about hud entering.\\n Tell the drone that the controller enters/leaves the piloting hud.\\n On a non_flying products it is used to know when a run begins.",
            "support": "drones",
            "result": "If yes, the product will begin a new session (so it should send a new [runId](#0_30_0)).\\n Also, on the JumpingSumos, if the video is in autorecord mode, it will start recording."
          }
        },
        "piloting": {
          "info": {
            "tagType": "arg",
            "name": "piloting",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "0 when the application is not in the piloting HUD, 1 when it enters the HUD.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "piloting"
        }
      },
      "lookup": {
        "0": "isPiloting"
      }
    },
    "WifiSettings": {
      "info": {
        "tagType": "class",
        "name": "WifiSettings",
        "id": 9
      },
      "details": "Wifi settings commands",
      "OutdoorSetting": {
        "info": {
          "tagType": "cmd",
          "name": "OutdoorSetting",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Set wifi outdoor mode",
            "desc": "Set wifi indoor/outdoor mode.\\n **Please note that you might be disconnected from the product after changing the indoor/outdoor setting as it changes Wifi parameters.**",
            "support": "0901;0902;0905;0906;090c;090e",
            "result": "The product change its indoor/outdoor wifi settings.\\n Then, it will trigger [WifiOutdoorMode](#0_10_0)."
          }
        },
        "outdoor": {
          "info": {
            "tagType": "arg",
            "name": "outdoor",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if it should use outdoor wifi settings, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "outdoor"
        }
      },
      "lookup": {
        "0": "OutdoorSetting"
      }
    },
    "WifiSettingsState": {
      "info": {
        "tagType": "class",
        "name": "WifiSettingsState",
        "id": 10
      },
      "details": "Wifi settings state from product",
      "outdoorSettingsChanged": {
        "info": {
          "tagType": "cmd",
          "name": "outdoorSettingsChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Wifi outdoor mode",
            "desc": "Wifi outdoor mode.",
            "support": "0901;0902;0905;0906;090c;090e",
            "triggered": "by [SetWifiOutdoorMode](#0_9_0)."
          }
        },
        "outdoor": {
          "info": {
            "tagType": "arg",
            "name": "outdoor",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if it should use outdoor wifi settings, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "outdoor"
        }
      },
      "lookup": {
        "0": "outdoorSettingsChanged"
      }
    },
    "Mavlink": {
      "info": {
        "tagType": "class",
        "name": "Mavlink",
        "id": 11
      },
      "details": "Mavlink flight plans commands",
      "Start": {
        "info": {
          "tagType": "cmd",
          "name": "Start",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Start a FlightPlan",
            "desc": "Start a FlightPlan based on a mavlink file existing on the drone.\\n\\n Requirements are:\\n * Product is calibrated\\n * Product should be in outdoor mode\\n * Product has fixed its GPS\\n",
            "support": "0901:2.0.29;090c;090e",
            "result": "If the FlightPlan has been started, event [FlightPlanPlayingStateChanged](#0_12_0) is triggered with param state set to *playing*.\\n Otherwise, event [FlightPlanPlayingStateChanged](#0_12_0) is triggered with param state set to stopped and event [MavlinkPlayErrorStateChanged](#0_12_1) is triggered with an explanation of the error."
          }
        },
        "filepath": {
          "info": {
            "tagType": "arg",
            "name": "filepath",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "flight plan file path from the mavlink ftp root",
          "lookup": {},
          "value": null
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "type of the played mavlink file",
          "flightPlan": {
            "info": {
              "tagType": "enum",
              "name": "flightPlan"
            },
            "details": "Mavlink file for FlightPlan"
          },
          "mapMyHouse": {
            "info": {
              "tagType": "enum",
              "name": "mapMyHouse"
            },
            "details": "Mavlink file for MapMyHouse"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "filepath",
          "1": "type"
        }
      },
      "Pause": {
        "info": {
          "tagType": "cmd",
          "name": "Pause",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Pause a FlightPlan",
            "desc": "Pause a FlightPlan that was playing.\\n To unpause a FlightPlan, see [StartFlightPlan](#0_11_0)\\n",
            "support": "0901:2.0.29;090c;090e",
            "result": "The currently playing FlightPlan will be paused. Then, event [FlightPlanPlayingStateChanged](#0_12_0) is triggered with param state set to the current state of the FlightPlan (should be *paused* if everything went well)."
          }
        },
        "lookup": {}
      },
      "Stop": {
        "info": {
          "tagType": "cmd",
          "name": "Stop",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Stop a FlightPlan",
            "desc": "Stop a FlightPlan that was playing.\\n",
            "support": "0901:2.0.29;090c;090e",
            "result": "The currently playing FlightPlan will be stopped. Then, event [FlightPlanPlayingStateChanged](#0_12_0) is triggered with param state set to the current state of the FlightPlan (should be *stopped* if everything went well)."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "Start",
        "1": "Pause",
        "2": "Stop"
      }
    },
    "MavlinkState": {
      "info": {
        "tagType": "class",
        "name": "MavlinkState",
        "id": 12
      },
      "details": "Mavlink flight plans states commands",
      "MavlinkFilePlayingStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MavlinkFilePlayingStateChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Playing state of a FlightPlan",
            "desc": "Playing state of a FlightPlan.",
            "support": "0901:2.0.29;090c;090e",
            "triggered": "by [StartFlightPlan](#0_11_0), [PauseFlightPlan](#0_11_1) or [StopFlightPlan](#0_11_2)."
          }
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "State of the mavlink",
          "playing": {
            "info": {
              "tagType": "enum",
              "name": "playing"
            },
            "details": "Mavlink file is playing"
          },
          "stopped": {
            "info": {
              "tagType": "enum",
              "name": "stopped"
            },
            "details": "Mavlink file is stopped (arg filepath and type are useless in this state)"
          },
          "paused": {
            "info": {
              "tagType": "enum",
              "name": "paused"
            },
            "details": "Mavlink file is paused"
          },
          "loaded": {
            "info": {
              "tagType": "enum",
              "name": "loaded"
            },
            "details": "Mavlink file is loaded (it will be played at take_off)"
          },
          "lookup": {},
          "value": null
        },
        "filepath": {
          "info": {
            "tagType": "arg",
            "name": "filepath",
            "type": "string",
            "id": 1,
            "bytes": 1
          },
          "details": "flight plan file path from the mavlink ftp root",
          "lookup": {},
          "value": null
        },
        "type": {
          "info": {
            "tagType": "arg",
            "name": "type",
            "type": "enum",
            "id": 2,
            "bytes": 1
          },
          "details": "type of the played mavlink file",
          "flightPlan": {
            "info": {
              "tagType": "enum",
              "name": "flightPlan"
            },
            "details": "Mavlink file for FlightPlan"
          },
          "mapMyHouse": {
            "info": {
              "tagType": "enum",
              "name": "mapMyHouse"
            },
            "details": "Mavlink file for MapMyHouse"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state",
          "1": "filepath",
          "2": "type"
        }
      },
      "MavlinkPlayErrorStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MavlinkPlayErrorStateChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "FlightPlan error",
            "desc": "FlightPlan error.",
            "support": "0901:2.0.29;090c;090e",
            "triggered": "by [StartFlightPlan](#0_11_0) if an error occurs."
          }
        },
        "error": {
          "info": {
            "tagType": "arg",
            "name": "error",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "State of play error",
          "none": {
            "info": {
              "tagType": "enum",
              "name": "none"
            },
            "details": "There is no error"
          },
          "notInOutDoorMode": {
            "info": {
              "tagType": "enum",
              "name": "notInOutDoorMode"
            },
            "details": "The drone is not in outdoor mode"
          },
          "gpsNotFixed": {
            "info": {
              "tagType": "enum",
              "name": "gpsNotFixed"
            },
            "details": "The gps is not fixed"
          },
          "notCalibrated": {
            "info": {
              "tagType": "enum",
              "name": "notCalibrated"
            },
            "details": "The magnetometer of the drone is not calibrated"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "error"
        }
      },
      "MissonItemExecuted": {
        "info": {
          "tagType": "cmd",
          "name": "MissonItemExecuted",
          "id": 2,
          "content": "NOTIFICATION"
        },
        "comment": {
          "info": {
            "title": "Mission item executed",
            "desc": "Mission item has been executed.",
            "support": "none",
            "triggered": "when a mission item has been executed during a flight plan."
          }
        },
        "idx": {
          "info": {
            "tagType": "arg",
            "name": "idx",
            "type": "u32",
            "id": 0,
            "bytes": 4
          },
          "details": "Index of the mission item. This is the place of the mission item in the list of the items of the mission. Begins at 0.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "idx"
        }
      },
      "lookup": {
        "0": "MavlinkFilePlayingStateChanged",
        "1": "MavlinkPlayErrorStateChanged",
        "2": "MissonItemExecuted"
      }
    },
    "Calibration": {
      "info": {
        "tagType": "class",
        "name": "Calibration",
        "id": 13
      },
      "details": "Calibration commands",
      "MagnetoCalibration": {
        "info": {
          "tagType": "cmd",
          "name": "MagnetoCalibration",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Start/Abort magnetometer calibration",
            "desc": "Start or abort magnetometer calibration process.\\n",
            "support": "0901;090c;090e",
            "result": "The magnetometer calibration process is started or aborted. Then, event [MagnetoCalibrationStartedChanged](#0_14_3) is triggered.\\n If started, event [MagnetoCalibrationStateChanged](#0_14_3) is triggered with the current calibration state: a list of all axis and their calibration states.\\n It will also trigger [MagnetoCalibrationAxisToCalibrateChanged](#0_14_2), that will inform the controller about the current axis to calibrate."
          }
        },
        "calibrate": {
          "info": {
            "tagType": "arg",
            "name": "calibrate",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if the calibration should be started, 0 if it should be aborted",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "calibrate"
        }
      },
      "PitotCalibration": {
        "info": {
          "tagType": "cmd",
          "name": "PitotCalibration",
          "id": 1
        },
        "details": "Sent when a calibration of the pitot is asked or is aborted",
        "calibrate": {
          "info": {
            "tagType": "arg",
            "name": "calibrate",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if the calibration should be started, 0 if it should be aborted",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "calibrate"
        }
      },
      "lookup": {
        "0": "MagnetoCalibration",
        "1": "PitotCalibration"
      }
    },
    "CalibrationState": {
      "info": {
        "tagType": "class",
        "name": "CalibrationState",
        "id": 14
      },
      "details": "Status of the calibration",
      "MagnetoCalibrationStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MagnetoCalibrationStateChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Magneto calib process axis state",
            "desc": "Magneto calib process axis state.",
            "support": "0901;090c;090e",
            "triggered": "when the calibration process is started with [StartOrAbortMagnetoCalib](#0_13_0) and each time an axis calibration state changes."
          }
        },
        "xAxisCalibration": {
          "info": {
            "tagType": "arg",
            "name": "xAxisCalibration",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "State of the x axis (roll) calibration : 1 if calibration is done, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "yAxisCalibration": {
          "info": {
            "tagType": "arg",
            "name": "yAxisCalibration",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "State of the y axis (pitch) calibration : 1 if calibration is done, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "zAxisCalibration": {
          "info": {
            "tagType": "arg",
            "name": "zAxisCalibration",
            "type": "u8",
            "id": 2,
            "bytes": 1
          },
          "details": "State of the z axis (yaw) calibration : 1 if calibration is done, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "calibrationFailed": {
          "info": {
            "tagType": "arg",
            "name": "calibrationFailed",
            "type": "u8",
            "id": 3,
            "bytes": 1
          },
          "details": "1 if calibration has failed, 0 otherwise. If this arg is 1, consider all previous arg as 0",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "xAxisCalibration",
          "1": "yAxisCalibration",
          "2": "zAxisCalibration",
          "3": "calibrationFailed"
        }
      },
      "MagnetoCalibrationRequiredState": {
        "info": {
          "tagType": "cmd",
          "name": "MagnetoCalibrationRequiredState",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Calibration required",
            "desc": "Calibration required.",
            "support": "0901;090c;090e",
            "triggered": "when the calibration requirement changes."
          }
        },
        "required": {
          "info": {
            "tagType": "arg",
            "name": "required",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if calibration is required, 0 if current calibration is still valid",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "required"
        }
      },
      "MagnetoCalibrationAxisToCalibrateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MagnetoCalibrationAxisToCalibrateChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Axis to calibrate during calibration process",
            "desc": "Axis to calibrate during calibration process.",
            "support": "0901;090c;090e",
            "triggered": "during the calibration process when the axis to calibrate changes."
          }
        },
        "axis": {
          "info": {
            "tagType": "arg",
            "name": "axis",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The axis to calibrate",
          "xAxis": {
            "info": {
              "tagType": "enum",
              "name": "xAxis"
            },
            "details": "If the current calibration axis should be the x axis"
          },
          "yAxis": {
            "info": {
              "tagType": "enum",
              "name": "yAxis"
            },
            "details": "If the current calibration axis should be the y axis"
          },
          "zAxis": {
            "info": {
              "tagType": "enum",
              "name": "zAxis"
            },
            "details": "If the current calibration axis should be the z axis"
          },
          "none": {
            "info": {
              "tagType": "enum",
              "name": "none"
            },
            "details": "If none of the axis should be calibrated"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "axis"
        }
      },
      "MagnetoCalibrationStartedChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MagnetoCalibrationStartedChanged",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Calibration process state",
            "desc": "Calibration process state.",
            "support": "0901;090c;090e",
            "triggered": "by [StartOrAbortMagnetoCalib](#0_13_0) or when the process ends because it succeeded."
          }
        },
        "details": "Status of the calibration process",
        "started": {
          "info": {
            "tagType": "arg",
            "name": "started",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if calibration has started, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "started"
        }
      },
      "PitotCalibrationStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "PitotCalibrationStateChanged",
          "id": 4
        },
        "details": "Sent when the state of the pitot calibration has changed",
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "State of pitot calibration",
          "done": {
            "info": {
              "tagType": "enum",
              "name": "done"
            },
            "details": "Calibration is ok"
          },
          "ready": {
            "info": {
              "tagType": "enum",
              "name": "ready"
            },
            "details": "Calibration is started, waiting user action"
          },
          "in_progress": {
            "info": {
              "tagType": "enum",
              "name": "in_progress"
            },
            "details": "Calibration is in progress"
          },
          "required": {
            "info": {
              "tagType": "enum",
              "name": "required"
            },
            "details": "Calibration is required"
          },
          "lookup": {},
          "value": null
        },
        "lastError": {
          "info": {
            "tagType": "arg",
            "name": "lastError",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "lastError : 1 if an error occured and 0 if not",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "state",
          "1": "lastError"
        }
      },
      "lookup": {
        "0": "MagnetoCalibrationStateChanged",
        "1": "MagnetoCalibrationRequiredState",
        "2": "MagnetoCalibrationAxisToCalibrateChanged",
        "3": "MagnetoCalibrationStartedChanged",
        "4": "PitotCalibrationStateChanged"
      }
    },
    "CameraSettingsState": {
      "info": {
        "tagType": "class",
        "name": "CameraSettingsState",
        "id": 15
      },
      "details": "Status of the camera settings",
      "CameraSettingsChanged": {
        "info": {
          "tagType": "cmd",
          "name": "CameraSettingsChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Camera info",
            "desc": "Camera info.",
            "support": "0901;090c;090e",
            "triggered": "at connection."
          }
        },
        "fov": {
          "info": {
            "tagType": "arg",
            "name": "fov",
            "type": "float",
            "id": 0,
            "bytes": 4
          },
          "details": "Value of the camera horizontal fov (in degree)",
          "lookup": {},
          "value": null
        },
        "panMax": {
          "info": {
            "tagType": "arg",
            "name": "panMax",
            "type": "float",
            "id": 1,
            "bytes": 4
          },
          "details": "Value of max pan (right pan) (in degree)",
          "lookup": {},
          "value": null
        },
        "panMin": {
          "info": {
            "tagType": "arg",
            "name": "panMin",
            "type": "float",
            "id": 2,
            "bytes": 4
          },
          "details": "Value of min pan (left pan) (in degree)",
          "lookup": {},
          "value": null
        },
        "tiltMax": {
          "info": {
            "tagType": "arg",
            "name": "tiltMax",
            "type": "float",
            "id": 3,
            "bytes": 4
          },
          "details": "Value of max tilt (top tilt) (in degree)",
          "lookup": {},
          "value": null
        },
        "tiltMin": {
          "info": {
            "tagType": "arg",
            "name": "tiltMin",
            "type": "float",
            "id": 4,
            "bytes": 4
          },
          "details": "Value of min tilt (bottom tilt) (in degree)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "fov",
          "1": "panMax",
          "2": "panMin",
          "3": "tiltMax",
          "4": "tiltMin"
        }
      },
      "lookup": {
        "0": "CameraSettingsChanged"
      }
    },
    "GPS": {
      "info": {
        "tagType": "class",
        "name": "GPS",
        "id": 16
      },
      "details": "GPS related commands",
      "ControllerPositionForRun": {
        "info": {
          "tagType": "cmd",
          "name": "ControllerPositionForRun",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Set the position of a run",
            "desc": "Set the position of a run.\\n This will let the product know the controller location for the flight/run. The location is typically used to geotag medias.\\n Only used on products that have no gps.\\n Watch out, this command is not used by BLE products.",
            "support": "0902;0905;0906",
            "result": "The position is set."
          }
        },
        "latitude": {
          "info": {
            "tagType": "arg",
            "name": "latitude",
            "type": "double",
            "id": 0,
            "bytes": 1
          },
          "details": "Controller latitude in decimal degrees",
          "lookup": {},
          "value": null
        },
        "longitude": {
          "info": {
            "tagType": "arg",
            "name": "longitude",
            "type": "double",
            "id": 1,
            "bytes": 1
          },
          "details": "Controller longitude in decimal degrees",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "latitude",
          "1": "longitude"
        }
      },
      "lookup": {
        "0": "ControllerPositionForRun"
      }
    },
    "FlightPlanState": {
      "info": {
        "tagType": "class",
        "name": "FlightPlanState",
        "id": 17
      },
      "details": "FlightPlan state commands",
      "AvailabilityStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AvailabilityStateChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "FlightPlan availability",
            "desc": "FlightPlan availability.\\n Availability is linked to GPS fix, magnetometer calibration, sensor states...",
            "support": "0901:2.0.29;090c;090e",
            "triggered": "on change."
          }
        },
        "AvailabilityState": {
          "info": {
            "tagType": "arg",
            "name": "AvailabilityState",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Running a flightPlan file is available (1 running a flightPlan file is available, otherwise 0)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "AvailabilityState"
        }
      },
      "ComponentStateListChanged": {
        "info": {
          "tagType": "cmd",
          "name": "ComponentStateListChanged",
          "id": 1,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "FlightPlan components state list",
            "desc": "FlightPlan components state list.",
            "support": "0901:2.0.29;090c;090e",
            "triggered": "when the state of required components changes."
          }
        },
        "component": {
          "info": {
            "tagType": "arg",
            "name": "component",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Drone FlightPlan component id (unique)",
          "GPS": {
            "info": {
              "tagType": "enum",
              "name": "GPS"
            },
            "details": "GPS for Drone FlightPlan"
          },
          "Calibration": {
            "info": {
              "tagType": "enum",
              "name": "Calibration"
            },
            "details": "Calibration for Drone FlightPlan"
          },
          "Mavlink_File": {
            "info": {
              "tagType": "enum",
              "name": "Mavlink_File"
            },
            "details": "Mavlink file for Drone FlightPlan"
          },
          "TakeOff": {
            "info": {
              "tagType": "enum",
              "name": "TakeOff"
            },
            "details": "Take off"
          },
          "lookup": {},
          "value": null
        },
        "State": {
          "info": {
            "tagType": "arg",
            "name": "State",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "State of the FlightPlan component (1 FlightPlan component OK, otherwise 0)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "component",
          "1": "State"
        }
      },
      "LockStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "LockStateChanged",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "FlightPlan lock state",
            "desc": "FlightPlan lock state.\\n Represents the fact that the controller is able or not to stop or pause a playing FlightPlan",
            "support": "0901:2.0.29;090c;090e",
            "triggered": "when the lock changes."
          }
        },
        "LockState": {
          "info": {
            "tagType": "arg",
            "name": "LockState",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if FlightPlan is locked: can't pause or stop FlightPlan. 0 if FlightPlan is unlocked: pause or stop available.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "LockState"
        }
      },
      "lookup": {
        "0": "AvailabilityStateChanged",
        "1": "ComponentStateListChanged",
        "2": "LockStateChanged"
      }
    },
    "FlightPlanEvent": {
      "info": {
        "tagType": "class",
        "name": "FlightPlanEvent",
        "id": 19
      },
      "details": "FlightPlan Event commands",
      "StartingErrorEvent": {
        "info": {
          "tagType": "cmd",
          "name": "StartingErrorEvent",
          "id": 0,
          "content": "NOTIFICATION"
        },
        "comment": {
          "info": {
            "title": "FlightPlan start error",
            "desc": "FlightPlan start error.\\n\\n **This event is a notification, you can't retrieve it in the cache of the device controller.**",
            "support": "0901:2.0.29;090c;090e",
            "triggered": "on an error after a [StartFlightPlan](#0_11_0)."
          }
        },
        "lookup": {}
      },
      "SpeedBridleEvent": {
        "info": {
          "tagType": "cmd",
          "name": "SpeedBridleEvent",
          "id": 1,
          "content": "NOTIFICATION"
        },
        "comment": {
          "info": {
            "title": "FlightPlan speed clamping",
            "desc": "FlightPlan speed clamping.\\n Sent when a speed specified in the FlightPlan file is considered too high by the drone.\\n\\n **This event is a notification, you can't retrieve it in the cache of the device controller.**",
            "support": "0901:2.0.29;090c;090e",
            "triggered": "on an speed related clamping after a [StartFlightPlan](#0_11_0)."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "StartingErrorEvent",
        "1": "SpeedBridleEvent"
      }
    },
    "ARLibsVersionsState": {
      "info": {
        "tagType": "class",
        "name": "ARLibsVersionsState",
        "id": 18
      },
      "details": "ARlibs Versions Commands",
      "ControllerLibARCommandsVersion": {
        "info": {
          "tagType": "cmd",
          "name": "ControllerLibARCommandsVersion",
          "id": 0
        },
        "details": "Controller libARCommands version",
        "version": {
          "info": {
            "tagType": "arg",
            "name": "version",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "version of libARCommands (\"1.2.3.4\" format)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "version"
        }
      },
      "SkyControllerLibARCommandsVersion": {
        "info": {
          "tagType": "cmd",
          "name": "SkyControllerLibARCommandsVersion",
          "id": 1
        },
        "details": "SkyController libARCommands version",
        "version": {
          "info": {
            "tagType": "arg",
            "name": "version",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "version of libARCommands (\"1.2.3.4\" format)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "version"
        }
      },
      "DeviceLibARCommandsVersion": {
        "info": {
          "tagType": "cmd",
          "name": "DeviceLibARCommandsVersion",
          "id": 2
        },
        "details": "Device libARCommands version",
        "version": {
          "info": {
            "tagType": "arg",
            "name": "version",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "version of libARCommands (\"1.2.3.4\" format)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "version"
        }
      },
      "lookup": {
        "0": "ControllerLibARCommandsVersion",
        "1": "SkyControllerLibARCommandsVersion",
        "2": "DeviceLibARCommandsVersion"
      }
    },
    "Audio": {
      "info": {
        "tagType": "class",
        "name": "Audio",
        "id": 20
      },
      "details": "Audio_related commands.",
      "ControllerReadyForStreaming": {
        "info": {
          "tagType": "cmd",
          "name": "ControllerReadyForStreaming",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Set audio stream direction",
            "desc": "Set audio stream direction.",
            "support": "0905;0906",
            "result": "The audio stream direction is set.\\n Then, event [AudioStreamDirection](#0_21_0) is triggered."
          }
        },
        "ready": {
          "info": {
            "tagType": "arg",
            "name": "ready",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Bit field for TX and RX ready. bit 0 is 1 if controller is ready and wants to receive sound (Drone TX) bit 1 is 1 if controller is ready and wants to send sound (Drone RX)",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "ready"
        }
      },
      "lookup": {
        "0": "ControllerReadyForStreaming"
      }
    },
    "AudioState": {
      "info": {
        "tagType": "class",
        "name": "AudioState",
        "id": 21
      },
      "details": "Audio_related state updates.",
      "AudioStreamingRunning": {
        "info": {
          "tagType": "cmd",
          "name": "AudioStreamingRunning",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Audio stream direction",
            "desc": "Audio stream direction.",
            "support": "0905;0906",
            "triggered": "by [SetAudioStreamDirection](#0_20_0)."
          }
        },
        "running": {
          "info": {
            "tagType": "arg",
            "name": "running",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Bit field for TX and RX running bit 0 is 1 if Drone TX is running bit 1 is 1 if Drone RX is running",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "running"
        }
      },
      "lookup": {
        "0": "AudioStreamingRunning"
      }
    },
    "Headlights": {
      "info": {
        "tagType": "class",
        "name": "Headlights",
        "id": 22
      },
      "details": "Controls the headlight LEDs of the Evo variants.",
      "intensity": {
        "info": {
          "tagType": "cmd",
          "name": "intensity",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Set LEDs intensity",
            "desc": "Set lighting LEDs intensity.",
            "support": "0905;0906;0907",
            "result": "The intensity of the LEDs is changed.\\n Then, event [LedIntensity](#0_23_0) is triggered."
          }
        },
        "left": {
          "info": {
            "tagType": "arg",
            "name": "left",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "Set the left LED intensity value (0 through 255).",
          "lookup": {},
          "value": null
        },
        "right": {
          "info": {
            "tagType": "arg",
            "name": "right",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "Set the right LED intensity value (0 through 255).",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "left",
          "1": "right"
        }
      },
      "lookup": {
        "0": "intensity"
      }
    },
    "HeadlightsState": {
      "info": {
        "tagType": "class",
        "name": "HeadlightsState",
        "id": 23
      },
      "details": "Get information about the state of the Evo variants' LEDs.",
      "intensityChanged": {
        "info": {
          "tagType": "cmd",
          "name": "intensityChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "LEDs intensity",
            "desc": "Lighting LEDs intensity.",
            "support": "0905;0906;0907",
            "triggered": "by [SetLedsIntensity](#0_22_0)."
          }
        },
        "left": {
          "info": {
            "tagType": "arg",
            "name": "left",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "The intensity value for the left LED (0 through 255).",
          "lookup": {},
          "value": null
        },
        "right": {
          "info": {
            "tagType": "arg",
            "name": "right",
            "type": "u8",
            "id": 1,
            "bytes": 1
          },
          "details": "The intensity value for the right LED (0 through 255).",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "left",
          "1": "right"
        }
      },
      "lookup": {
        "0": "intensityChanged"
      }
    },
    "Animations": {
      "info": {
        "tagType": "class",
        "name": "Animations",
        "id": 24
      },
      "details": "Animations_related commands.",
      "StartAnimation": {
        "info": {
          "tagType": "cmd",
          "name": "StartAnimation",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Start an animation",
            "desc": "Start a paramaterless animation.\\n List of available animations can be retrieved from [AnimationsStateList](#0_25_0).",
            "support": "0902;0905;0906;0907;0909",
            "result": "If possible, the product starts the requested animation. Then, event [AnimationsStateList](#0_25_0) is triggered."
          }
        },
        "anim": {
          "info": {
            "tagType": "arg",
            "name": "anim",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Animation to start.",
          "HEADLIGHTS_FLASH": {
            "info": {
              "tagType": "enum",
              "name": "HEADLIGHTS_FLASH"
            },
            "details": "Flash headlights."
          },
          "HEADLIGHTS_BLINK": {
            "info": {
              "tagType": "enum",
              "name": "HEADLIGHTS_BLINK"
            },
            "details": "Blink headlights."
          },
          "HEADLIGHTS_OSCILLATION": {
            "info": {
              "tagType": "enum",
              "name": "HEADLIGHTS_OSCILLATION"
            },
            "details": "Oscillating headlights."
          },
          "SPIN": {
            "info": {
              "tagType": "enum",
              "name": "SPIN"
            },
            "details": "Spin animation."
          },
          "TAP": {
            "info": {
              "tagType": "enum",
              "name": "TAP"
            },
            "details": "Tap animation."
          },
          "SLOW_SHAKE": {
            "info": {
              "tagType": "enum",
              "name": "SLOW_SHAKE"
            },
            "details": "Slow shake animation."
          },
          "METRONOME": {
            "info": {
              "tagType": "enum",
              "name": "METRONOME"
            },
            "details": "Metronome animation."
          },
          "ONDULATION": {
            "info": {
              "tagType": "enum",
              "name": "ONDULATION"
            },
            "details": "Standing dance animation."
          },
          "SPIN_JUMP": {
            "info": {
              "tagType": "enum",
              "name": "SPIN_JUMP"
            },
            "details": "Spin jump animation."
          },
          "SPIN_TO_POSTURE": {
            "info": {
              "tagType": "enum",
              "name": "SPIN_TO_POSTURE"
            },
            "details": "Spin that end in standing posture, or in jumper if it was standing animation."
          },
          "SPIRAL": {
            "info": {
              "tagType": "enum",
              "name": "SPIRAL"
            },
            "details": "Spiral animation."
          },
          "SLALOM": {
            "info": {
              "tagType": "enum",
              "name": "SLALOM"
            },
            "details": "Slalom animation."
          },
          "BOOST": {
            "info": {
              "tagType": "enum",
              "name": "BOOST"
            },
            "details": "Boost animation."
          },
          "LOOPING": {
            "info": {
              "tagType": "enum",
              "name": "LOOPING"
            },
            "details": "Make a looping. (Only for WingX)"
          },
          "BARREL_ROLL_180_RIGHT": {
            "info": {
              "tagType": "enum",
              "name": "BARREL_ROLL_180_RIGHT"
            },
            "details": "Make a barrel roll of 180 degree turning on right. (Only for WingX)"
          },
          "BARREL_ROLL_180_LEFT": {
            "info": {
              "tagType": "enum",
              "name": "BARREL_ROLL_180_LEFT"
            },
            "details": "Make a barrel roll of 180 degree turning on left. (Only for WingX)"
          },
          "BACKSWAP": {
            "info": {
              "tagType": "enum",
              "name": "BACKSWAP"
            },
            "details": "Put the drone upside down. (Only for WingX)"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "anim"
        }
      },
      "StopAnimation": {
        "info": {
          "tagType": "cmd",
          "name": "StopAnimation",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Stop an animation",
            "desc": "Stop a paramaterless animation.\\n List of running animations can be retrieved from [AnimationsStateList](#0_25_0).",
            "support": "0902;0905;0906;0907;0909",
            "result": "If the requested animation was running, it will be stopped.\\n Then, event [AnimationsStateList](#0_25_0) is triggered."
          }
        },
        "anim": {
          "info": {
            "tagType": "arg",
            "name": "anim",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Animation to stop.",
          "HEADLIGHTS_FLASH": {
            "info": {
              "tagType": "enum",
              "name": "HEADLIGHTS_FLASH"
            },
            "details": "Flash headlights."
          },
          "HEADLIGHTS_BLINK": {
            "info": {
              "tagType": "enum",
              "name": "HEADLIGHTS_BLINK"
            },
            "details": "Blink headlights."
          },
          "HEADLIGHTS_OSCILLATION": {
            "info": {
              "tagType": "enum",
              "name": "HEADLIGHTS_OSCILLATION"
            },
            "details": "Oscillating headlights."
          },
          "SPIN": {
            "info": {
              "tagType": "enum",
              "name": "SPIN"
            },
            "details": "Spin animation."
          },
          "TAP": {
            "info": {
              "tagType": "enum",
              "name": "TAP"
            },
            "details": "Tap animation."
          },
          "SLOW_SHAKE": {
            "info": {
              "tagType": "enum",
              "name": "SLOW_SHAKE"
            },
            "details": "Slow shake animation."
          },
          "METRONOME": {
            "info": {
              "tagType": "enum",
              "name": "METRONOME"
            },
            "details": "Metronome animation."
          },
          "ONDULATION": {
            "info": {
              "tagType": "enum",
              "name": "ONDULATION"
            },
            "details": "Standing dance animation."
          },
          "SPIN_JUMP": {
            "info": {
              "tagType": "enum",
              "name": "SPIN_JUMP"
            },
            "details": "Spin jump animation."
          },
          "SPIN_TO_POSTURE": {
            "info": {
              "tagType": "enum",
              "name": "SPIN_TO_POSTURE"
            },
            "details": "Spin that end in standing posture, or in jumper if it was standing animation."
          },
          "SPIRAL": {
            "info": {
              "tagType": "enum",
              "name": "SPIRAL"
            },
            "details": "Spiral animation."
          },
          "SLALOM": {
            "info": {
              "tagType": "enum",
              "name": "SLALOM"
            },
            "details": "Slalom animation."
          },
          "BOOST": {
            "info": {
              "tagType": "enum",
              "name": "BOOST"
            },
            "details": "Boost animation."
          },
          "LOOPING": {
            "info": {
              "tagType": "enum",
              "name": "LOOPING"
            },
            "details": "Make a looping. (Only for WingX)"
          },
          "BARREL_ROLL_180_RIGHT": {
            "info": {
              "tagType": "enum",
              "name": "BARREL_ROLL_180_RIGHT"
            },
            "details": "Make a barrel roll of 180 degree turning on right. (Only for WingX)"
          },
          "BARREL_ROLL_180_LEFT": {
            "info": {
              "tagType": "enum",
              "name": "BARREL_ROLL_180_LEFT"
            },
            "details": "Make a barrel roll of 180 degree turning on left. (Only for WingX)"
          },
          "BACKSWAP": {
            "info": {
              "tagType": "enum",
              "name": "BACKSWAP"
            },
            "details": "Put the drone upside down. (Only for WingX)"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "anim"
        }
      },
      "StopAllAnimations": {
        "info": {
          "tagType": "cmd",
          "name": "StopAllAnimations",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Stop all animations",
            "desc": "Stop all running paramaterless animations.\\n List of running animations can be retrieved from [AnimationsStateList](#0_25_0).",
            "support": "0902;0905;0906;0907;0909",
            "result": "All running animations are stopped.\\n Then, event [AnimationsStateList](#0_25_0) is triggered."
          }
        },
        "lookup": {}
      },
      "lookup": {
        "0": "StartAnimation",
        "1": "StopAnimation",
        "2": "StopAllAnimations"
      }
    },
    "AnimationsState": {
      "info": {
        "tagType": "class",
        "name": "AnimationsState",
        "id": 25
      },
      "details": "Animations_related notification/feedback commands.",
      "List": {
        "info": {
          "tagType": "cmd",
          "name": "List",
          "type": "MAP_ITEM",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Animation state list",
            "desc": "Paramaterless animations state list.",
            "support": "0902;0905;0906;0907;0909",
            "triggered": "when the list of available animations changes and also when an animation state changes (can be triggered by [StartAnim](#0_24_0), [StopAnim](#0_24_1) or [StopAllAnims](#0_24_2)."
          }
        },
        "anim": {
          "info": {
            "tagType": "arg",
            "name": "anim",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Animation type.",
          "HEADLIGHTS_FLASH": {
            "info": {
              "tagType": "enum",
              "name": "HEADLIGHTS_FLASH"
            },
            "details": "Flash headlights."
          },
          "HEADLIGHTS_BLINK": {
            "info": {
              "tagType": "enum",
              "name": "HEADLIGHTS_BLINK"
            },
            "details": "Blink headlights."
          },
          "HEADLIGHTS_OSCILLATION": {
            "info": {
              "tagType": "enum",
              "name": "HEADLIGHTS_OSCILLATION"
            },
            "details": "Oscillating headlights."
          },
          "SPIN": {
            "info": {
              "tagType": "enum",
              "name": "SPIN"
            },
            "details": "Spin animation."
          },
          "TAP": {
            "info": {
              "tagType": "enum",
              "name": "TAP"
            },
            "details": "Tap animation."
          },
          "SLOW_SHAKE": {
            "info": {
              "tagType": "enum",
              "name": "SLOW_SHAKE"
            },
            "details": "Slow shake animation."
          },
          "METRONOME": {
            "info": {
              "tagType": "enum",
              "name": "METRONOME"
            },
            "details": "Metronome animation."
          },
          "ONDULATION": {
            "info": {
              "tagType": "enum",
              "name": "ONDULATION"
            },
            "details": "Standing dance animation."
          },
          "SPIN_JUMP": {
            "info": {
              "tagType": "enum",
              "name": "SPIN_JUMP"
            },
            "details": "Spin jump animation."
          },
          "SPIN_TO_POSTURE": {
            "info": {
              "tagType": "enum",
              "name": "SPIN_TO_POSTURE"
            },
            "details": "Spin that end in standing posture, or in jumper if it was standing animation."
          },
          "SPIRAL": {
            "info": {
              "tagType": "enum",
              "name": "SPIRAL"
            },
            "details": "Spiral animation."
          },
          "SLALOM": {
            "info": {
              "tagType": "enum",
              "name": "SLALOM"
            },
            "details": "Slalom animation."
          },
          "BOOST": {
            "info": {
              "tagType": "enum",
              "name": "BOOST"
            },
            "details": "Boost animation."
          },
          "LOOPING": {
            "info": {
              "tagType": "enum",
              "name": "LOOPING"
            },
            "details": "Make a looping. (Only for WingX)"
          },
          "BARREL_ROLL_180_RIGHT": {
            "info": {
              "tagType": "enum",
              "name": "BARREL_ROLL_180_RIGHT"
            },
            "details": "Make a barrel roll of 180 degree turning on right. (Only for WingX)"
          },
          "BARREL_ROLL_180_LEFT": {
            "info": {
              "tagType": "enum",
              "name": "BARREL_ROLL_180_LEFT"
            },
            "details": "Make a barrel roll of 180 degree turning on left. (Only for WingX)"
          },
          "BACKSWAP": {
            "info": {
              "tagType": "enum",
              "name": "BACKSWAP"
            },
            "details": "Put the drone upside down. (Only for WingX)"
          },
          "lookup": {},
          "value": null
        },
        "state": {
          "info": {
            "tagType": "arg",
            "name": "state",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "State of the animation",
          "stopped": {
            "info": {
              "tagType": "enum",
              "name": "stopped"
            },
            "details": "animation is stopped"
          },
          "started": {
            "info": {
              "tagType": "enum",
              "name": "started"
            },
            "details": "animation is started"
          },
          "notAvailable": {
            "info": {
              "tagType": "enum",
              "name": "notAvailable"
            },
            "details": "The animation is not available"
          },
          "lookup": {},
          "value": null
        },
        "error": {
          "info": {
            "tagType": "arg",
            "name": "error",
            "type": "enum",
            "id": 2,
            "bytes": 1
          },
          "details": "Error to explain the state",
          "ok": {
            "info": {
              "tagType": "enum",
              "name": "ok"
            },
            "details": "No Error"
          },
          "unknown": {
            "info": {
              "tagType": "enum",
              "name": "unknown"
            },
            "details": "Unknown generic error"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "anim",
          "1": "state",
          "2": "error"
        }
      },
      "lookup": {
        "0": "List"
      }
    },
    "Accessory": {
      "info": {
        "tagType": "class",
        "name": "Accessory",
        "id": 26
      },
      "details": "Accessories_related commands.",
      "Config": {
        "info": {
          "tagType": "cmd",
          "name": "Config",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Declare an accessory",
            "desc": "Declare an accessory.\\n You can choose the accessory between all accessible for this product.\\n You can get this list through event [SupportedAccessories](#0_27_0).\\n\\n You can only set the accessory when the modification is enabled.\\n You can know if it possible with the event [AccessoryDeclarationAvailability](#0_27_2).",
            "support": "0902;0905;0906;0907;0909;090a",
            "result": "The product knows which accessory it is wearing.\\n Then, event [AccessoryConfigChanged](#0_27_1) is triggered."
          }
        },
        "accessory": {
          "info": {
            "tagType": "arg",
            "name": "accessory",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Accessory configuration to set.",
          "NO_ACCESSORY": {
            "info": {
              "tagType": "enum",
              "name": "NO_ACCESSORY"
            },
            "details": "No accessory."
          },
          "STD_WHEELS": {
            "info": {
              "tagType": "enum",
              "name": "STD_WHEELS"
            },
            "details": "Standard wheels"
          },
          "TRUCK_WHEELS": {
            "info": {
              "tagType": "enum",
              "name": "TRUCK_WHEELS"
            },
            "details": "Truck wheels"
          },
          "HULL": {
            "info": {
              "tagType": "enum",
              "name": "HULL"
            },
            "details": "Hull"
          },
          "HYDROFOIL": {
            "info": {
              "tagType": "enum",
              "name": "HYDROFOIL"
            },
            "details": "Hydrofoil"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "accessory"
        }
      },
      "lookup": {
        "0": "Config"
      }
    },
    "AccessoryState": {
      "info": {
        "tagType": "class",
        "name": "AccessoryState",
        "id": 27
      },
      "details": "Accessories_related commands.",
      "SupportedAccessoriesListChanged": {
        "info": {
          "tagType": "cmd",
          "name": "SupportedAccessoriesListChanged",
          "id": 0,
          "type": "MAP_ITEM"
        },
        "comment": {
          "info": {
            "title": "Supported accessories list",
            "desc": "Supported accessories list.",
            "support": "0902;0905;0906;0907;0909;090a",
            "triggered": "at connection."
          }
        },
        "accessory": {
          "info": {
            "tagType": "arg",
            "name": "accessory",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Accessory configurations supported by the product.",
          "NO_ACCESSORY": {
            "info": {
              "tagType": "enum",
              "name": "NO_ACCESSORY"
            },
            "details": "No accessory."
          },
          "STD_WHEELS": {
            "info": {
              "tagType": "enum",
              "name": "STD_WHEELS"
            },
            "details": "Standard wheels"
          },
          "TRUCK_WHEELS": {
            "info": {
              "tagType": "enum",
              "name": "TRUCK_WHEELS"
            },
            "details": "Truck wheels"
          },
          "HULL": {
            "info": {
              "tagType": "enum",
              "name": "HULL"
            },
            "details": "Hull"
          },
          "HYDROFOIL": {
            "info": {
              "tagType": "enum",
              "name": "HYDROFOIL"
            },
            "details": "Hydrofoil"
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "accessory"
        }
      },
      "AccessoryConfigChanged": {
        "info": {
          "tagType": "cmd",
          "name": "AccessoryConfigChanged",
          "id": 1
        },
        "comment": {
          "info": {
            "title": "Accessory config",
            "desc": "Accessory config.",
            "support": "0902;0905;0906;0907;0909;090a",
            "triggered": "by [DeclareAccessory](#0_26_0)."
          }
        },
        "details": "Accessory config response.",
        "newAccessory": {
          "info": {
            "tagType": "arg",
            "name": "newAccessory",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Accessory configuration reported by firmware.",
          "UNCONFIGURED": {
            "info": {
              "tagType": "enum",
              "name": "UNCONFIGURED"
            },
            "details": "No accessory configuration set. Controller needs to set one."
          },
          "NO_ACCESSORY": {
            "info": {
              "tagType": "enum",
              "name": "NO_ACCESSORY"
            },
            "details": "No accessory."
          },
          "STD_WHEELS": {
            "info": {
              "tagType": "enum",
              "name": "STD_WHEELS"
            },
            "details": "Standard wheels"
          },
          "TRUCK_WHEELS": {
            "info": {
              "tagType": "enum",
              "name": "TRUCK_WHEELS"
            },
            "details": "Truck wheels"
          },
          "HULL": {
            "info": {
              "tagType": "enum",
              "name": "HULL"
            },
            "details": "Hull"
          },
          "HYDROFOIL": {
            "info": {
              "tagType": "enum",
              "name": "HYDROFOIL"
            },
            "details": "Hydrofoil"
          },
          "IN_PROGRESS": {
            "info": {
              "tagType": "enum",
              "name": "IN_PROGRESS"
            },
            "details": "Configuration in progress."
          },
          "lookup": {},
          "value": null
        },
        "error": {
          "info": {
            "tagType": "arg",
            "name": "error",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "Error code.",
          "OK": {
            "info": {
              "tagType": "enum",
              "name": "OK"
            },
            "details": "No error. Accessory config change successful."
          },
          "UNKNOWN": {
            "info": {
              "tagType": "enum",
              "name": "UNKNOWN"
            },
            "details": "Cannot change accessory configuration for some reason."
          },
          "FLYING": {
            "info": {
              "tagType": "enum",
              "name": "FLYING"
            },
            "details": "Cannot change accessory configuration while flying."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "newAccessory",
          "1": "error"
        }
      },
      "AccessoryConfigModificationEnabled": {
        "info": {
          "tagType": "cmd",
          "name": "AccessoryConfigModificationEnabled",
          "id": 2
        },
        "comment": {
          "info": {
            "title": "Accessory declaration availability",
            "desc": "Availability to declare or not an accessory.",
            "support": "0902;0905;0906;0907;0909;090a",
            "triggered": "when the availability changes."
          }
        },
        "enabled": {
          "info": {
            "tagType": "arg",
            "name": "enabled",
            "type": "u8",
            "id": 0,
            "bytes": 1
          },
          "details": "1 if the modification of the accessory Config is enabled, 0 otherwise",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "enabled"
        }
      },
      "lookup": {
        "0": "SupportedAccessoriesListChanged",
        "1": "AccessoryConfigChanged",
        "2": "AccessoryConfigModificationEnabled"
      }
    },
    "Charger": {
      "info": {
        "tagType": "class",
        "name": "Charger",
        "id": 28
      },
      "details": "Commands sent by the controller to set charger parameters.",
      "SetMaxChargeRate": {
        "info": {
          "tagType": "cmd",
          "name": "SetMaxChargeRate",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Set max charge rate",
            "desc": "The product will inform itself the controller about its charging type (see [ChargingInfoChanged](#0_29_3)).",
            "support": "none",
            "result": "None."
          }
        },
        "rate": {
          "info": {
            "tagType": "arg",
            "name": "rate",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The new maximum charge rate.",
          "SLOW": {
            "info": {
              "tagType": "enum",
              "name": "SLOW"
            },
            "details": "Fully charge the battery at a slow rate. Typically limit max charge current to 512 mA."
          },
          "MODERATE": {
            "info": {
              "tagType": "enum",
              "name": "MODERATE"
            },
            "details": "Almost fully_charge the battery at moderate rate (> 512mA) but slower than the fastest rate."
          },
          "FAST": {
            "info": {
              "tagType": "enum",
              "name": "FAST"
            },
            "details": "Almost fully_charge the battery at the highest possible rate supported by the charger."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "rate"
        }
      },
      "lookup": {
        "0": "SetMaxChargeRate"
      }
    },
    "ChargerState": {
      "info": {
        "tagType": "class",
        "name": "ChargerState",
        "id": 29
      },
      "details": "Commands sent by the firmware to advertise the charger status.",
      "MaxChargeRateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "MaxChargeRateChanged",
          "id": 0,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Max charge rate",
            "desc": "Max charge rate."
          }
        },
        "rate": {
          "info": {
            "tagType": "arg",
            "name": "rate",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The current maximum charge rate.",
          "SLOW": {
            "info": {
              "tagType": "enum",
              "name": "SLOW"
            },
            "details": "Fully charge the battery at a slow rate. Typically limit max charge current to 512 mA."
          },
          "MODERATE": {
            "info": {
              "tagType": "enum",
              "name": "MODERATE"
            },
            "details": "Almost fully_charge the battery at moderate rate (> 512 mA) but slower than the fastest rate."
          },
          "FAST": {
            "info": {
              "tagType": "enum",
              "name": "FAST"
            },
            "details": "Almost fully_charge the battery at the highest possible rate supported by the charger."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "rate"
        }
      },
      "CurrentChargeStateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "CurrentChargeStateChanged",
          "id": 1,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Current charge state",
            "desc": "Current charge state."
          }
        },
        "status": {
          "info": {
            "tagType": "arg",
            "name": "status",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "Charger status.",
          "DISCHARGING": {
            "info": {
              "tagType": "enum",
              "name": "DISCHARGING"
            },
            "details": "The battery is discharging."
          },
          "CHARGING_SLOW": {
            "info": {
              "tagType": "enum",
              "name": "CHARGING_SLOW"
            },
            "details": "The battery is charging at a slow rate about 512 mA."
          },
          "CHARGING_MODERATE": {
            "info": {
              "tagType": "enum",
              "name": "CHARGING_MODERATE"
            },
            "details": "The battery is charging at a moderate rate (> 512 mA) but slower than the fastest rate."
          },
          "CHARGING_FAST": {
            "info": {
              "tagType": "enum",
              "name": "CHARGING_FAST"
            },
            "details": "The battery is charging at a the fastest rate."
          },
          "BATTERY_FULL": {
            "info": {
              "tagType": "enum",
              "name": "BATTERY_FULL"
            },
            "details": "The charger is plugged and the battery is fully charged."
          },
          "lookup": {},
          "value": null
        },
        "phase": {
          "info": {
            "tagType": "arg",
            "name": "phase",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "The current charging phase.",
          "UNKNOWN": {
            "info": {
              "tagType": "enum",
              "name": "UNKNOWN"
            },
            "details": "The charge phase is unknown or irrelevant."
          },
          "CONSTANT_CURRENT_1": {
            "info": {
              "tagType": "enum",
              "name": "CONSTANT_CURRENT_1"
            },
            "details": "First phase of the charging process. The battery is charging with constant current."
          },
          "CONSTANT_CURRENT_2": {
            "info": {
              "tagType": "enum",
              "name": "CONSTANT_CURRENT_2"
            },
            "details": "Second phase of the charging process. The battery is charging with constant current, with a higher voltage than the first phase."
          },
          "CONSTANT_VOLTAGE": {
            "info": {
              "tagType": "enum",
              "name": "CONSTANT_VOLTAGE"
            },
            "details": "Last part of the charging process. The battery is charging with a constant voltage."
          },
          "CHARGED": {
            "info": {
              "tagType": "enum",
              "name": "CHARGED"
            },
            "details": "The battery is fully charged."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "status",
          "1": "phase"
        }
      },
      "LastChargeRateChanged": {
        "info": {
          "tagType": "cmd",
          "name": "LastChargeRateChanged",
          "id": 2,
          "deprecated": "true"
        },
        "comment": {
          "info": {
            "title": "Last charge rate",
            "desc": "Last charge rate."
          }
        },
        "rate": {
          "info": {
            "tagType": "arg",
            "name": "rate",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The charge rate recorded by the firmware for the last charge.",
          "UNKNOWN": {
            "info": {
              "tagType": "enum",
              "name": "UNKNOWN"
            },
            "details": "The last charge rate is not known."
          },
          "SLOW": {
            "info": {
              "tagType": "enum",
              "name": "SLOW"
            },
            "details": "Slow charge rate."
          },
          "MODERATE": {
            "info": {
              "tagType": "enum",
              "name": "MODERATE"
            },
            "details": "Moderate charge rate."
          },
          "FAST": {
            "info": {
              "tagType": "enum",
              "name": "FAST"
            },
            "details": "Fast charge rate."
          },
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "rate"
        }
      },
      "ChargingInfo": {
        "info": {
          "tagType": "cmd",
          "name": "ChargingInfo",
          "id": 3
        },
        "comment": {
          "info": {
            "title": "Charging information",
            "desc": "Charging information.",
            "support": "0905;0906;0907;0909;090a",
            "triggered": "when the product is charging or when the charging state changes."
          }
        },
        "phase": {
          "info": {
            "tagType": "arg",
            "name": "phase",
            "type": "enum",
            "id": 0,
            "bytes": 1
          },
          "details": "The current charging phase.",
          "UNKNOWN": {
            "info": {
              "tagType": "enum",
              "name": "UNKNOWN"
            },
            "details": "The charge phase is unknown or irrelevant."
          },
          "CONSTANT_CURRENT_1": {
            "info": {
              "tagType": "enum",
              "name": "CONSTANT_CURRENT_1"
            },
            "details": "First phase of the charging process. The battery is charging with constant current."
          },
          "CONSTANT_CURRENT_2": {
            "info": {
              "tagType": "enum",
              "name": "CONSTANT_CURRENT_2"
            },
            "details": "Second phase of the charging process. The battery is charging with constant current, with a higher voltage than the first phase."
          },
          "CONSTANT_VOLTAGE": {
            "info": {
              "tagType": "enum",
              "name": "CONSTANT_VOLTAGE"
            },
            "details": "Last part of the charging process. The battery is charging with a constant voltage."
          },
          "CHARGED": {
            "info": {
              "tagType": "enum",
              "name": "CHARGED"
            },
            "details": "The battery is fully charged."
          },
          "DISCHARGING": {
            "info": {
              "tagType": "enum",
              "name": "DISCHARGING"
            },
            "details": "The battery is discharging; Other arguments refers to the last charge."
          },
          "lookup": {},
          "value": null
        },
        "rate": {
          "info": {
            "tagType": "arg",
            "name": "rate",
            "type": "enum",
            "id": 1,
            "bytes": 1
          },
          "details": "The charge rate. If phase is DISCHARGING, refers to the last charge.",
          "UNKNOWN": {
            "info": {
              "tagType": "enum",
              "name": "UNKNOWN"
            },
            "details": "The charge rate is not known."
          },
          "SLOW": {
            "info": {
              "tagType": "enum",
              "name": "SLOW"
            },
            "details": "Slow charge rate."
          },
          "MODERATE": {
            "info": {
              "tagType": "enum",
              "name": "MODERATE"
            },
            "details": "Moderate charge rate."
          },
          "FAST": {
            "info": {
              "tagType": "enum",
              "name": "FAST"
            },
            "details": "Fast charge rate."
          },
          "lookup": {},
          "value": null
        },
        "intensity": {
          "info": {
            "tagType": "arg",
            "name": "intensity",
            "type": "u8",
            "id": 2,
            "bytes": 1
          },
          "details": "The charging intensity, in dA. (12dA = 1,2A) ; If phase is DISCHARGING, refers to the last charge. Equals to 0 if not known.",
          "lookup": {},
          "value": null
        },
        "fullChargingTime": {
          "info": {
            "tagType": "arg",
            "name": "fullChargingTime",
            "type": "u8",
            "id": 3,
            "bytes": 1
          },
          "details": "The full charging time estimated, in minute. If phase is DISCHARGING, refers to the last charge. Equals to 0 if not known.",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "phase",
          "1": "rate",
          "2": "intensity",
          "3": "fullChargingTime"
        }
      },
      "lookup": {
        "0": "MaxChargeRateChanged",
        "1": "CurrentChargeStateChanged",
        "2": "LastChargeRateChanged",
        "3": "ChargingInfo"
      }
    },
    "RunState": {
      "info": {
        "tagType": "class",
        "name": "RunState",
        "id": 30
      },
      "details": "Commands sent by the drone to inform about the run or flight state",
      "RunIdChanged": {
        "info": {
          "tagType": "cmd",
          "name": "RunIdChanged",
          "id": 0
        },
        "comment": {
          "info": {
            "title": "Current run id",
            "desc": "Current run id.\\n A run id is uniquely identifying a run or a flight.\\n For each run is generated on the drone a file which can be used by Academy to sum up the run.\\n Also, each medias taken during a run has a filename containing the run id.",
            "support": "0901:3:0:1;090c;090e",
            "triggered": "when the drone generates a new run id (generally right after a take off)."
          }
        },
        "runId": {
          "info": {
            "tagType": "arg",
            "name": "runId",
            "type": "string",
            "id": 0,
            "bytes": 1
          },
          "details": "Id of the run",
          "lookup": {},
          "value": null
        },
        "lookup": {
          "0": "runId"
        }
      },
      "lookup": {
        "0": "RunIdChanged"
      }
    },
    "lookup": {
      "0": "Network",
      "1": "NetworkEvent",
      "2": "Settings",
      "3": "SettingsState",
      "4": "Common",
      "5": "CommonState",
      "6": "OverHeat",
      "7": "OverHeatState",
      "8": "Controller",
      "9": "WifiSettings",
      "10": "WifiSettingsState",
      "11": "Mavlink",
      "12": "MavlinkState",
      "13": "Calibration",
      "14": "CalibrationState",
      "15": "CameraSettingsState",
      "16": "GPS",
      "17": "FlightPlanState",
      "18": "ARLibsVersionsState",
      "19": "FlightPlanEvent",
      "20": "Audio",
      "21": "AudioState",
      "22": "Headlights",
      "23": "HeadlightsState",
      "24": "Animations",
      "25": "AnimationsState",
      "26": "Accessory",
      "27": "AccessoryState",
      "28": "Charger",
      "29": "ChargerState",
      "30": "RunState"
    }
  },
  "lookup": {
    "0": "common"
  }
}


module.exports=projects;
      