const fs = require('fs');
const util = require('util');
const convert = require('xml-js');

fs.readFile(
  `${__dirname}/../arsdk-xml/xml/common.xml`,
  function(err, data) {
    console.log(err);
    data=data.toString().replace(/[\t\n\r]/g,' ')
      .replace(/<!--[\s\S]*?-->/ig,'')
      .replace(/<\?[\s\S]*?\?>/ig,'')
      .replace(/\s+/g,' ')
      .replace(/[\-]/g,'_')
      .replace(/<(\w+) name="([\w]+)"/g,'<$2 originalTag="$1" name="$2"');

    while(data.indexOf('originalTag=')>-1){
      const regEx = /<(\w+) originalTag="(\w+)"/;
      const match = data.match(regEx);
      let key=match[1];
      const tag=match[2];

      const tagRegex=new RegExp(`</${tag}`);
      data=data.replace(tagRegex,`</${key}`);


      data=data.replace('originalTag="','tagType="');
    }

    const projects=convert.xml2js(
      data,
      {
        compact       : true,
        trim          : true,
        nativeType    : true,
        attributesKey : 'info',
        textKey       : 'details'
      }
    );

    projects.lookup={};

    function assignLookup(parent,child){
      //console.log('CHILD : ', child.info);
      child.info.id=Number(child.info.id);

      parent.lookup[
        child.info.id
      ]=child.info.name;
    }

    function isCommandRelated(child){
      //console.trace(child)
      if(!child.info){
        return false;
      }
      if(
        !child.info.tagType
      ){
        return false;
      }

      if(!child.lookup){
        child.lookup={};
      }

      return true;
    }

    for(const key in projects){
      const project=projects[key];

      //console.log(entry,key);
      if(!isCommandRelated(project)){
        continue;
      }

      assignLookup(projects,project);

      for(const key in project){
        const entry=project[key];

        if(!isCommandRelated(entry)){
          continue;
        }

        assignLookup(project,entry);

        for(const key in entry){
          const command=entry[key];
          if(!isCommandRelated(command)){
            continue;
          }

          let argCount=0;
          assignLookup(entry,command);

          for(const key in command){
            const arg=command[key];
            if(!isCommandRelated(arg)){
              continue;
            }

            arg.info.id=argCount;
            argCount++;

            switch(arg.info.type){
              case 'u16' :
              case 'i16' :
                arg.info.bytes=2;
                break;
              case 'u32'  :
              case 'i32'  :
              case 'float':
                arg.info.bytes=4;
                break;
              default :
                arg.info.bytes=1;
            }

            arg.value=null;

            assignLookup(command,arg);
          }
        }
      }
    }

    fs.writeFile(
      `${__dirname}/../projects/common.js`,
      `'use strict';
/*************************************************\\
generated from arsdk-xml/xml/*.xml
generated by utils/convertSDK.js
generated on : ${new Date().toLocaleString()}
\\**************************************************/
const projects=${
  JSON.stringify(
    projects,
    null,
    2
  )
}


module.exports=projects;
      `,
      function(err, data) {
        console.log(err);
      }
    );

    let markdown='';

    for(const key in projects.lookup){
      const projectName=projects.lookup[key];
      const project=projects[projectName];

      markdown+=`# projects.${projectName}
-----
### ${project.details}

Below is a table of all the ${projectName} Project command classes.
All hex IDs are included as well incase you need them for debugging or extending the module.

| Class Name | ID | Hex ID | Description |
|------------|----|--------|-------------|`;

      for(const key in project.lookup){
          const className=project.lookup[key];
          const entry=project[className];
          markdown+=`
|[${className}](#user-content-projects${projectName}${className})|${entry.info.id}|0x${Number(entry.info.id).toString(16)}|${entry.details}|`;
      }

      for(const key in project.lookup){
          const className=project.lookup[key];
          const entry=project[className];
          markdown+=`
# projects.${projectName}.${className}
-----
### ${entry.details}

The ${className} Class contains the following commands.
All hex IDs are included as well incase you need them for debugging or extending the module.

| Command Name | ID | Hex ID | Description |
|--------------|----|--------|-------------|`;

      }

      fs.writeFile(
        `${__dirname}/../projects/common.md`,
        markdown,
        function(err, data) {
          console.log(err);
        }
      );
    }
  }
);
